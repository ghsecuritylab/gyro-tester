#include <stdio.h>
#include <math.h>
#include "platform.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "xbasic_types.h"
#include "xscugic.h"
#include "xuartps.h"
#include "xuartps_hw.h"
#include "xil_exception.h"
#include "xttcps.h"


//#define FAKE_IC		//used to send data back when no IC present
#define FAKE_DATA	//used to create an array of data for COM test

/* ===== Code to deal with the DMA IP ===== */

#include "xaxidma.h"
#include "xdebug.h"

#ifdef __aarch64__
#include "xil_mmu.h"
#endif

#if defined(XPAR_UARTNS550_0_BASEADDR)
#include "xuartns550_l.h"       /* to use uartns550 */
#endif

#if (!defined(DEBUG))
extern void xil_printf(const char *format, ...);
#endif

/******************** Constant Definitions **********************************/
#define UARTPS_DEVICE_ID	XPAR_XUARTPS_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID
#define UART_INT_IRQ_ID		XPAR_XUARTPS_1_INTR
#define UART_BASEADDR		XPAR_XUARTPS_0_BASEADDR
#define RX_BUFFER_SIZE		30
#define TX_BUFFER_SIZE		1000
#define NUM_RXFIFO_DUMMY_READS_REQUIRED	31

// possible states for main while loop used to drive actions
#define SERVICE_UART		0x04

#define CMD_READ_DATA				0x61	// read data from tester - should be followed by
											// 4 bytes(unsigned int) for num words to be
											// sent (msbyte first)
#define CMD_LOAD_SAWTOOTH_UP_DATA	0x62	// load test data1(sawtooth up) into TxData array
#define CMD_LOAD_SAWTOOTH_DOWN_DATA	0x63	// load test data1(sawtooth down) into TxData array
#define CMD_READ_REGISTER			0x41	// read 16-bit contents of gyro ic register
#define CMD_WRITE_REGISTER			0x42	// write 16-bit value to gyro ic register
#define CMD_PROG_OTP_CHIP_ADDR		0x81	// program the chip address into OTP memory
#define CMD_PROG_OTP_VBG_TRIM		0x82	// program the bandgap trim value into OTP memory
#define CMD_READ_PACKETS			0x45	// read packet data
#define CMD_CAL_ADC0 				0x90	// perform calibration on ADC0
#define CMD_CAL_ADC1  				0x91	// perform calibration on ADC1
#define CMD_READ_ADC0_CAL 			0x92	// read/transmit calibration values for ADC0
#define CMD_READ_ADC1_CAL 			0x93	// read/transmit calibration values for ADC1
#define CMD_FAST_CAL_ADC0			0x94	// perform fast calibration on ADC0
#define CMD_FAST_CAL_ADC1			0x95	// perform fast calibration on ADC1
#define CMD_LOOP_ADC_ACQUISITIONS	0xA0	// loops AXI commands to read ADC samples --for debug only--
#define CMD_START_ADC_ACQUISITIONS	0xA1	// read values via HSI bus into RxFIFO until full
#define CMD_FILL_DAC_TXFIFO			0xA2	// fill the TxFIFO with values and send via HSI bus
#define CMD_FPGA_ALL_OUTPUTS_LOW	0xA7	// set all FPGA outputs low for safe power down
#define CMD_FPGA_ALL_OUTPUTS_ENABLED 0xA8	// enable all FPGA outputs after power supplies turned on
#define CMD_FPGA_GET_OUTPUTS_STATE  0xA9	// read the enabled/disabled state of FPGA outputs
#define CMD_RUN_TADC_CONVERSIONS	0xAC	// take measurements using the test ADC
#define CMD_ENABLE_HSI_SIGNALS		0xAD	// enable hsi signals on the FPGA
#define	CMD_DISABLE_HSI_SIGNALS		0xAE	// disable hsi signals on the FPGA
#define CMD_SET_MCLK_DIV			0xB0	// set the MCLK division setting
#define CMD_GET_MCLK_DIV			0xB1	// send MCLK division setting over uart
#define	CMD_SET_SPICLK_DIV			0xB2	// set the SPI clock division setting
#define CMD_GET_SPICLK_DIV			0xB3	// send the SPI clock division setting over uart
#define CMD_SET_PACKET_SIZE			0xB4	// set the FIFO packet size
#define CMD_GET_PACKET_SIZE			0xB5	// send the packet size over uart
#define CMD_GET_DAC_SELECTION		0xB6	// send the current DAC(TX channel) selected for HSI dout over UART
#define	CMD_SET_DAC_SELECTION		0xB7	// set the current DAC(TX channel) selected for HSI dout
#define CMD_GET_ADC_SELECTION		0xB8	// send the current ADC(RX channel) mux selection over UART
#define CMD_SET_ADC_SELECTION		0xB9	// set the current ADC(RX channel) mux selection
#define CMD_GET_CONFIG_SETTINGS		0xBA	// send all config settings over uart


#define RESPONSE_ADC_ACQUIRE_DONE	0x55	// indicates finished with ADC data acquisition

// test ADC mux settings
#define TADC_MUX_TEMPERATURE_SENSOR		0x000
#define	TADC_MUX_BANDGAP_VOLTAGE		0x200
#define TADC_MUX_REFERENCE_VOLTAGE		0x400
#define TADC_MUX_VEXT					0x600
#define TADC_MUX_CEXT					0x800
#define TADC_MUX_REXT					0xA00
#define TADC_MUX_VSSA					0xC00
#define TADC_MUX_VDDA					0xE00

#define TADC_ENABLE						0x1000
#define	TADC_TEMP_SENSOR_ENABLE			0x0080
#define TADC_VEXTSEL					0x0040
#define	TADC_RESET						0x0002
#define TADC_START						0x0001

//configuration constants
#define CONFIG_MCK_DIV_1				0x00000	// base frequency is 50MHz
#define CONFIG_MCK_DIV_2				0x10000	// div2 is 25MHz
#define CONFIG_MCK_DIV_4				0x20000	// div4 is 12.5MHz
#define CONFIG_MCK_DIV_8				0x30000	// div8 is 6.25MHz
#define CONFIG_MCK_DIV_16				0x40000
#define CONFIG_MCK_DIV_32				0x50000
#define CONFIG_MCK_DIV_64				0x60000
#define CONFIG_MCK_DIV_128				0x70000
u32 MCK_div_setting = CONFIG_MCK_DIV_1;
//
#define CONFIG_PACKET_SIZE_64_SAMPLES	0x0000
#define CONFIG_PACKET_SIZE_128_SAMPLES	0x1000
#define CONFIG_PACKET_SIZE_256_SAMPLES	0x2000
#define CONFIG_PACKET_SIZE_512_SAMPLES	0x3000
#define CONFIG_PACKET_SIZE_1024_SAMPLES	0x4000
#define CONFIG_PACKET_SIZE_2048_SAMPLES	0x5000
#define CONFIG_PACKET_SIZE_4096_SAMPLES	0x6000
#define CONFIG_PACKET_SIZE_8192_SAMPLES	0x7000
u32 packet_size_setting = CONFIG_PACKET_SIZE_4096_SAMPLES;
//
#define CONFIG_INPUT_CHANNEL_HSIA0		0x00
#define CONFIG_INPUT_CHANNEL_HSIA1		0x10
u32 HSI_input_channel_setting = CONFIG_INPUT_CHANNEL_HSIA0;
//
#define CONFIG_OUTPUT_CHANNEL_HSIDAP	0x0
#define CONFIG_OUTPUT_CHANNEL_HSIDAM	0x1
#define CONFIG_OUTPUT_CHANNEL_HSIDBP	0x2
#define CONFIG_OUTPUT_CHANNEL_HSIDBM	0x3
#define CONFIG_OUTPUT_CHANNEL_HSIDC		0x4
u32 HSI_output_channel_setting = CONFIG_OUTPUT_CHANNEL_HSIDAP;
//
#define CONFIG_SPI_CLK_DIV_1			0x0	// base frequency is 25MHz
#define CONFIG_SPI_CLK_DIV_2			0x1	// div2 is 12.5MHz
#define CONFIG_SPI_CLK_DIV_4			0x2	// div4 is 6.25MHz
#define CONFIG_SPI_CLK_DIV_8			0x3	// div8 is 3.125MHz
unsigned int SPI_clock_division_setting = CONFIG_SPI_CLK_DIV_4;

#define DIV_1	1
#define DIV_2	2
#define DIV_4	4
#define DIV_8	8
#define DIV_16	16
#define DIV_32	32
#define DIV_64	64
#define DIV_128	128

#ifdef FAKE_DATA
static void load_sawtooth_up_data(void);
static void load_sawtooth_down_data(void);
#define SAWTOOTH_MAX_VALUE 100
#define SAWTOOTH_STEP_VALUE 1
#endif
/*
 * Device hardware build related constants.
 */

#define DMA_DEV_ID		XPAR_AXIDMA_0_DEVICE_ID

#ifdef XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#define DDR_BASE_ADDR		XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#elif XPAR_MIG7SERIES_0_BASEADDR
#define DDR_BASE_ADDR	XPAR_MIG7SERIES_0_BASEADDR
#elif XPAR_MIG_0_BASEADDR
#define DDR_BASE_ADDR	XPAR_MIG_0_BASEADDR
#elif XPAR_PSU_DDR_0_S_AXI_BASEADDR
#define DDR_BASE_ADDR	XPAR_PSU_DDR_0_S_AXI_BASEADDR
#endif

#ifndef DDR_BASE_ADDR
#warning CHECK FOR THE VALID DDR ADDRESS IN XPARAMETERS.H, \
			DEFAULT SET TO 0x01000000
#define MEM_BASE_ADDR		0x01000000
#else
#define MEM_BASE_ADDR		(DDR_BASE_ADDR + 0x1000000)
#endif

#define TX_BD_SPACE_BASE	(MEM_BASE_ADDR)
#define TX_BD_SPACE_HIGH	(MEM_BASE_ADDR + 0x0000FFFF) // was FFFF
#define TX_BUFFER_BASE		(MEM_BASE_ADDR + 0x00010000)
#define TX_BUFFER_HIGH		(MEM_BASE_ADDR + 0x0001FFFF)

#define RX_BD_SPACE_BASE	(MEM_BASE_ADDR + 0x00020000) // was 1000
#define RX_BD_SPACE_HIGH	(MEM_BASE_ADDR + 0x0002FFFF) // was 1FFF
#define RX_BUFFER_BASE		(MEM_BASE_ADDR + 0x00030000)
#define RX_BUFFER_HIGH		(MEM_BASE_ADDR + 0x0003FFFF)

#define MAX_PKT_LEN				4096	//8192//16384	// this is Bytes
#define MARK_UNCACHEABLE        0x701

#define TEST_START_VALUE	0xC

#define DELAY_TIMER_DEVICE_ID	XPAR_XTTCPS_0_DEVICE_ID
#define DELAY_TIMER_INTERRUPT_ID	XPAR_XTTCPS_0_INTR
#define	TICK_TIMER_FREQ_HZ	100000  /* Tick timer counter's output frequency */
#define TICKS_PER_CHANGE_PERIOD	TICK_TIMER_FREQ_HZ /* Tick signals per update */

int numberDataSamples;
Xuint32 outputDataBuffer[MAX_PKT_LEN/4];

typedef struct {
	u32 OutputHz;	/* Output frequency */
	XInterval Interval;	/* Interval value */
	u8 Prescaler;	/* Prescaler value */
	u16 Options;	/* Option settings */
} TmrCntrSetup;

// ---------------

#define INTC_INTERRUPT_ID_0 63 // IRQ_F2P[2:2]
#define INTC_INTERRUPT_ID_1 64 // IRQ_F2P[3:3]
#define INTC_INTERRUPT_ID_2 65 // IRQ_F2P[4:4]

// instance of interrupt controller
static XScuGic intc;

// address of AXI PL interrupt generator
Xuint32* baseaddr_p           = (Xuint32*) XPAR_AXI4_PL_INTERRUPT_GE_0_S00_AXI_BASEADDR;
Xuint32* baseaddr_spi         = (Xuint32*) 0x43C10000;
Xuint32* baseaddr_channel     = (Xuint32*) 0x43C20000;
Xuint32* baseaddr_rx_fifo     = (Xuint32*) 0x43C30000;
Xuint32* baseaddr_tx_fifo     = (Xuint32*) 0x43C40000;

int flag;
int setup_interrupt_system();
int Status;
unsigned int state = 0;
static XScuGic interrupt_controller;	//instance of the interrupt controller
XUartPs UartPs;							// Instance of the UART Device

static u8 UartRxData[RX_BUFFER_SIZE];	// Buffer for Receiving Data
static u8 UartTxData[TX_BUFFER_SIZE];	// Buffer for Transmitting Data

u16 ADC_calData[8];			// store ADC cal data read from chip before transmit

u8	FPGA_outputs_state = 2; 	// 1=on, 2=0ff
u8  FPGA_hsi_state = 1;			// 1=disabled, 2=enabled
u8  FPGA_channel_state = 1;     //

#define MAX_TADC_RESULTS_SIZE 512
static u16 testADCresults[MAX_TADC_RESULTS_SIZE];


void isr0 (void *intc_inst_ptr);
void isr1 (void *intc_inst_ptr);
void isr2 (void *intc_inst_ptr);
void nops(unsigned int num);

static XTtcPs DelayTimer;		/* Timer counter instance */
static u8 TimerErrorCount;		/* Errors seen at interrupt time */
static volatile u8 timerRunning;


// --- DMA Device Global Variables.

int Status;
XAxiDma_Config *Config;


/**************************** Type Definitions *******************************/
/***************** Macros (Inline Functions) Definitions *********************/
/************************** Function Prototypes ******************************/

#if defined(XPAR_UARTNS550_0_BASEADDR)
static void Uart550_Setup(void);
#endif

static int  initSPI();
static void readSPIStatus();
static void setSPIControl(Xuint32 v);
static void disableSPI();
static void enableSPI();

void modify_register(unsigned int *data, unsigned int address,
					unsigned int newVal);

static int RxSetup(XAxiDma * AxiDmaInstPtr);
static int TxSetup(XAxiDma * AxiDmaInstPtr);

static int sendDMApacket(XAxiDma * AxiDmaInstPtr, int debug_mode);
static int receiveDMApacket(XAxiDma * AxiDmaInstPtr, int debug_mode);
static int sendDMApackets(int npackets);
static int receiveDMApackets(int npackets);

static int SaveData(int debug_mode);
static int CheckDmaResult(XAxiDma * AxiDmaInstPtr, int debug_mode, int skip);

static int openDMADevice();
static int closeDMADevice();

static int readGyroTxFIFODebugData();
static int readGyroRxFIFODebugData();

static int resetGyroTxFIFO();
static int resetGyroRxFIFO();

static int resetGyroTxFIFOLooping();
static int   setGyroTxFIFOLooping();

static int  initGyroChannel();
static void disableGyroChannel();
static void enableGyroChannel();
static void disableHSIGyroChannel();
static void enableHSIGyroChannel();
static void readGyroChannelStatus();
static int  readGyroChannelDebugData();
static int  setGyroChannelConfiguration(unsigned int v);
static int  setGyroChannelControl(unsigned int v);
static void fillTxPacketBuffer(int npoints, u8 *TxPacket);

static int 	SetupUartPs(XScuGic *IntcInstPtr, XUartPs *UartInstPtr,
					u16 DeviceId, u16 UartIntrId);
static void UartPsISR(void *CallBackRef, u32 Event, unsigned int EventData);
static int 	SetupUartInterruptSystem(XScuGic *IntcInstancePtr,
					XUartPs *UartInstancePtr,
					u16 UartIntrId);
static void read_uart_bytes(void);
static unsigned int get_num_data_points(u8 *RxData);
static void send_Tx_data_over_UART(unsigned int num_points_to_send);
static void send_data_over_UART(unsigned int num_points_to_send, u8 *dataArray);
static void send_byte_over_UART(Xuint8 byteToSend);
static int InitializeDelayTimer(void);
void SetTimerDuration(XInterval interval, u8 prescalar);
static void DelayTimerInterruptHandler(void *CallBackRef);
static Xuint8 ProgramOTP(u32 otp32BitValue);
static Xuint8 ProgramOTP_chipID(u32 id);
Xuint8 ProgramOTP_VbgTrim(u8 trimVal);
static u32 readOTP32bits(void);
static void run_ADC0_calibration(void);
static void run_ADC1_calibration(void);
static void read_ADC0_cal_data(void);
static void read_ADC1_cal_data(void);
static int initDMADevice(void);
static int sendPacketButton(void);
static int receivePacketButton(void);
static void fill_testADC_results_array(u16 signalToMeasure, u16 numReadings);
static void changeSPIclockDivision(u8 divSetting);
static void changeMCLKdivision(u8 divSetting);
static void changeHSI_ADC_selection(u8 selection);
static void sendConfigBytesOverUart(void);
/************************** Variable Definitions *****************************/
/*
 * Device instance definitions
 */
XAxiDma AxiDma;

/*
 * Buffer for transmit packet. Must be 32-bit aligned to be used by DMA.
 */
u32 *Packet = (u32 *) TX_BUFFER_BASE;

// -------------------------------------------------------------------
int initGyroChannel(){
  // --- clear GYRO stream channel registers
  *(baseaddr_channel+0) = 0x80000000; // reset
  *(baseaddr_channel+0) = 0x00000000;
  *(baseaddr_channel+1) = 0x00000000;
  *(baseaddr_channel+2) = 0x00000000;
  *(baseaddr_channel+3) = 0x00000000;
  return 0;
}

// -------------------------------------------------------------------
void readGyroChannelStatus(){
  xil_printf("Gyro Channel reg0: 0x%08x\n\r", *(baseaddr_channel+0));
  xil_printf("Gyro Channel reg1: 0x%08x\n\r", *(baseaddr_channel+1));
  xil_printf("Gyro Channel reg2: 0x%08x\n\r", *(baseaddr_channel+2));
  xil_printf("Gyro Channel reg3: 0x%08x\n\r", *(baseaddr_channel+3));
}

// -------------------------------------------------------------------
int setGyroChannelConfiguration(unsigned int v){
  // --- clear GYRO stream channel registers
	Xuint32 x;
    x = (Xuint32)(v);
  *(baseaddr_channel+0) = x;
  return 0;
}
// -------------------------------------------------------------------

 void disableGyroChannel(){
	  *(baseaddr_channel+2) = 0x00000000;
	  FPGA_hsi_state = 2;
	  FPGA_channel_state = 2;
 }
 // -------------------------------------------------------------------

 void enableGyroChannel(){
	  *(baseaddr_channel+2) = 0x00000011;
	  FPGA_hsi_state = 1;
	  FPGA_channel_state = 1;
 }
 // -------------------------------------------------------------------

 void disableHSIGyroChannel(){
	 if(FPGA_channel_state == 1){ // 1=enabled, 2=disabled
	  *(baseaddr_channel+2) = 0x000000001;
	  FPGA_hsi_state = 2;
	 }

 }
 // -------------------------------------------------------------------

 void enableHSIGyroChannel(){
	 if(FPGA_channel_state == 1){
	  *(baseaddr_channel+2) = 0x000000011;
	  FPGA_hsi_state = 1;
	 }
 }

// -------------------------------------------------------------------
int setGyroChannelControl(unsigned int v){
  // --- clear GYRO stream channel registers
	Xuint32 x;
    x = (Xuint32)(v);
  *(baseaddr_channel+1) = x;
  return 0;
}
// -------------------------------------------------------------------
int readGyroChannelDebugData(){
  // ---
  xil_printf("Gyro Channel Buffer Info: 0x%08x\n\r", *(baseaddr_channel+2));
  xil_printf("Gyro Channel ClkGen Info: 0x%08x\n\r", *(baseaddr_channel+3));
  return 0;
}
// -------------------------------------------------------------------
int readGyroRxFIFODebugData(){
  // ---
  xil_printf("Gyro RxFIFO Debug Word 0: 0x%08x\n\r", *(baseaddr_rx_fifo+0));
  xil_printf("Gyro RxFIFO Debug Word 1: 0x%08x\n\r", *(baseaddr_rx_fifo+1));
  xil_printf("Gyro RxFIFO Debug Word 2: 0x%08x\n\r", *(baseaddr_rx_fifo+2));
  xil_printf("Gyro RxFIFO Debug Word 3: 0x%08x\n\r", *(baseaddr_rx_fifo+3));
  return 0;
}
// -------------------------------------------------------------------
int readGyroTxFIFODebugData(){
  // ---
  xil_printf("Gyro TxFIFO Debug Word 0: 0x%08x\n\r", *(baseaddr_tx_fifo+0));
  xil_printf("Gyro TxFIFO Debug Word 1: 0x%08x\n\r", *(baseaddr_tx_fifo+1));
  xil_printf("Gyro TxFIFO Debug Word 2: 0x%08x\n\r", *(baseaddr_tx_fifo+2));
  xil_printf("Gyro TxFIFO Debug Word 3: 0x%08x\n\r", *(baseaddr_tx_fifo+3));
  return 0;
}

// -------------------------------------------------------------------
int resetGyroTxFIFO(){
	*(baseaddr_tx_fifo+0) = 0x00000001;
	*(baseaddr_tx_fifo+0) = 0x00000000;
	  return 0;
}

// -------------------------------------------------------------------
int resetGyroRxFIFO(){
	*(baseaddr_rx_fifo+0) = 0x00000001;
	*(baseaddr_rx_fifo+0) = 0x00000000;
	  return 0;
}

int resetGyroTxFIFOLooping(){
	*(baseaddr_tx_fifo+1) = 0x00000000;
	  return 0;
}

int setGyroTxFIFOLooping(){
	*(baseaddr_tx_fifo+1) = 0x00000001;
	  return 0;
}
// -------------------------------------------------------------------
//   SPI FUNCTIONS
// -------------------------------------------------------------------
int initSPI(){
    // clear SPI registers
    *(baseaddr_spi+0) = 0x00000000;
    *(baseaddr_spi+1) = 0x00000000;
    *(baseaddr_spi+2) = 0x00000000;
    *(baseaddr_spi+3) = 0x00000000;
    return 0;
}

// -------------------------------------------------------------------
void readSPIStatus(){
    xil_printf("baseaddr_spi+0: 0x%08x\n", *(baseaddr_spi+0));
    xil_printf("baseaddr_spi+1: 0x%08x\n", *(baseaddr_spi+1));
    xil_printf("baseaddr_spi+2: 0x%08x\n", *(baseaddr_spi+2));
    xil_printf("baseaddr_spi+3: 0x%08x\n\n", *(baseaddr_spi+3));
}

// -------------------------------------------------------------------
void setSPIControl(Xuint32 v){
	*(baseaddr_spi+3) = v;
}

// -------------------------------------------------------------------
 void setSPIClockDivision(unsigned int v){
   Xuint32 x;

   x = (Xuint32)(v & 0x00000007);
   *(baseaddr_spi+3) = x;
}

 // -------------------------------------------------------------------
  int readSPIClockDivision(){
     Xuint32 x;
     x = *(baseaddr_spi+3);
     return (((int)x) & 0x00000007);
}

// -------------------------------------------------------------------
int writeSPI_blocking(unsigned int address, unsigned int data){
	Xuint32 d, m;
	int x, y, v;

	x = (address & 0x0000007f) << 16;
	y = ((0x0000FFFF) & data);
	v = 0x80000000 | (x | y);
    m = (Xuint32)v;
//    xil_printf("== m  0x%08x \n",m);
	*(baseaddr_spi+0) = m;
	while(1){
	  d = *(baseaddr_spi+1);
//	  xil_printf("== read d  0x%08x \n",d);

	  v = (unsigned int)d;
	  if(v & 0x80000000){
		break;
	  }

    }
    *(baseaddr_spi+0) = 0x00000000;
    return 0;
}
// -------------------------------------------------------------------
 int writeSPI_non_blocking(unsigned int address, unsigned int data){
    Xuint32 d, m;
    int i, x, y, v;
    int clk_div, delay;

    clk_div = readSPIClockDivision(); // binary representation
    delay = 16000;

    x = (address & 0x0000007f) << 16;
    y = ((0x0000FFFF) & data);
    v = 0x80000000 | (x | y);
    m = (Xuint32)v;

   *(baseaddr_spi+0) = m;
   //*(baseaddr_spi+0) = 0x80800F57; // debug only...

   for(i = 0; i <= clk_div; i++){
     nops(delay << i);
     d = *(baseaddr_spi+1);
     v = (unsigned int)d;
     if(v & 0x80000000){
       *(baseaddr_spi+0) = 0x00000000;
       return 0;
     }
   }
   *(baseaddr_spi+0) = 0x00000000;
   return 1;
 }

 // -------------------------------------------------------------------
int writeSPI_non_blocking_orig(unsigned int address, unsigned int data){
	Xuint32 d, m;
	int i, x, y, v;
	int delay;

	delay = 2000;
	x = (address & 0x0000007f) << 16;
	y = ((0x0000FFFF) & data);
	v = 0x80000000 | (x | y);
    m = (Xuint32)v;
    //xil_printf("== m  0x%08x \n\r",m);
	*(baseaddr_spi+0) = m;
    //*(baseaddr_spi+0) = 0x80800F51; // debug only....
    for(i = 0; i < 5; i++){
    	nops(delay << i);
	  d = *(baseaddr_spi+1);
	   //xil_printf("== read d  0x%08x \n\r",d);
	  v = (unsigned int)d;
	  if(v & 0x80000000){
		*(baseaddr_spi+0) = 0x00000000;
		return 0;
	  }
    }
    *(baseaddr_spi+0) = 0x00000000;
    return 1;
}

// -------------------------------------------------------------------
int readSPI(unsigned int *data, unsigned int address){
  Xuint32 d, m;
  int i, x, v, r;
  int res, delay, clk_div;

  clk_div = readSPIClockDivision(); // binary representation
  delay = 16000;

  res = 1;
  *data = 0x00000000;           // clears result
  x = ((address & 0x0000007F) << 16) | 0x00800000;	// DEBUG: the 8F51 is a test pattern
  v = (0x80000000 | x);         // set the start bit
  m = (Xuint32)v;
  *(baseaddr_spi+0) = m;
  for(i = 0; i < clk_div; i++){
    nops(delay << i);
    d = *(baseaddr_spi+1);
    r = (unsigned int)d;
    if(r & 0x80000000){
      *data = (0x0000FFFF & r); // only lower 16 bits matter
      res = 0;
#ifdef FAKE_IC
      *data = (0x0000ABCD);
#endif
      break;
    }
  }
  v = (0x7FFFFFFF & x);
  m = (Xuint32)v;
  *(baseaddr_spi+0) = m;        // clear start
  return res;
}

void disableSPI(){
    *(baseaddr_spi+2) = 0x00000000;
}

void enableSPI(){
    *(baseaddr_spi+2) = 0x00000001;
}
// -------------------------------------------------------------------
void modify_register(unsigned int *data, unsigned int address, unsigned int newVal)
{
	readSPI(data,address);
	xil_printf("\n   reading reg %d: 0x%04x\n",address,*data);
	writeSPI_non_blocking_orig(address,newVal);
	xil_printf("   wrote a 0x%04x to reg%d\n",newVal,address);
	readSPI(data,address);
	xil_printf("   reading reg %d: 0x%04x\n",address,*data);
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------
// NOTE: old code for the FEB_04 project where we had a sample generator
// inside the FPGA.
//
/*
void sendGyroPacket(int nsamples){

*(baseaddr_channel+3) = 0x23000010;
*(baseaddr_channel+2) = 0x80000000;
 nops(100000);
*(baseaddr_channel+2) = 0x00000000;

 }
*/

// -------------------------------------------------------------------
// interrupt service routine for IRQ_F2P[0:0]
void isr0 (void *intc_inst_ptr) {
    xil_printf("isr0 called\n\r");
    *(baseaddr_p+0) = 0x00000000;
}

// interrupt service routine for IRQ_F2P[1:1]
void isr1 (void *intc_inst_ptr) {
    xil_printf("isr1 called\n\r");
    *(baseaddr_p+1) = 0x00000000;
}

// interrupt service routine for IRQ_F2P[2:2]
void isr2 (void *intc_inst_ptr) {
    xil_printf("isr2 called\n\r");
    *(baseaddr_p+2) = 0x00000000;
    xil_printf("read inside isr2:    slv_reg3: 0x%08x\n\r", *(baseaddr_p+3));
    flag = 0;
}

// sets up the interrupt system and enables interrupts for IRQ_F2P[1:0]
int setup_interrupt_system() {

    int result;
    XScuGic *intc_instance_ptr = &intc;
    XScuGic_Config *intc_config;

    // get config for interrupt controller
    intc_config = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
    if (NULL == intc_config) {
        return XST_FAILURE;
    }

    // initialize the interrupt controller driver
    result = XScuGic_CfgInitialize(intc_instance_ptr, intc_config, intc_config->CpuBaseAddress);

    if (result != XST_SUCCESS) {
        return result;
    }

    // set the priority of IRQ_F2P[0:0] to 0xA0 (highest 0xF8, lowest 0x00) and a trigger for a rising edge 0x3.
    XScuGic_SetPriorityTriggerType(intc_instance_ptr, INTC_INTERRUPT_ID_0, 0xA0, 0x3);
    xil_printf("slv_reg3: 0x%08x\n\r", *(baseaddr_p+3));
    // connect the interrupt service routine isr0 to the interrupt controller
    result = XScuGic_Connect(intc_instance_ptr, INTC_INTERRUPT_ID_0, (Xil_ExceptionHandler)isr0, (void *)&intc);

    if (result != XST_SUCCESS) {
        return result;
    }

    // enable interrupts for IRQ_F2P[0:0]
    XScuGic_Enable(intc_instance_ptr, INTC_INTERRUPT_ID_0);

    // set the priority of IRQ_F2P[1:1] to 0xA8 (highest 0xF8, lowest 0x00) and a trigger for a rising edge 0x3.
    XScuGic_SetPriorityTriggerType(intc_instance_ptr, INTC_INTERRUPT_ID_1, 0xA8, 0x3);

    // connect the interrupt service routine isr1 to the interrupt controller
    result = XScuGic_Connect(intc_instance_ptr, INTC_INTERRUPT_ID_1, (Xil_ExceptionHandler)isr1, (void *)&intc);

    if (result != XST_SUCCESS) {
        return result;
    }

    // enable interrupts for IRQ_F2P[1:1]
    XScuGic_Enable(intc_instance_ptr, INTC_INTERRUPT_ID_1);


    // set the priority of IRQ_F2P[1:1] to 0xA8 (highest 0xF8, lowest 0x00) and a trigger for a rising edge 0x3.
    XScuGic_SetPriorityTriggerType(intc_instance_ptr, INTC_INTERRUPT_ID_2, 0xA8, 0x3);
    // connect the interrupt service routine isr1 to the interrupt controller
    result = XScuGic_Connect(intc_instance_ptr, INTC_INTERRUPT_ID_2, (Xil_ExceptionHandler)isr2, (void *)&intc);

    if (result != XST_SUCCESS) {
        return result;
    }
    // enable interrupts for IRQ_F2P[2:2]
    XScuGic_Enable(intc_instance_ptr, INTC_INTERRUPT_ID_2);

    // initialize the exception table and register the interrupt controller handler with the exception table
    Xil_ExceptionInit();

    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, intc_instance_ptr);

    // enable non-critical exceptions
    Xil_ExceptionEnable();

    return XST_SUCCESS;
}

// -----------------------------------------------------------------------
//   DMA FUNCTIONS
// ---------- functions from dma -----------------------------------------

#if defined(XPAR_UARTNS550_0_BASEADDR)
/*****************************************************************************/
/*
*
* Uart16550 setup routine, need to set baudrate to 9600, and data bits to 8
*
*/

static void Uart550_Setup(void){

	/* Set the baudrate to be predictable
	 */
	XUartNs550_SetBaud(XPAR_UARTNS550_0_BASEADDR,
			XPAR_XUARTNS550_CLOCK_HZ, 9600);

	XUartNs550_SetLineControlReg(XPAR_UARTNS550_0_BASEADDR,
			XUN_LCR_8_DATA_BITS);

}
#endif

static int closeDMADevice(){
  return XST_SUCCESS;
}

static int openDMADevice(){

//#if defined(XPAR_UARTNS550_0_BASEADDR)
//	Uart550_Setup();
//#endif

#ifdef __aarch64__
Xil_SetTlbAttributes(TX_BD_SPACE_BASE, MARK_UNCACHEABLE);
Xil_SetTlbAttributes(RX_BD_SPACE_BASE, MARK_UNCACHEABLE);
#endif

Config = XAxiDma_LookupConfig(DMA_DEV_ID);
if (!Config) {
	xil_printf(" *** Error: No config found for %d\r\n", DMA_DEV_ID);
	return XST_FAILURE;
} else {
	xil_printf(" >>> config found for %d\r\n", DMA_DEV_ID);
}

/* Initialize DMA engine */
Status = XAxiDma_CfgInitialize(&AxiDma, Config);
if (Status != XST_SUCCESS) {
   xil_printf(" *** Error: Initialization failed %d\r\n", Status);
   return XST_FAILURE;
} else {
	xil_printf(" >>> Initialization succeeded\r\n");
}

if(!XAxiDma_HasSg(&AxiDma)) {
   xil_printf("Could not configure device as Simple mode \r\n");
   return XST_FAILURE;
} else {
	 xil_printf("Device configured as Simple mode \r\n");
}
  return XST_SUCCESS;
}
/*****************************************************************************/
/**
*
* This function sets up RX channel of the DMA engine to be ready for packet
* reception
*
* @param	AxiDmaInstPtr is the pointer to the instance of the DMA engine.
*
* @return	XST_SUCCESS if the setup is successful, XST_FAILURE otherwise.
*
* @note		None.
*
******************************************************************************/
static int RxSetup(XAxiDma * AxiDmaInstPtr){
	XAxiDma_BdRing *RxRingPtr;
	int Delay = 0;
	int Coalesce = 1;
	int Status;
	XAxiDma_Bd BdTemplate;
	XAxiDma_Bd *BdPtr;
	XAxiDma_Bd *BdCurPtr;
	u32 BdCount;
	u32 FreeBdCount;
	UINTPTR RxBufferPtr;
	int Index;

	RxRingPtr = XAxiDma_GetRxRing(&AxiDma);

	/* Disable all RX interrupts before RxBD space setup */

	XAxiDma_BdRingIntDisable(RxRingPtr, XAXIDMA_IRQ_ALL_MASK);

	/* Set delay and coalescing */
	XAxiDma_BdRingSetCoalesce(RxRingPtr, Coalesce, Delay);

	/* Setup Rx BD space */
	BdCount = XAxiDma_BdRingCntCalc(XAXIDMA_BD_MINIMUM_ALIGNMENT,
				RX_BD_SPACE_HIGH - RX_BD_SPACE_BASE + 1);

	Status = XAxiDma_BdRingCreate(RxRingPtr, RX_BD_SPACE_BASE,
				RX_BD_SPACE_BASE,
				XAXIDMA_BD_MINIMUM_ALIGNMENT, BdCount);

	if (Status != XST_SUCCESS) {
		xil_printf(" *** Error: RX create BD ring failed %d\r\n", Status);
		return XST_FAILURE;
	}

	/*
	 * Setup an all-zero BD as the template for the Rx channel.
	 */
	XAxiDma_BdClear(&BdTemplate);

	Status = XAxiDma_BdRingClone(RxRingPtr, &BdTemplate);
	if (Status != XST_SUCCESS) {
		xil_printf(" *** Error: RX clone BD failed %d\r\n", Status);
		return XST_FAILURE;
	}

	/* Attach buffers to RxBD ring so we are ready to receive packets */

	FreeBdCount = XAxiDma_BdRingGetFreeCnt(RxRingPtr);

	Status = XAxiDma_BdRingAlloc(RxRingPtr, FreeBdCount, &BdPtr);
	if (Status != XST_SUCCESS) {
		xil_printf(" *** Error: RX alloc BD failed %d\r\n", Status);
		return XST_FAILURE;
	}

	BdCurPtr = BdPtr;
	RxBufferPtr = RX_BUFFER_BASE;
	for (Index = 0; Index < FreeBdCount; Index++) {
		Status = XAxiDma_BdSetBufAddr(BdCurPtr, RxBufferPtr);

		if (Status != XST_SUCCESS) {
		  xil_printf(" *** Error: Set buffer addr %x on BD %x failed %d\r\n",
			(unsigned int)RxBufferPtr,(UINTPTR)BdCurPtr, Status);
		  return XST_FAILURE;
		}

		Status = XAxiDma_BdSetLength(BdCurPtr, MAX_PKT_LEN,
				RxRingPtr->MaxTransferLen);
		if (Status != XST_SUCCESS) {
			xil_printf(" *** Error: Rx set length %d on BD %x failed %d\r\n",
			    MAX_PKT_LEN, (UINTPTR)BdCurPtr, Status);
			return XST_FAILURE;
		}

		/* Receive BDs do not need to set anything for the control
		 * The hardware will set the SOF/EOF bits per stream status
		 */
		XAxiDma_BdSetCtrl(BdCurPtr, 0);
		XAxiDma_BdSetId(BdCurPtr, RxBufferPtr);

		RxBufferPtr += MAX_PKT_LEN;
		BdCurPtr = (XAxiDma_Bd *)XAxiDma_BdRingNext(RxRingPtr, BdCurPtr);
	}

	/* Clear the receive buffer, so we can verify data
	 */
	memset((void *)RX_BUFFER_BASE, 0, MAX_PKT_LEN);

	Status = XAxiDma_BdRingToHw(RxRingPtr, FreeBdCount, BdPtr);
	if (Status != XST_SUCCESS) {
		xil_printf(" *** Error: RX submit hw failed %d\r\n", Status);
		return XST_FAILURE;
	}

	/* Start RX DMA channel */
	Status = XAxiDma_BdRingStart(RxRingPtr);
	if (Status != XST_SUCCESS) {
		xil_printf(" *** Error: RX start hw failed %d\r\n", Status);
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}

/*****************************************************************************/
/**
*
* This function sets up the TX channel of a DMA engine to be ready for packet
* transmission
*
* @param	AxiDmaInstPtr is the instance pointer to the DMA engine.
*
* @return	XST_SUCCESS if the setup is successful, XST_FAILURE otherwise.
*
* @note		None.
*
******************************************************************************/
static int TxSetup(XAxiDma * AxiDmaInstPtr){
	XAxiDma_BdRing *TxRingPtr;
	XAxiDma_Bd BdTemplate;
	int Delay = 0;
	int Coalesce = 1;
	int Status;
	u32 BdCount;

	TxRingPtr = XAxiDma_GetTxRing(&AxiDma);

	/* Disable all TX interrupts before TxBD space setup */

	XAxiDma_BdRingIntDisable(TxRingPtr, XAXIDMA_IRQ_ALL_MASK);

	/* Set TX delay and coalesce */
	XAxiDma_BdRingSetCoalesce(TxRingPtr, Coalesce, Delay);

	/* Setup TxBD space  */
	BdCount = XAxiDma_BdRingCntCalc(XAXIDMA_BD_MINIMUM_ALIGNMENT,
				TX_BD_SPACE_HIGH - TX_BD_SPACE_BASE + 1);

	Status = XAxiDma_BdRingCreate(TxRingPtr, TX_BD_SPACE_BASE,
				TX_BD_SPACE_BASE,
				XAXIDMA_BD_MINIMUM_ALIGNMENT, BdCount);
	if (Status != XST_SUCCESS) {
		xil_printf(" *** Error: failed to create BD ring in TxSetup\r\n");
		return XST_FAILURE;
	}

	/*
	 * We create an all-zero BD as the template.
	 */
	XAxiDma_BdClear(&BdTemplate);

	Status = XAxiDma_BdRingClone(TxRingPtr, &BdTemplate);
	if (Status != XST_SUCCESS) {
		xil_printf(" ** Error: failed bdring clone in TxSetup %d\r\n", Status);
		return XST_FAILURE;
	}

	/* Start the TX channel */
	Status = XAxiDma_BdRingStart(TxRingPtr);
	if (Status != XST_SUCCESS) {
		xil_printf(" *** Error: failed to start bdring TxSetup %d\r\n", Status);
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}


/*****************************************************************************/
static void fillTxPacketBufferSineWave(int npoints, u8 *TxPacket){
	int Index;
	u8 Value1,Value2;
	u8 Value;


}

// -------------------------------------------------------------
//
// -------------------------------------------------------------
// N is the number of samples and each sample is 1 micro secs
// Example:  generateSineWave(50.0*1E3, N);
// --------------------------------------------------------
void emitDataToBuffer(int idx, double value) {
  signed short int v;

  v = (signed short int)(value);
  v = v & 0x0FFF;
  v = v << 4;
  printf("TxPacket[%d] = 0x%02x;\n",((idx*2)^2),v&0x00FF);
  printf("TxPacket[%d] = 0x%02x;\n",((idx*2+1)^2),((v&0xFF00) >> 8) & 0xFF);
}

void generateSineWave(double freq, int num_samples, int AMP) {
  double f, x, y, base, mult;
  signed short int i, v, w;

  // printf(" size: %d\n",sizeof(v));
  // for N = 128 we get base = 7.8 KHz : 1.0/(128 * 1 micro secs)
  base = 1.0/(num_samples*1.0E-6);
  f = (3.151526/180.0);
  mult = freq / base;

  for(i = 0; i < num_samples; i++){
    //x = sin(mult*f*i*(360.0/(num_samples * 1.0)));
    emitDataToBuffer(i, x*((AMP)*1.0)+ (AMP*1.0));
  }
}





/*****************************************************************************/
static void fillTxPacketBuffer(int npoints, u8 *TxPacket){
	int Index;
/*
	  for(Index = 0; Index < (npoints/4); Index = Index+2) {
		TxPacket[Index] = Value1;
		TxPacket[Index+1] = Value2;
	  }
*/

/*
		Value = 0x00;
		for(Index = 0; Index < npoints/2; Index++){
			TxPacket[Index*2] = 0xf0;
			TxPacket[Index*2+1] =((2*Value) & 0xff);
			Value = (Value +1) & 0xFF;
		}
*/
/*
 		//============== ramp data ======================
		u16 rampValue = 0x00;
		u16 dataShifted;
		for(Index = 0; Index < npoints; Index++){
			dataShifted = rampValue << 4;

			if (Index < 2048)
			{	//first half of the buffer
				TxPacket[Index*2] = (u8)(dataShifted & 0xFF); //store the LSbyte
				TxPacket[Index*2+1] = (u8)(dataShifted >> 8); //store the MSbyte
				rampValue++;
			}
			else
			{	//second half of the buffer
				TxPacket[Index*2] = (u8)(dataShifted & 0xFF); //store the LSbyte
				TxPacket[Index*2+1] = (u8)(dataShifted >> 8); //store the MSbyte
				rampValue--;

			}
		}
		//===============================================

*/

/*     	//=========== static DC value ===================
		u16 dataShifted = 0xAA5 << 4;
		for(Index = 0; Index < npoints; Index++){
			TxPacket[Index*2] = (u8)(dataShifted & 0xFF);
			TxPacket[Index*2+1] = (u8)(dataShifted >> 8);
		}
*/		//===============================================
		u16 pattern1[4096];
		u16 pattern2[4096];
		u16 pattern3[4096];
		u16 pattern4[4096];
/*
		//debug samples
		sine[0]=0;
		sine[1]=256;
		sine[2]=512;
		sine[3]=768;
		sine[4]=0;
		sine[5]=256;
		sine[6]=512;
		sine[7]=768;
		sine[8]=0;
		sine[9]=256;
		sine[10]=512;
		sine[11]=768;
		sine[12]=0;
		sine[13]=256;
		sine[14]=512;
		sine[15]=768;
		sine[16]=0;
		sine[17]=256;
		sine[18]=512;
		sine[19]=768;
		sine[20]=0;
		sine[21]=256;
		sine[22]=512;
		sine[23]=768;
		sine[24]=0;
		sine[25]=256;
		sine[26]=512;
		sine[27]=768;
		sine[28]=0;
		sine[29]=256;
		sine[30]=512;
		sine[31]=768;
		sine[32]=0;
		sine[33]=256;
		sine[34]=512;
		sine[35]=768;
		sine[36]=0;
		sine[37]=256;
		sine[38]=512;
		sine[39]=768;
		sine[40]=0;
		sine[41]=256;
		sine[42]=512;
		sine[43]=768;
		sine[44]=0;
		sine[45]=256;
		sine[46]=512;
		sine[47]=768;
		sine[48]=0;
		sine[49]=256;
		sine[50]=512;
		sine[51]=768;
		sine[52]=0;
		sine[53]=256;
		sine[54]=512;
		sine[55]=768;
		sine[56]=0;
		sine[57]=256;
		sine[58]=512;
		sine[59]=768;
		sine[60]=0;
		sine[61]=256;
		sine[62]=512;
		sine[63]=768;
		sine[64]=0;
		sine[65]=256;
		sine[66]=512;
		sine[67]=768;
		sine[68]=0;
		sine[69]=256;
		sine[70]=512;
		sine[71]=768;
		sine[72]=0;
		sine[73]=256;
		sine[74]=512;
		sine[75]=768;
		sine[76]=0;
		sine[77]=256;
		sine[78]=512;
		sine[79]=768;
		sine[80]=0;
		sine[81]=256;
		sine[82]=512;
		sine[83]=768;
		sine[84]=0;
		sine[85]=256;
		sine[86]=512;
		sine[87]=768;
		sine[88]=0;
		sine[89]=256;
		sine[90]=512;
		sine[91]=768;
		sine[92]=0;
		sine[93]=256;
		sine[94]=512;
		sine[95]=768;
		sine[96]=0;
		sine[97]=256;
		sine[98]=512;
		sine[99]=768;
		sine[100]=0;
		sine[101]=256;
		sine[102]=512;
		sine[103]=768;
		sine[104]=0;
		sine[105]=256;
		sine[106]=512;
		sine[107]=768;
		sine[108]=0;
		sine[109]=256;
		sine[110]=512;
		sine[111]=768;
		sine[112]=0;
		sine[113]=256;
		sine[114]=512;
		sine[115]=768;
		sine[116]=0;
		sine[117]=256;
		sine[118]=512;
		sine[119]=768;
		sine[120]=0;
		sine[121]=256;
		sine[122]=512;
		sine[123]=768;
		sine[124]=0;
		sine[125]=256;
		sine[126]=512;
		sine[127]=768;
		sine[128]=0;
		sine[129]=256;
		sine[130]=512;
		sine[131]=768;
		sine[132]=0;
		sine[133]=256;
		sine[134]=512;
		sine[135]=768;
		sine[136]=0;
		sine[137]=256;
		sine[138]=512;
		sine[139]=768;
		sine[140]=0;
		sine[141]=256;
		sine[142]=512;
		sine[143]=768;
		sine[144]=0;
		sine[145]=256;
		sine[146]=512;
		sine[147]=768;
		sine[148]=0;
		sine[149]=256;
		sine[150]=512;
		sine[151]=768;
		sine[152]=0;
		sine[153]=256;
		sine[154]=512;
		sine[155]=768;
		sine[156]=0;
		sine[157]=256;
		sine[158]=512;
		sine[159]=768;
		sine[160]=0;
		sine[161]=256;
		sine[162]=512;
		sine[163]=768;
		sine[164]=0;
		sine[165]=256;
		sine[166]=512;
		sine[167]=768;
		sine[168]=0;
		sine[169]=256;
		sine[170]=512;
		sine[171]=768;
		sine[172]=0;
		sine[173]=256;
		sine[174]=512;
		sine[175]=768;
		sine[176]=0;
		sine[177]=256;
		sine[178]=512;
		sine[179]=768;
		sine[180]=0;
		sine[181]=256;
		sine[182]=512;
		sine[183]=768;
		sine[184]=0;
		sine[185]=256;
		sine[186]=512;
		sine[187]=768;
		sine[188]=0;
		sine[189]=256;
		sine[190]=512;
		sine[191]=768;
		sine[192]=0;
		sine[193]=256;
		sine[194]=512;
		sine[195]=768;
		sine[196]=0;
		sine[197]=256;
		sine[198]=512;
		sine[199]=768;
		sine[200]=0;
		sine[201]=256;
		sine[202]=512;
		sine[203]=768;
		sine[204]=0;
		sine[205]=256;
		sine[206]=512;
		sine[207]=768;
		sine[208]=0;
		sine[209]=256;
		sine[210]=512;
		sine[211]=768;
		sine[212]=0;
		sine[213]=256;
		sine[214]=512;
		sine[215]=768;
		sine[216]=0;
		sine[217]=256;
		sine[218]=512;
		sine[219]=768;
		sine[220]=0;
		sine[221]=256;
		sine[222]=512;
		sine[223]=768;
		sine[224]=0;
		sine[225]=256;
		sine[226]=512;
		sine[227]=768;
		sine[228]=0;
		sine[229]=256;
		sine[230]=512;
		sine[231]=768;
		sine[232]=0;
		sine[233]=256;
		sine[234]=512;
		sine[235]=768;
		sine[236]=0;
		sine[237]=256;
		sine[238]=512;
		sine[239]=768;
		sine[240]=0;
		sine[241]=256;
		sine[242]=512;
		sine[243]=768;
		sine[244]=0;
		sine[245]=256;
		sine[246]=512;
		sine[247]=768;
		sine[248]=0;
		sine[249]=256;
		sine[250]=512;
		sine[251]=768;
		sine[252]=0;
		sine[253]=256;
		sine[254]=512;
		sine[255]=768;
		sine[256]=0;
		sine[257]=256;
		sine[258]=512;
		sine[259]=768;
		sine[260]=0;
		sine[261]=256;
		sine[262]=512;
		sine[263]=768;
		sine[264]=0;
		sine[265]=256;
		sine[266]=512;
		sine[267]=768;
		sine[268]=0;
		sine[269]=256;
		sine[270]=512;
		sine[271]=768;
		sine[272]=0;
		sine[273]=256;
		sine[274]=512;
		sine[275]=768;
		sine[276]=0;
		sine[277]=256;
		sine[278]=512;
		sine[279]=768;
		sine[280]=0;
		sine[281]=256;
		sine[282]=512;
		sine[283]=768;
		sine[284]=0;
		sine[285]=256;
		sine[286]=512;
		sine[287]=768;
		sine[288]=0;
		sine[289]=256;
		sine[290]=512;
		sine[291]=768;
		sine[292]=0;
		sine[293]=256;
		sine[294]=512;
		sine[295]=768;
		sine[296]=0;
		sine[297]=256;
		sine[298]=512;
		sine[299]=768;
		sine[300]=0;
		sine[301]=256;
		sine[302]=512;
		sine[303]=768;
		sine[304]=0;
		sine[305]=256;
		sine[306]=512;
		sine[307]=768;
		sine[308]=0;
		sine[309]=256;
		sine[310]=512;
		sine[311]=768;
		sine[312]=0;
		sine[313]=256;
		sine[314]=512;
		sine[315]=768;
		sine[316]=0;
		sine[317]=256;
		sine[318]=512;
		sine[319]=768;
		sine[320]=0;
		sine[321]=256;
		sine[322]=512;
		sine[323]=768;
		sine[324]=0;
		sine[325]=256;
		sine[326]=512;
		sine[327]=768;
		sine[328]=0;
		sine[329]=256;
		sine[330]=512;
		sine[331]=768;
		sine[332]=0;
		sine[333]=256;
		sine[334]=512;
		sine[335]=768;
		sine[336]=0;
		sine[337]=256;
		sine[338]=512;
		sine[339]=768;
		sine[340]=0;
		sine[341]=256;
		sine[342]=512;
		sine[343]=768;
		sine[344]=0;
		sine[345]=256;
		sine[346]=512;
		sine[347]=768;
		sine[348]=0;
		sine[349]=256;
		sine[350]=512;
		sine[351]=768;
		sine[352]=0;
		sine[353]=256;
		sine[354]=512;
		sine[355]=768;
		sine[356]=0;
		sine[357]=256;
		sine[358]=512;
		sine[359]=768;
		sine[360]=0;
		sine[361]=256;
		sine[362]=512;
		sine[363]=768;
		sine[364]=0;
		sine[365]=256;
		sine[366]=512;
		sine[367]=768;
		sine[368]=0;
		sine[369]=256;
		sine[370]=512;
		sine[371]=768;
		sine[372]=0;
		sine[373]=256;
		sine[374]=512;
		sine[375]=768;
		sine[376]=0;
		sine[377]=256;
		sine[378]=512;
		sine[379]=768;
		sine[380]=0;
		sine[381]=256;
		sine[382]=512;
		sine[383]=768;
		sine[384]=0;
		sine[385]=256;
		sine[386]=512;
		sine[387]=768;
		sine[388]=0;
		sine[389]=256;
		sine[390]=512;
		sine[391]=768;
		sine[392]=0;
		sine[393]=256;
		sine[394]=512;
		sine[395]=768;
		sine[396]=0;
		sine[397]=256;
		sine[398]=512;
		sine[399]=768;
		sine[400]=0;
		sine[401]=256;
		sine[402]=512;
		sine[403]=768;
		sine[404]=0;
		sine[405]=256;
		sine[406]=512;
		sine[407]=768;
		sine[408]=0;
		sine[409]=256;
		sine[410]=512;
		sine[411]=768;
		sine[412]=0;
		sine[413]=256;
		sine[414]=512;
		sine[415]=768;
		sine[416]=0;
		sine[417]=256;
		sine[418]=512;
		sine[419]=768;
		sine[420]=0;
		sine[421]=256;
		sine[422]=512;
		sine[423]=768;
		sine[424]=0;
		sine[425]=256;
		sine[426]=512;
		sine[427]=768;
		sine[428]=0;
		sine[429]=256;
		sine[430]=512;
		sine[431]=768;
		sine[432]=0;
		sine[433]=256;
		sine[434]=512;
		sine[435]=768;
		sine[436]=0;
		sine[437]=256;
		sine[438]=512;
		sine[439]=768;
		sine[440]=0;
		sine[441]=256;
		sine[442]=512;
		sine[443]=768;
		sine[444]=0;
		sine[445]=256;
		sine[446]=512;
		sine[447]=768;
		sine[448]=0;
		sine[449]=256;
		sine[450]=512;
		sine[451]=768;
		sine[452]=0;
		sine[453]=256;
		sine[454]=512;
		sine[455]=768;
		sine[456]=0;
		sine[457]=256;
		sine[458]=512;
		sine[459]=768;
		sine[460]=0;
		sine[461]=256;
		sine[462]=512;
		sine[463]=768;
		sine[464]=0;
		sine[465]=256;
		sine[466]=512;
		sine[467]=768;
		sine[468]=0;
		sine[469]=256;
		sine[470]=512;
		sine[471]=768;
		sine[472]=0;
		sine[473]=256;
		sine[474]=512;
		sine[475]=768;
		sine[476]=0;
		sine[477]=256;
		sine[478]=512;
		sine[479]=768;
		sine[480]=0;
		sine[481]=256;
		sine[482]=512;
		sine[483]=768;
		sine[484]=0;
		sine[485]=256;
		sine[486]=512;
		sine[487]=768;
		sine[488]=0;
		sine[489]=256;
		sine[490]=512;
		sine[491]=768;
		sine[492]=0;
		sine[493]=256;
		sine[494]=512;
		sine[495]=768;
		sine[496]=0;
		sine[497]=256;
		sine[498]=512;
		sine[499]=768;
		sine[500]=0;
		sine[501]=256;
		sine[502]=512;
		sine[503]=768;
		sine[504]=0;
		sine[505]=256;
		sine[506]=512;
		sine[507]=768;
		sine[508]=0;
		sine[509]=256;
		sine[510]=512;
		sine[511]=768;
		sine[512]=0;
		sine[513]=256;
		sine[514]=512;
		sine[515]=768;
		sine[516]=0;
		sine[517]=256;
		sine[518]=512;
		sine[519]=768;
		sine[520]=0;
		sine[521]=256;
		sine[522]=512;
		sine[523]=768;
		sine[524]=0;
		sine[525]=256;
		sine[526]=512;
		sine[527]=768;
		sine[528]=0;
		sine[529]=256;
		sine[530]=512;
		sine[531]=768;
		sine[532]=0;
		sine[533]=256;
		sine[534]=512;
		sine[535]=768;
		sine[536]=0;
		sine[537]=256;
		sine[538]=512;
		sine[539]=768;
		sine[540]=0;
		sine[541]=256;
		sine[542]=512;
		sine[543]=768;
		sine[544]=0;
		sine[545]=256;
		sine[546]=512;
		sine[547]=768;
		sine[548]=0;
		sine[549]=256;
		sine[550]=512;
		sine[551]=768;
		sine[552]=0;
		sine[553]=256;
		sine[554]=512;
		sine[555]=768;
		sine[556]=0;
		sine[557]=256;
		sine[558]=512;
		sine[559]=768;
		sine[560]=0;
		sine[561]=256;
		sine[562]=512;
		sine[563]=768;
		sine[564]=0;
		sine[565]=256;
		sine[566]=512;
		sine[567]=768;
		sine[568]=0;
		sine[569]=256;
		sine[570]=512;
		sine[571]=768;
		sine[572]=0;
		sine[573]=256;
		sine[574]=512;
		sine[575]=768;
		sine[576]=0;
		sine[577]=256;
		sine[578]=512;
		sine[579]=768;
		sine[580]=0;
		sine[581]=256;
		sine[582]=512;
		sine[583]=768;
		sine[584]=0;
		sine[585]=256;
		sine[586]=512;
		sine[587]=768;
		sine[588]=0;
		sine[589]=256;
		sine[590]=512;
		sine[591]=768;
		sine[592]=0;
		sine[593]=256;
		sine[594]=512;
		sine[595]=768;
		sine[596]=0;
		sine[597]=256;
		sine[598]=512;
		sine[599]=768;
		sine[600]=0;
		sine[601]=256;
		sine[602]=512;
		sine[603]=768;
		sine[604]=0;
		sine[605]=256;
		sine[606]=512;
		sine[607]=768;
		sine[608]=0;
		sine[609]=256;
		sine[610]=512;
		sine[611]=768;
		sine[612]=0;
		sine[613]=256;
		sine[614]=512;
		sine[615]=768;
		sine[616]=0;
		sine[617]=256;
		sine[618]=512;
		sine[619]=768;
		sine[620]=0;
		sine[621]=256;
		sine[622]=512;
		sine[623]=768;
		sine[624]=0;
		sine[625]=256;
		sine[626]=512;
		sine[627]=768;
		sine[628]=0;
		sine[629]=256;
		sine[630]=512;
		sine[631]=768;
		sine[632]=0;
		sine[633]=256;
		sine[634]=512;
		sine[635]=768;
		sine[636]=0;
		sine[637]=256;
		sine[638]=512;
		sine[639]=768;
		sine[640]=0;
		sine[641]=256;
		sine[642]=512;
		sine[643]=768;
		sine[644]=0;
		sine[645]=256;
		sine[646]=512;
		sine[647]=768;
		sine[648]=0;
		sine[649]=256;
		sine[650]=512;
		sine[651]=768;
		sine[652]=0;
		sine[653]=256;
		sine[654]=512;
		sine[655]=768;
		sine[656]=0;
		sine[657]=256;
		sine[658]=512;
		sine[659]=768;
		sine[660]=0;
		sine[661]=256;
		sine[662]=512;
		sine[663]=768;
		sine[664]=0;
		sine[665]=256;
		sine[666]=512;
		sine[667]=768;
		sine[668]=0;
		sine[669]=256;
		sine[670]=512;
		sine[671]=768;
		sine[672]=0;
		sine[673]=256;
		sine[674]=512;
		sine[675]=768;
		sine[676]=0;
		sine[677]=256;
		sine[678]=512;
		sine[679]=768;
		sine[680]=0;
		sine[681]=256;
		sine[682]=512;
		sine[683]=768;
		sine[684]=0;
		sine[685]=256;
		sine[686]=512;
		sine[687]=768;
		sine[688]=0;
		sine[689]=256;
		sine[690]=512;
		sine[691]=768;
		sine[692]=0;
		sine[693]=256;
		sine[694]=512;
		sine[695]=768;
		sine[696]=0;
		sine[697]=256;
		sine[698]=512;
		sine[699]=768;
		sine[700]=0;
		sine[701]=256;
		sine[702]=512;
		sine[703]=768;
		sine[704]=0;
		sine[705]=256;
		sine[706]=512;
		sine[707]=768;
		sine[708]=0;
		sine[709]=256;
		sine[710]=512;
		sine[711]=768;
		sine[712]=0;
		sine[713]=256;
		sine[714]=512;
		sine[715]=768;
		sine[716]=0;
		sine[717]=256;
		sine[718]=512;
		sine[719]=768;
		sine[720]=0;
		sine[721]=256;
		sine[722]=512;
		sine[723]=768;
		sine[724]=0;
		sine[725]=256;
		sine[726]=512;
		sine[727]=768;
		sine[728]=0;
		sine[729]=256;
		sine[730]=512;
		sine[731]=768;
		sine[732]=0;
		sine[733]=256;
		sine[734]=512;
		sine[735]=768;
		sine[736]=0;
		sine[737]=256;
		sine[738]=512;
		sine[739]=768;
		sine[740]=0;
		sine[741]=256;
		sine[742]=512;
		sine[743]=768;
		sine[744]=0;
		sine[745]=256;
		sine[746]=512;
		sine[747]=768;
		sine[748]=0;
		sine[749]=256;
		sine[750]=512;
		sine[751]=768;
		sine[752]=0;
		sine[753]=256;
		sine[754]=512;
		sine[755]=768;
		sine[756]=0;
		sine[757]=256;
		sine[758]=512;
		sine[759]=768;
		sine[760]=0;
		sine[761]=256;
		sine[762]=512;
		sine[763]=768;
		sine[764]=0;
		sine[765]=256;
		sine[766]=512;
		sine[767]=768;
		sine[768]=0;
		sine[769]=256;
		sine[770]=512;
		sine[771]=768;
		sine[772]=0;
		sine[773]=256;
		sine[774]=512;
		sine[775]=768;
		sine[776]=0;
		sine[777]=256;
		sine[778]=512;
		sine[779]=768;
		sine[780]=0;
		sine[781]=256;
		sine[782]=512;
		sine[783]=768;
		sine[784]=0;
		sine[785]=256;
		sine[786]=512;
		sine[787]=768;
		sine[788]=0;
		sine[789]=256;
		sine[790]=512;
		sine[791]=768;
		sine[792]=0;
		sine[793]=256;
		sine[794]=512;
		sine[795]=768;
		sine[796]=0;
		sine[797]=256;
		sine[798]=512;
		sine[799]=768;
		sine[800]=0;
		sine[801]=256;
		sine[802]=512;
		sine[803]=768;
		sine[804]=0;
		sine[805]=256;
		sine[806]=512;
		sine[807]=768;
		sine[808]=0;
		sine[809]=256;
		sine[810]=512;
		sine[811]=768;
		sine[812]=0;
		sine[813]=256;
		sine[814]=512;
		sine[815]=768;
		sine[816]=0;
		sine[817]=256;
		sine[818]=512;
		sine[819]=768;
		sine[820]=0;
		sine[821]=256;
		sine[822]=512;
		sine[823]=768;
		sine[824]=0;
		sine[825]=256;
		sine[826]=512;
		sine[827]=768;
		sine[828]=0;
		sine[829]=256;
		sine[830]=512;
		sine[831]=768;
		sine[832]=0;
		sine[833]=256;
		sine[834]=512;
		sine[835]=768;
		sine[836]=0;
		sine[837]=256;
		sine[838]=512;
		sine[839]=768;
		sine[840]=0;
		sine[841]=256;
		sine[842]=512;
		sine[843]=768;
		sine[844]=0;
		sine[845]=256;
		sine[846]=512;
		sine[847]=768;
		sine[848]=0;
		sine[849]=256;
		sine[850]=512;
		sine[851]=768;
		sine[852]=0;
		sine[853]=256;
		sine[854]=512;
		sine[855]=768;
		sine[856]=0;
		sine[857]=256;
		sine[858]=512;
		sine[859]=768;
		sine[860]=0;
		sine[861]=256;
		sine[862]=512;
		sine[863]=768;
		sine[864]=0;
		sine[865]=256;
		sine[866]=512;
		sine[867]=768;
		sine[868]=0;
		sine[869]=256;
		sine[870]=512;
		sine[871]=768;
		sine[872]=0;
		sine[873]=256;
		sine[874]=512;
		sine[875]=768;
		sine[876]=0;
		sine[877]=256;
		sine[878]=512;
		sine[879]=768;
		sine[880]=0;
		sine[881]=256;
		sine[882]=512;
		sine[883]=768;
		sine[884]=0;
		sine[885]=256;
		sine[886]=512;
		sine[887]=768;
		sine[888]=0;
		sine[889]=256;
		sine[890]=512;
		sine[891]=768;
		sine[892]=0;
		sine[893]=256;
		sine[894]=512;
		sine[895]=768;
		sine[896]=0;
		sine[897]=256;
		sine[898]=512;
		sine[899]=768;
		sine[900]=0;
		sine[901]=256;
		sine[902]=512;
		sine[903]=768;
		sine[904]=0;
		sine[905]=256;
		sine[906]=512;
		sine[907]=768;
		sine[908]=0;
		sine[909]=256;
		sine[910]=512;
		sine[911]=768;
		sine[912]=0;
		sine[913]=256;
		sine[914]=512;
		sine[915]=768;
		sine[916]=0;
		sine[917]=256;
		sine[918]=512;
		sine[919]=768;
		sine[920]=0;
		sine[921]=256;
		sine[922]=512;
		sine[923]=768;
		sine[924]=0;
		sine[925]=256;
		sine[926]=512;
		sine[927]=768;
		sine[928]=0;
		sine[929]=256;
		sine[930]=512;
		sine[931]=768;
		sine[932]=0;
		sine[933]=256;
		sine[934]=512;
		sine[935]=768;
		sine[936]=0;
		sine[937]=256;
		sine[938]=512;
		sine[939]=768;
		sine[940]=0;
		sine[941]=256;
		sine[942]=512;
		sine[943]=768;
		sine[944]=0;
		sine[945]=256;
		sine[946]=512;
		sine[947]=768;
		sine[948]=0;
		sine[949]=256;
		sine[950]=512;
		sine[951]=768;
		sine[952]=0;
		sine[953]=256;
		sine[954]=512;
		sine[955]=768;
		sine[956]=0;
		sine[957]=256;
		sine[958]=512;
		sine[959]=768;
		sine[960]=0;
		sine[961]=256;
		sine[962]=512;
		sine[963]=768;
		sine[964]=0;
		sine[965]=256;
		sine[966]=512;
		sine[967]=768;
		sine[968]=0;
		sine[969]=256;
		sine[970]=512;
		sine[971]=768;
		sine[972]=0;
		sine[973]=256;
		sine[974]=512;
		sine[975]=768;
		sine[976]=0;
		sine[977]=256;
		sine[978]=512;
		sine[979]=768;
		sine[980]=0;
		sine[981]=256;
		sine[982]=512;
		sine[983]=768;
		sine[984]=0;
		sine[985]=256;
		sine[986]=512;
		sine[987]=768;
		sine[988]=0;
		sine[989]=256;
		sine[990]=512;
		sine[991]=768;
		sine[992]=0;
		sine[993]=256;
		sine[994]=512;
		sine[995]=768;
		sine[996]=0;
		sine[997]=256;
		sine[998]=512;
		sine[999]=768;
		sine[1000]=0;
		sine[1001]=256;
		sine[1002]=512;
		sine[1003]=768;
		sine[1004]=0;
		sine[1005]=256;
		sine[1006]=512;
		sine[1007]=768;
		sine[1008]=0;
		sine[1009]=256;
		sine[1010]=512;
		sine[1011]=768;
		sine[1012]=0;
		sine[1013]=256;
		sine[1014]=512;
		sine[1015]=768;
		sine[1016]=0;
		sine[1017]=256;
		sine[1018]=512;
		sine[1019]=768;
		sine[1020]=0;
		sine[1021]=256;
		sine[1022]=512;
		sine[1023]=768;
		sine[1024]=0;
		sine[1025]=256;
		sine[1026]=512;
		sine[1027]=768;
		sine[1028]=0;
		sine[1029]=256;
		sine[1030]=512;
		sine[1031]=768;
		sine[1032]=0;
		sine[1033]=256;
		sine[1034]=512;
		sine[1035]=768;
		sine[1036]=0;
		sine[1037]=256;
		sine[1038]=512;
		sine[1039]=768;
		sine[1040]=0;
		sine[1041]=256;
		sine[1042]=512;
		sine[1043]=768;
		sine[1044]=0;
		sine[1045]=256;
		sine[1046]=512;
		sine[1047]=768;
		sine[1048]=0;
		sine[1049]=256;
		sine[1050]=512;
		sine[1051]=768;
		sine[1052]=0;
		sine[1053]=256;
		sine[1054]=512;
		sine[1055]=768;
		sine[1056]=0;
		sine[1057]=256;
		sine[1058]=512;
		sine[1059]=768;
		sine[1060]=0;
		sine[1061]=256;
		sine[1062]=512;
		sine[1063]=768;
		sine[1064]=0;
		sine[1065]=256;
		sine[1066]=512;
		sine[1067]=768;
		sine[1068]=0;
		sine[1069]=256;
		sine[1070]=512;
		sine[1071]=768;
		sine[1072]=0;
		sine[1073]=256;
		sine[1074]=512;
		sine[1075]=768;
		sine[1076]=0;
		sine[1077]=256;
		sine[1078]=512;
		sine[1079]=768;
		sine[1080]=0;
		sine[1081]=256;
		sine[1082]=512;
		sine[1083]=768;
		sine[1084]=0;
		sine[1085]=256;
		sine[1086]=512;
		sine[1087]=768;
		sine[1088]=0;
		sine[1089]=256;
		sine[1090]=512;
		sine[1091]=768;
		sine[1092]=0;
		sine[1093]=256;
		sine[1094]=512;
		sine[1095]=768;
		sine[1096]=0;
		sine[1097]=256;
		sine[1098]=512;
		sine[1099]=768;
		sine[1100]=0;
		sine[1101]=256;
		sine[1102]=512;
		sine[1103]=768;
		sine[1104]=0;
		sine[1105]=256;
		sine[1106]=512;
		sine[1107]=768;
		sine[1108]=0;
		sine[1109]=256;
		sine[1110]=512;
		sine[1111]=768;
		sine[1112]=0;
		sine[1113]=256;
		sine[1114]=512;
		sine[1115]=768;
		sine[1116]=0;
		sine[1117]=256;
		sine[1118]=512;
		sine[1119]=768;
		sine[1120]=0;
		sine[1121]=256;
		sine[1122]=512;
		sine[1123]=768;
		sine[1124]=0;
		sine[1125]=256;
		sine[1126]=512;
		sine[1127]=768;
		sine[1128]=0;
		sine[1129]=256;
		sine[1130]=512;
		sine[1131]=768;
		sine[1132]=0;
		sine[1133]=256;
		sine[1134]=512;
		sine[1135]=768;
		sine[1136]=0;
		sine[1137]=256;
		sine[1138]=512;
		sine[1139]=768;
		sine[1140]=0;
		sine[1141]=256;
		sine[1142]=512;
		sine[1143]=768;
		sine[1144]=0;
		sine[1145]=256;
		sine[1146]=512;
		sine[1147]=768;
		sine[1148]=0;
		sine[1149]=256;
		sine[1150]=512;
		sine[1151]=768;
		sine[1152]=0;
		sine[1153]=256;
		sine[1154]=512;
		sine[1155]=768;
		sine[1156]=0;
		sine[1157]=256;
		sine[1158]=512;
		sine[1159]=768;
		sine[1160]=0;
		sine[1161]=256;
		sine[1162]=512;
		sine[1163]=768;
		sine[1164]=0;
		sine[1165]=256;
		sine[1166]=512;
		sine[1167]=768;
		sine[1168]=0;
		sine[1169]=256;
		sine[1170]=512;
		sine[1171]=768;
		sine[1172]=0;
		sine[1173]=256;
		sine[1174]=512;
		sine[1175]=768;
		sine[1176]=0;
		sine[1177]=256;
		sine[1178]=512;
		sine[1179]=768;
		sine[1180]=0;
		sine[1181]=256;
		sine[1182]=512;
		sine[1183]=768;
		sine[1184]=0;
		sine[1185]=256;
		sine[1186]=512;
		sine[1187]=768;
		sine[1188]=0;
		sine[1189]=256;
		sine[1190]=512;
		sine[1191]=768;
		sine[1192]=0;
		sine[1193]=256;
		sine[1194]=512;
		sine[1195]=768;
		sine[1196]=0;
		sine[1197]=256;
		sine[1198]=512;
		sine[1199]=768;
		sine[1200]=0;
		sine[1201]=256;
		sine[1202]=512;
		sine[1203]=768;
		sine[1204]=0;
		sine[1205]=256;
		sine[1206]=512;
		sine[1207]=768;
		sine[1208]=0;
		sine[1209]=256;
		sine[1210]=512;
		sine[1211]=768;
		sine[1212]=0;
		sine[1213]=256;
		sine[1214]=512;
		sine[1215]=768;
		sine[1216]=0;
		sine[1217]=256;
		sine[1218]=512;
		sine[1219]=768;
		sine[1220]=0;
		sine[1221]=256;
		sine[1222]=512;
		sine[1223]=768;
		sine[1224]=0;
		sine[1225]=256;
		sine[1226]=512;
		sine[1227]=768;
		sine[1228]=0;
		sine[1229]=256;
		sine[1230]=512;
		sine[1231]=768;
		sine[1232]=0;
		sine[1233]=256;
		sine[1234]=512;
		sine[1235]=768;
		sine[1236]=0;
		sine[1237]=256;
		sine[1238]=512;
		sine[1239]=768;
		sine[1240]=0;
		sine[1241]=256;
		sine[1242]=512;
		sine[1243]=768;
		sine[1244]=0;
		sine[1245]=256;
		sine[1246]=512;
		sine[1247]=768;
		sine[1248]=0;
		sine[1249]=256;
		sine[1250]=512;
		sine[1251]=768;
		sine[1252]=0;
		sine[1253]=256;
		sine[1254]=512;
		sine[1255]=768;
		sine[1256]=0;
		sine[1257]=256;
		sine[1258]=512;
		sine[1259]=768;
		sine[1260]=0;
		sine[1261]=256;
		sine[1262]=512;
		sine[1263]=768;
		sine[1264]=0;
		sine[1265]=256;
		sine[1266]=512;
		sine[1267]=768;
		sine[1268]=0;
		sine[1269]=256;
		sine[1270]=512;
		sine[1271]=768;
		sine[1272]=0;
		sine[1273]=256;
		sine[1274]=512;
		sine[1275]=768;
		sine[1276]=0;
		sine[1277]=256;
		sine[1278]=512;
		sine[1279]=768;
		sine[1280]=0;
		sine[1281]=256;
		sine[1282]=512;
		sine[1283]=768;
		sine[1284]=0;
		sine[1285]=256;
		sine[1286]=512;
		sine[1287]=768;
		sine[1288]=0;
		sine[1289]=256;
		sine[1290]=512;
		sine[1291]=768;
		sine[1292]=0;
		sine[1293]=256;
		sine[1294]=512;
		sine[1295]=768;
		sine[1296]=0;
		sine[1297]=256;
		sine[1298]=512;
		sine[1299]=768;
		sine[1300]=0;
		sine[1301]=256;
		sine[1302]=512;
		sine[1303]=768;
		sine[1304]=0;
		sine[1305]=256;
		sine[1306]=512;
		sine[1307]=768;
		sine[1308]=0;
		sine[1309]=256;
		sine[1310]=512;
		sine[1311]=768;
		sine[1312]=0;
		sine[1313]=256;
		sine[1314]=512;
		sine[1315]=768;
		sine[1316]=0;
		sine[1317]=256;
		sine[1318]=512;
		sine[1319]=768;
		sine[1320]=0;
		sine[1321]=256;
		sine[1322]=512;
		sine[1323]=768;
		sine[1324]=0;
		sine[1325]=256;
		sine[1326]=512;
		sine[1327]=768;
		sine[1328]=0;
		sine[1329]=256;
		sine[1330]=512;
		sine[1331]=768;
		sine[1332]=0;
		sine[1333]=256;
		sine[1334]=512;
		sine[1335]=768;
		sine[1336]=0;
		sine[1337]=256;
		sine[1338]=512;
		sine[1339]=768;
		sine[1340]=0;
		sine[1341]=256;
		sine[1342]=512;
		sine[1343]=768;
		sine[1344]=0;
		sine[1345]=256;
		sine[1346]=512;
		sine[1347]=768;
		sine[1348]=0;
		sine[1349]=256;
		sine[1350]=512;
		sine[1351]=768;
		sine[1352]=0;
		sine[1353]=256;
		sine[1354]=512;
		sine[1355]=768;
		sine[1356]=0;
		sine[1357]=256;
		sine[1358]=512;
		sine[1359]=768;
		sine[1360]=0;
		sine[1361]=256;
		sine[1362]=512;
		sine[1363]=768;
		sine[1364]=0;
		sine[1365]=256;
		sine[1366]=512;
		sine[1367]=768;
		sine[1368]=0;
		sine[1369]=256;
		sine[1370]=512;
		sine[1371]=768;
		sine[1372]=0;
		sine[1373]=256;
		sine[1374]=512;
		sine[1375]=768;
		sine[1376]=0;
		sine[1377]=256;
		sine[1378]=512;
		sine[1379]=768;
		sine[1380]=0;
		sine[1381]=256;
		sine[1382]=512;
		sine[1383]=768;
		sine[1384]=0;
		sine[1385]=256;
		sine[1386]=512;
		sine[1387]=768;
		sine[1388]=0;
		sine[1389]=256;
		sine[1390]=512;
		sine[1391]=768;
		sine[1392]=0;
		sine[1393]=256;
		sine[1394]=512;
		sine[1395]=768;
		sine[1396]=0;
		sine[1397]=256;
		sine[1398]=512;
		sine[1399]=768;
		sine[1400]=0;
		sine[1401]=256;
		sine[1402]=512;
		sine[1403]=768;
		sine[1404]=0;
		sine[1405]=256;
		sine[1406]=512;
		sine[1407]=768;
		sine[1408]=0;
		sine[1409]=256;
		sine[1410]=512;
		sine[1411]=768;
		sine[1412]=0;
		sine[1413]=256;
		sine[1414]=512;
		sine[1415]=768;
		sine[1416]=0;
		sine[1417]=256;
		sine[1418]=512;
		sine[1419]=768;
		sine[1420]=0;
		sine[1421]=256;
		sine[1422]=512;
		sine[1423]=768;
		sine[1424]=0;
		sine[1425]=256;
		sine[1426]=512;
		sine[1427]=768;
		sine[1428]=0;
		sine[1429]=256;
		sine[1430]=512;
		sine[1431]=768;
		sine[1432]=0;
		sine[1433]=256;
		sine[1434]=512;
		sine[1435]=768;
		sine[1436]=0;
		sine[1437]=256;
		sine[1438]=512;
		sine[1439]=768;
		sine[1440]=0;
		sine[1441]=256;
		sine[1442]=512;
		sine[1443]=768;
		sine[1444]=0;
		sine[1445]=256;
		sine[1446]=512;
		sine[1447]=768;
		sine[1448]=0;
		sine[1449]=256;
		sine[1450]=512;
		sine[1451]=768;
		sine[1452]=0;
		sine[1453]=256;
		sine[1454]=512;
		sine[1455]=768;
		sine[1456]=0;
		sine[1457]=256;
		sine[1458]=512;
		sine[1459]=768;
		sine[1460]=0;
		sine[1461]=256;
		sine[1462]=512;
		sine[1463]=768;
		sine[1464]=0;
		sine[1465]=256;
		sine[1466]=512;
		sine[1467]=768;
		sine[1468]=0;
		sine[1469]=256;
		sine[1470]=512;
		sine[1471]=768;
		sine[1472]=0;
		sine[1473]=256;
		sine[1474]=512;
		sine[1475]=768;
		sine[1476]=0;
		sine[1477]=256;
		sine[1478]=512;
		sine[1479]=768;
		sine[1480]=0;
		sine[1481]=256;
		sine[1482]=512;
		sine[1483]=768;
		sine[1484]=0;
		sine[1485]=256;
		sine[1486]=512;
		sine[1487]=768;
		sine[1488]=0;
		sine[1489]=256;
		sine[1490]=512;
		sine[1491]=768;
		sine[1492]=0;
		sine[1493]=256;
		sine[1494]=512;
		sine[1495]=768;
		sine[1496]=0;
		sine[1497]=256;
		sine[1498]=512;
		sine[1499]=768;
		sine[1500]=0;
		sine[1501]=256;
		sine[1502]=512;
		sine[1503]=768;
		sine[1504]=0;
		sine[1505]=256;
		sine[1506]=512;
		sine[1507]=768;
		sine[1508]=0;
		sine[1509]=256;
		sine[1510]=512;
		sine[1511]=768;
		sine[1512]=0;
		sine[1513]=256;
		sine[1514]=512;
		sine[1515]=768;
		sine[1516]=0;
		sine[1517]=256;
		sine[1518]=512;
		sine[1519]=768;
		sine[1520]=0;
		sine[1521]=256;
		sine[1522]=512;
		sine[1523]=768;
		sine[1524]=0;
		sine[1525]=256;
		sine[1526]=512;
		sine[1527]=768;
		sine[1528]=0;
		sine[1529]=256;
		sine[1530]=512;
		sine[1531]=768;
		sine[1532]=0;
		sine[1533]=256;
		sine[1534]=512;
		sine[1535]=768;
		sine[1536]=0;
		sine[1537]=256;
		sine[1538]=512;
		sine[1539]=768;
		sine[1540]=0;
		sine[1541]=256;
		sine[1542]=512;
		sine[1543]=768;
		sine[1544]=0;
		sine[1545]=256;
		sine[1546]=512;
		sine[1547]=768;
		sine[1548]=0;
		sine[1549]=256;
		sine[1550]=512;
		sine[1551]=768;
		sine[1552]=0;
		sine[1553]=256;
		sine[1554]=512;
		sine[1555]=768;
		sine[1556]=0;
		sine[1557]=256;
		sine[1558]=512;
		sine[1559]=768;
		sine[1560]=0;
		sine[1561]=256;
		sine[1562]=512;
		sine[1563]=768;
		sine[1564]=0;
		sine[1565]=256;
		sine[1566]=512;
		sine[1567]=768;
		sine[1568]=0;
		sine[1569]=256;
		sine[1570]=512;
		sine[1571]=768;
		sine[1572]=0;
		sine[1573]=256;
		sine[1574]=512;
		sine[1575]=768;
		sine[1576]=0;
		sine[1577]=256;
		sine[1578]=512;
		sine[1579]=768;
		sine[1580]=0;
		sine[1581]=256;
		sine[1582]=512;
		sine[1583]=768;
		sine[1584]=0;
		sine[1585]=256;
		sine[1586]=512;
		sine[1587]=768;
		sine[1588]=0;
		sine[1589]=256;
		sine[1590]=512;
		sine[1591]=768;
		sine[1592]=0;
		sine[1593]=256;
		sine[1594]=512;
		sine[1595]=768;
		sine[1596]=0;
		sine[1597]=256;
		sine[1598]=512;
		sine[1599]=768;
		sine[1600]=0;
		sine[1601]=256;
		sine[1602]=512;
		sine[1603]=768;
		sine[1604]=0;
		sine[1605]=256;
		sine[1606]=512;
		sine[1607]=768;
		sine[1608]=0;
		sine[1609]=256;
		sine[1610]=512;
		sine[1611]=768;
		sine[1612]=0;
		sine[1613]=256;
		sine[1614]=512;
		sine[1615]=768;
		sine[1616]=0;
		sine[1617]=256;
		sine[1618]=512;
		sine[1619]=768;
		sine[1620]=0;
		sine[1621]=256;
		sine[1622]=512;
		sine[1623]=768;
		sine[1624]=0;
		sine[1625]=256;
		sine[1626]=512;
		sine[1627]=768;
		sine[1628]=0;
		sine[1629]=256;
		sine[1630]=512;
		sine[1631]=768;
		sine[1632]=0;
		sine[1633]=256;
		sine[1634]=512;
		sine[1635]=768;
		sine[1636]=0;
		sine[1637]=256;
		sine[1638]=512;
		sine[1639]=768;
		sine[1640]=0;
		sine[1641]=256;
		sine[1642]=512;
		sine[1643]=768;
		sine[1644]=0;
		sine[1645]=256;
		sine[1646]=512;
		sine[1647]=768;
		sine[1648]=0;
		sine[1649]=256;
		sine[1650]=512;
		sine[1651]=768;
		sine[1652]=0;
		sine[1653]=256;
		sine[1654]=512;
		sine[1655]=768;
		sine[1656]=0;
		sine[1657]=256;
		sine[1658]=512;
		sine[1659]=768;
		sine[1660]=0;
		sine[1661]=256;
		sine[1662]=512;
		sine[1663]=768;
		sine[1664]=0;
		sine[1665]=256;
		sine[1666]=512;
		sine[1667]=768;
		sine[1668]=0;
		sine[1669]=256;
		sine[1670]=512;
		sine[1671]=768;
		sine[1672]=0;
		sine[1673]=256;
		sine[1674]=512;
		sine[1675]=768;
		sine[1676]=0;
		sine[1677]=256;
		sine[1678]=512;
		sine[1679]=768;
		sine[1680]=0;
		sine[1681]=256;
		sine[1682]=512;
		sine[1683]=768;
		sine[1684]=0;
		sine[1685]=256;
		sine[1686]=512;
		sine[1687]=768;
		sine[1688]=0;
		sine[1689]=256;
		sine[1690]=512;
		sine[1691]=768;
		sine[1692]=0;
		sine[1693]=256;
		sine[1694]=512;
		sine[1695]=768;
		sine[1696]=0;
		sine[1697]=256;
		sine[1698]=512;
		sine[1699]=768;
		sine[1700]=0;
		sine[1701]=256;
		sine[1702]=512;
		sine[1703]=768;
		sine[1704]=0;
		sine[1705]=256;
		sine[1706]=512;
		sine[1707]=768;
		sine[1708]=0;
		sine[1709]=256;
		sine[1710]=512;
		sine[1711]=768;
		sine[1712]=0;
		sine[1713]=256;
		sine[1714]=512;
		sine[1715]=768;
		sine[1716]=0;
		sine[1717]=256;
		sine[1718]=512;
		sine[1719]=768;
		sine[1720]=0;
		sine[1721]=256;
		sine[1722]=512;
		sine[1723]=768;
		sine[1724]=0;
		sine[1725]=256;
		sine[1726]=512;
		sine[1727]=768;
		sine[1728]=0;
		sine[1729]=256;
		sine[1730]=512;
		sine[1731]=768;
		sine[1732]=0;
		sine[1733]=256;
		sine[1734]=512;
		sine[1735]=768;
		sine[1736]=0;
		sine[1737]=256;
		sine[1738]=512;
		sine[1739]=768;
		sine[1740]=0;
		sine[1741]=256;
		sine[1742]=512;
		sine[1743]=768;
		sine[1744]=0;
		sine[1745]=256;
		sine[1746]=512;
		sine[1747]=768;
		sine[1748]=0;
		sine[1749]=256;
		sine[1750]=512;
		sine[1751]=768;
		sine[1752]=0;
		sine[1753]=256;
		sine[1754]=512;
		sine[1755]=768;
		sine[1756]=0;
		sine[1757]=256;
		sine[1758]=512;
		sine[1759]=768;
		sine[1760]=0;
		sine[1761]=256;
		sine[1762]=512;
		sine[1763]=768;
		sine[1764]=0;
		sine[1765]=256;
		sine[1766]=512;
		sine[1767]=768;
		sine[1768]=0;
		sine[1769]=256;
		sine[1770]=512;
		sine[1771]=768;
		sine[1772]=0;
		sine[1773]=256;
		sine[1774]=512;
		sine[1775]=768;
		sine[1776]=0;
		sine[1777]=256;
		sine[1778]=512;
		sine[1779]=768;
		sine[1780]=0;
		sine[1781]=256;
		sine[1782]=512;
		sine[1783]=768;
		sine[1784]=0;
		sine[1785]=256;
		sine[1786]=512;
		sine[1787]=768;
		sine[1788]=0;
		sine[1789]=256;
		sine[1790]=512;
		sine[1791]=768;
		sine[1792]=0;
		sine[1793]=256;
		sine[1794]=512;
		sine[1795]=768;
		sine[1796]=0;
		sine[1797]=256;
		sine[1798]=512;
		sine[1799]=768;
		sine[1800]=0;
		sine[1801]=256;
		sine[1802]=512;
		sine[1803]=768;
		sine[1804]=0;
		sine[1805]=256;
		sine[1806]=512;
		sine[1807]=768;
		sine[1808]=0;
		sine[1809]=256;
		sine[1810]=512;
		sine[1811]=768;
		sine[1812]=0;
		sine[1813]=256;
		sine[1814]=512;
		sine[1815]=768;
		sine[1816]=0;
		sine[1817]=256;
		sine[1818]=512;
		sine[1819]=768;
		sine[1820]=0;
		sine[1821]=256;
		sine[1822]=512;
		sine[1823]=768;
		sine[1824]=0;
		sine[1825]=256;
		sine[1826]=512;
		sine[1827]=768;
		sine[1828]=0;
		sine[1829]=256;
		sine[1830]=512;
		sine[1831]=768;
		sine[1832]=0;
		sine[1833]=256;
		sine[1834]=512;
		sine[1835]=768;
		sine[1836]=0;
		sine[1837]=256;
		sine[1838]=512;
		sine[1839]=768;
		sine[1840]=0;
		sine[1841]=256;
		sine[1842]=512;
		sine[1843]=768;
		sine[1844]=0;
		sine[1845]=256;
		sine[1846]=512;
		sine[1847]=768;
		sine[1848]=0;
		sine[1849]=256;
		sine[1850]=512;
		sine[1851]=768;
		sine[1852]=0;
		sine[1853]=256;
		sine[1854]=512;
		sine[1855]=768;
		sine[1856]=0;
		sine[1857]=256;
		sine[1858]=512;
		sine[1859]=768;
		sine[1860]=0;
		sine[1861]=256;
		sine[1862]=512;
		sine[1863]=768;
		sine[1864]=0;
		sine[1865]=256;
		sine[1866]=512;
		sine[1867]=768;
		sine[1868]=0;
		sine[1869]=256;
		sine[1870]=512;
		sine[1871]=768;
		sine[1872]=0;
		sine[1873]=256;
		sine[1874]=512;
		sine[1875]=768;
		sine[1876]=0;
		sine[1877]=256;
		sine[1878]=512;
		sine[1879]=768;
		sine[1880]=0;
		sine[1881]=256;
		sine[1882]=512;
		sine[1883]=768;
		sine[1884]=0;
		sine[1885]=256;
		sine[1886]=512;
		sine[1887]=768;
		sine[1888]=0;
		sine[1889]=256;
		sine[1890]=512;
		sine[1891]=768;
		sine[1892]=0;
		sine[1893]=256;
		sine[1894]=512;
		sine[1895]=768;
		sine[1896]=0;
		sine[1897]=256;
		sine[1898]=512;
		sine[1899]=768;
		sine[1900]=0;
		sine[1901]=256;
		sine[1902]=512;
		sine[1903]=768;
		sine[1904]=0;
		sine[1905]=256;
		sine[1906]=512;
		sine[1907]=768;
		sine[1908]=0;
		sine[1909]=256;
		sine[1910]=512;
		sine[1911]=768;
		sine[1912]=0;
		sine[1913]=256;
		sine[1914]=512;
		sine[1915]=768;
		sine[1916]=0;
		sine[1917]=256;
		sine[1918]=512;
		sine[1919]=768;
		sine[1920]=0;
		sine[1921]=256;
		sine[1922]=512;
		sine[1923]=768;
		sine[1924]=0;
		sine[1925]=256;
		sine[1926]=512;
		sine[1927]=768;
		sine[1928]=0;
		sine[1929]=256;
		sine[1930]=512;
		sine[1931]=768;
		sine[1932]=0;
		sine[1933]=256;
		sine[1934]=512;
		sine[1935]=768;
		sine[1936]=0;
		sine[1937]=256;
		sine[1938]=512;
		sine[1939]=768;
		sine[1940]=0;
		sine[1941]=256;
		sine[1942]=512;
		sine[1943]=768;
		sine[1944]=0;
		sine[1945]=256;
		sine[1946]=512;
		sine[1947]=768;
		sine[1948]=0;
		sine[1949]=256;
		sine[1950]=512;
		sine[1951]=768;
		sine[1952]=0;
		sine[1953]=256;
		sine[1954]=512;
		sine[1955]=768;
		sine[1956]=0;
		sine[1957]=256;
		sine[1958]=512;
		sine[1959]=768;
		sine[1960]=0;
		sine[1961]=256;
		sine[1962]=512;
		sine[1963]=768;
		sine[1964]=0;
		sine[1965]=256;
		sine[1966]=512;
		sine[1967]=768;
		sine[1968]=0;
		sine[1969]=256;
		sine[1970]=512;
		sine[1971]=768;
		sine[1972]=0;
		sine[1973]=256;
		sine[1974]=512;
		sine[1975]=768;
		sine[1976]=0;
		sine[1977]=256;
		sine[1978]=512;
		sine[1979]=768;
		sine[1980]=0;
		sine[1981]=256;
		sine[1982]=512;
		sine[1983]=768;
		sine[1984]=0;
		sine[1985]=256;
		sine[1986]=512;
		sine[1987]=768;
		sine[1988]=0;
		sine[1989]=256;
		sine[1990]=512;
		sine[1991]=768;
		sine[1992]=0;
		sine[1993]=256;
		sine[1994]=512;
		sine[1995]=768;
		sine[1996]=0;
		sine[1997]=256;
		sine[1998]=512;
		sine[1999]=768;
		sine[2000]=0;
		sine[2001]=256;
		sine[2002]=512;
		sine[2003]=768;
		sine[2004]=0;
		sine[2005]=256;
		sine[2006]=512;
		sine[2007]=768;
		sine[2008]=0;
		sine[2009]=256;
		sine[2010]=512;
		sine[2011]=768;
		sine[2012]=0;
		sine[2013]=256;
		sine[2014]=512;
		sine[2015]=768;
		sine[2016]=0;
		sine[2017]=256;
		sine[2018]=512;
		sine[2019]=768;
		sine[2020]=0;
		sine[2021]=256;
		sine[2022]=512;
		sine[2023]=768;
		sine[2024]=0;
		sine[2025]=256;
		sine[2026]=512;
		sine[2027]=768;
		sine[2028]=0;
		sine[2029]=256;
		sine[2030]=512;
		sine[2031]=768;
		sine[2032]=0;
		sine[2033]=256;
		sine[2034]=512;
		sine[2035]=768;
		sine[2036]=0;
		sine[2037]=256;
		sine[2038]=512;
		sine[2039]=768;
		sine[2040]=0;
		sine[2041]=256;
		sine[2042]=512;
		sine[2043]=768;
		sine[2044]=0;
		sine[2045]=256;
		sine[2046]=512;
		sine[2047]=768;
		sine[2048]=0;
		sine[2049]=256;
		sine[2050]=512;
		sine[2051]=768;
		sine[2052]=0;
		sine[2053]=256;
		sine[2054]=512;
		sine[2055]=768;
		sine[2056]=0;
		sine[2057]=256;
		sine[2058]=512;
		sine[2059]=768;
		sine[2060]=0;
		sine[2061]=256;
		sine[2062]=512;
		sine[2063]=768;
		sine[2064]=0;
		sine[2065]=256;
		sine[2066]=512;
		sine[2067]=768;
		sine[2068]=0;
		sine[2069]=256;
		sine[2070]=512;
		sine[2071]=768;
		sine[2072]=0;
		sine[2073]=256;
		sine[2074]=512;
		sine[2075]=768;
		sine[2076]=0;
		sine[2077]=256;
		sine[2078]=512;
		sine[2079]=768;
		sine[2080]=0;
		sine[2081]=256;
		sine[2082]=512;
		sine[2083]=768;
		sine[2084]=0;
		sine[2085]=256;
		sine[2086]=512;
		sine[2087]=768;
		sine[2088]=0;
		sine[2089]=256;
		sine[2090]=512;
		sine[2091]=768;
		sine[2092]=0;
		sine[2093]=256;
		sine[2094]=512;
		sine[2095]=768;
		sine[2096]=0;
		sine[2097]=256;
		sine[2098]=512;
		sine[2099]=768;
		sine[2100]=0;
		sine[2101]=256;
		sine[2102]=512;
		sine[2103]=768;
		sine[2104]=0;
		sine[2105]=256;
		sine[2106]=512;
		sine[2107]=768;
		sine[2108]=0;
		sine[2109]=256;
		sine[2110]=512;
		sine[2111]=768;
		sine[2112]=0;
		sine[2113]=256;
		sine[2114]=512;
		sine[2115]=768;
		sine[2116]=0;
		sine[2117]=256;
		sine[2118]=512;
		sine[2119]=768;
		sine[2120]=0;
		sine[2121]=256;
		sine[2122]=512;
		sine[2123]=768;
		sine[2124]=0;
		sine[2125]=256;
		sine[2126]=512;
		sine[2127]=768;
		sine[2128]=0;
		sine[2129]=256;
		sine[2130]=512;
		sine[2131]=768;
		sine[2132]=0;
		sine[2133]=256;
		sine[2134]=512;
		sine[2135]=768;
		sine[2136]=0;
		sine[2137]=256;
		sine[2138]=512;
		sine[2139]=768;
		sine[2140]=0;
		sine[2141]=256;
		sine[2142]=512;
		sine[2143]=768;
		sine[2144]=0;
		sine[2145]=256;
		sine[2146]=512;
		sine[2147]=768;
		sine[2148]=0;
		sine[2149]=256;
		sine[2150]=512;
		sine[2151]=768;
		sine[2152]=0;
		sine[2153]=256;
		sine[2154]=512;
		sine[2155]=768;
		sine[2156]=0;
		sine[2157]=256;
		sine[2158]=512;
		sine[2159]=768;
		sine[2160]=0;
		sine[2161]=256;
		sine[2162]=512;
		sine[2163]=768;
		sine[2164]=0;
		sine[2165]=256;
		sine[2166]=512;
		sine[2167]=768;
		sine[2168]=0;
		sine[2169]=256;
		sine[2170]=512;
		sine[2171]=768;
		sine[2172]=0;
		sine[2173]=256;
		sine[2174]=512;
		sine[2175]=768;
		sine[2176]=0;
		sine[2177]=256;
		sine[2178]=512;
		sine[2179]=768;
		sine[2180]=0;
		sine[2181]=256;
		sine[2182]=512;
		sine[2183]=768;
		sine[2184]=0;
		sine[2185]=256;
		sine[2186]=512;
		sine[2187]=768;
		sine[2188]=0;
		sine[2189]=256;
		sine[2190]=512;
		sine[2191]=768;
		sine[2192]=0;
		sine[2193]=256;
		sine[2194]=512;
		sine[2195]=768;
		sine[2196]=0;
		sine[2197]=256;
		sine[2198]=512;
		sine[2199]=768;
		sine[2200]=0;
		sine[2201]=256;
		sine[2202]=512;
		sine[2203]=768;
		sine[2204]=0;
		sine[2205]=256;
		sine[2206]=512;
		sine[2207]=768;
		sine[2208]=0;
		sine[2209]=256;
		sine[2210]=512;
		sine[2211]=768;
		sine[2212]=0;
		sine[2213]=256;
		sine[2214]=512;
		sine[2215]=768;
		sine[2216]=0;
		sine[2217]=256;
		sine[2218]=512;
		sine[2219]=768;
		sine[2220]=0;
		sine[2221]=256;
		sine[2222]=512;
		sine[2223]=768;
		sine[2224]=0;
		sine[2225]=256;
		sine[2226]=512;
		sine[2227]=768;
		sine[2228]=0;
		sine[2229]=256;
		sine[2230]=512;
		sine[2231]=768;
		sine[2232]=0;
		sine[2233]=256;
		sine[2234]=512;
		sine[2235]=768;
		sine[2236]=0;
		sine[2237]=256;
		sine[2238]=512;
		sine[2239]=768;
		sine[2240]=0;
		sine[2241]=256;
		sine[2242]=512;
		sine[2243]=768;
		sine[2244]=0;
		sine[2245]=256;
		sine[2246]=512;
		sine[2247]=768;
		sine[2248]=0;
		sine[2249]=256;
		sine[2250]=512;
		sine[2251]=768;
		sine[2252]=0;
		sine[2253]=256;
		sine[2254]=512;
		sine[2255]=768;
		sine[2256]=0;
		sine[2257]=256;
		sine[2258]=512;
		sine[2259]=768;
		sine[2260]=0;
		sine[2261]=256;
		sine[2262]=512;
		sine[2263]=768;
		sine[2264]=0;
		sine[2265]=256;
		sine[2266]=512;
		sine[2267]=768;
		sine[2268]=0;
		sine[2269]=256;
		sine[2270]=512;
		sine[2271]=768;
		sine[2272]=0;
		sine[2273]=256;
		sine[2274]=512;
		sine[2275]=768;
		sine[2276]=0;
		sine[2277]=256;
		sine[2278]=512;
		sine[2279]=768;
		sine[2280]=0;
		sine[2281]=256;
		sine[2282]=512;
		sine[2283]=768;
		sine[2284]=0;
		sine[2285]=256;
		sine[2286]=512;
		sine[2287]=768;
		sine[2288]=0;
		sine[2289]=256;
		sine[2290]=512;
		sine[2291]=768;
		sine[2292]=0;
		sine[2293]=256;
		sine[2294]=512;
		sine[2295]=768;
		sine[2296]=0;
		sine[2297]=256;
		sine[2298]=512;
		sine[2299]=768;
		sine[2300]=0;
		sine[2301]=256;
		sine[2302]=512;
		sine[2303]=768;
		sine[2304]=0;
		sine[2305]=256;
		sine[2306]=512;
		sine[2307]=768;
		sine[2308]=0;
		sine[2309]=256;
		sine[2310]=512;
		sine[2311]=768;
		sine[2312]=0;
		sine[2313]=256;
		sine[2314]=512;
		sine[2315]=768;
		sine[2316]=0;
		sine[2317]=256;
		sine[2318]=512;
		sine[2319]=768;
		sine[2320]=0;
		sine[2321]=256;
		sine[2322]=512;
		sine[2323]=768;
		sine[2324]=0;
		sine[2325]=256;
		sine[2326]=512;
		sine[2327]=768;
		sine[2328]=0;
		sine[2329]=256;
		sine[2330]=512;
		sine[2331]=768;
		sine[2332]=0;
		sine[2333]=256;
		sine[2334]=512;
		sine[2335]=768;
		sine[2336]=0;
		sine[2337]=256;
		sine[2338]=512;
		sine[2339]=768;
		sine[2340]=0;
		sine[2341]=256;
		sine[2342]=512;
		sine[2343]=768;
		sine[2344]=0;
		sine[2345]=256;
		sine[2346]=512;
		sine[2347]=768;
		sine[2348]=0;
		sine[2349]=256;
		sine[2350]=512;
		sine[2351]=768;
		sine[2352]=0;
		sine[2353]=256;
		sine[2354]=512;
		sine[2355]=768;
		sine[2356]=0;
		sine[2357]=256;
		sine[2358]=512;
		sine[2359]=768;
		sine[2360]=0;
		sine[2361]=256;
		sine[2362]=512;
		sine[2363]=768;
		sine[2364]=0;
		sine[2365]=256;
		sine[2366]=512;
		sine[2367]=768;
		sine[2368]=0;
		sine[2369]=256;
		sine[2370]=512;
		sine[2371]=768;
		sine[2372]=0;
		sine[2373]=256;
		sine[2374]=512;
		sine[2375]=768;
		sine[2376]=0;
		sine[2377]=256;
		sine[2378]=512;
		sine[2379]=768;
		sine[2380]=0;
		sine[2381]=256;
		sine[2382]=512;
		sine[2383]=768;
		sine[2384]=0;
		sine[2385]=256;
		sine[2386]=512;
		sine[2387]=768;
		sine[2388]=0;
		sine[2389]=256;
		sine[2390]=512;
		sine[2391]=768;
		sine[2392]=0;
		sine[2393]=256;
		sine[2394]=512;
		sine[2395]=768;
		sine[2396]=0;
		sine[2397]=256;
		sine[2398]=512;
		sine[2399]=768;
		sine[2400]=0;
		sine[2401]=256;
		sine[2402]=512;
		sine[2403]=768;
		sine[2404]=0;
		sine[2405]=256;
		sine[2406]=512;
		sine[2407]=768;
		sine[2408]=0;
		sine[2409]=256;
		sine[2410]=512;
		sine[2411]=768;
		sine[2412]=0;
		sine[2413]=256;
		sine[2414]=512;
		sine[2415]=768;
		sine[2416]=0;
		sine[2417]=256;
		sine[2418]=512;
		sine[2419]=768;
		sine[2420]=0;
		sine[2421]=256;
		sine[2422]=512;
		sine[2423]=768;
		sine[2424]=0;
		sine[2425]=256;
		sine[2426]=512;
		sine[2427]=768;
		sine[2428]=0;
		sine[2429]=256;
		sine[2430]=512;
		sine[2431]=768;
		sine[2432]=0;
		sine[2433]=256;
		sine[2434]=512;
		sine[2435]=768;
		sine[2436]=0;
		sine[2437]=256;
		sine[2438]=512;
		sine[2439]=768;
		sine[2440]=0;
		sine[2441]=256;
		sine[2442]=512;
		sine[2443]=768;
		sine[2444]=0;
		sine[2445]=256;
		sine[2446]=512;
		sine[2447]=768;
		sine[2448]=0;
		sine[2449]=256;
		sine[2450]=512;
		sine[2451]=768;
		sine[2452]=0;
		sine[2453]=256;
		sine[2454]=512;
		sine[2455]=768;
		sine[2456]=0;
		sine[2457]=256;
		sine[2458]=512;
		sine[2459]=768;
		sine[2460]=0;
		sine[2461]=256;
		sine[2462]=512;
		sine[2463]=768;
		sine[2464]=0;
		sine[2465]=256;
		sine[2466]=512;
		sine[2467]=768;
		sine[2468]=0;
		sine[2469]=256;
		sine[2470]=512;
		sine[2471]=768;
		sine[2472]=0;
		sine[2473]=256;
		sine[2474]=512;
		sine[2475]=768;
		sine[2476]=0;
		sine[2477]=256;
		sine[2478]=512;
		sine[2479]=768;
		sine[2480]=0;
		sine[2481]=256;
		sine[2482]=512;
		sine[2483]=768;
		sine[2484]=0;
		sine[2485]=256;
		sine[2486]=512;
		sine[2487]=768;
		sine[2488]=0;
		sine[2489]=256;
		sine[2490]=512;
		sine[2491]=768;
		sine[2492]=0;
		sine[2493]=256;
		sine[2494]=512;
		sine[2495]=768;
		sine[2496]=0;
		sine[2497]=256;
		sine[2498]=512;
		sine[2499]=768;
		sine[2500]=0;
		sine[2501]=256;
		sine[2502]=512;
		sine[2503]=768;
		sine[2504]=0;
		sine[2505]=256;
		sine[2506]=512;
		sine[2507]=768;
		sine[2508]=0;
		sine[2509]=256;
		sine[2510]=512;
		sine[2511]=768;
		sine[2512]=0;
		sine[2513]=256;
		sine[2514]=512;
		sine[2515]=768;
		sine[2516]=0;
		sine[2517]=256;
		sine[2518]=512;
		sine[2519]=768;
		sine[2520]=0;
		sine[2521]=256;
		sine[2522]=512;
		sine[2523]=768;
		sine[2524]=0;
		sine[2525]=256;
		sine[2526]=512;
		sine[2527]=768;
		sine[2528]=0;
		sine[2529]=256;
		sine[2530]=512;
		sine[2531]=768;
		sine[2532]=0;
		sine[2533]=256;
		sine[2534]=512;
		sine[2535]=768;
		sine[2536]=0;
		sine[2537]=256;
		sine[2538]=512;
		sine[2539]=768;
		sine[2540]=0;
		sine[2541]=256;
		sine[2542]=512;
		sine[2543]=768;
		sine[2544]=0;
		sine[2545]=256;
		sine[2546]=512;
		sine[2547]=768;
		sine[2548]=0;
		sine[2549]=256;
		sine[2550]=512;
		sine[2551]=768;
		sine[2552]=0;
		sine[2553]=256;
		sine[2554]=512;
		sine[2555]=768;
		sine[2556]=0;
		sine[2557]=256;
		sine[2558]=512;
		sine[2559]=768;
		sine[2560]=0;
		sine[2561]=256;
		sine[2562]=512;
		sine[2563]=768;
		sine[2564]=0;
		sine[2565]=256;
		sine[2566]=512;
		sine[2567]=768;
		sine[2568]=0;
		sine[2569]=256;
		sine[2570]=512;
		sine[2571]=768;
		sine[2572]=0;
		sine[2573]=256;
		sine[2574]=512;
		sine[2575]=768;
		sine[2576]=0;
		sine[2577]=256;
		sine[2578]=512;
		sine[2579]=768;
		sine[2580]=0;
		sine[2581]=256;
		sine[2582]=512;
		sine[2583]=768;
		sine[2584]=0;
		sine[2585]=256;
		sine[2586]=512;
		sine[2587]=768;
		sine[2588]=0;
		sine[2589]=256;
		sine[2590]=512;
		sine[2591]=768;
		sine[2592]=0;
		sine[2593]=256;
		sine[2594]=512;
		sine[2595]=768;
		sine[2596]=0;
		sine[2597]=256;
		sine[2598]=512;
		sine[2599]=768;
		sine[2600]=0;
		sine[2601]=256;
		sine[2602]=512;
		sine[2603]=768;
		sine[2604]=0;
		sine[2605]=256;
		sine[2606]=512;
		sine[2607]=768;
		sine[2608]=0;
		sine[2609]=256;
		sine[2610]=512;
		sine[2611]=768;
		sine[2612]=0;
		sine[2613]=256;
		sine[2614]=512;
		sine[2615]=768;
		sine[2616]=0;
		sine[2617]=256;
		sine[2618]=512;
		sine[2619]=768;
		sine[2620]=0;
		sine[2621]=256;
		sine[2622]=512;
		sine[2623]=768;
		sine[2624]=0;
		sine[2625]=256;
		sine[2626]=512;
		sine[2627]=768;
		sine[2628]=0;
		sine[2629]=256;
		sine[2630]=512;
		sine[2631]=768;
		sine[2632]=0;
		sine[2633]=256;
		sine[2634]=512;
		sine[2635]=768;
		sine[2636]=0;
		sine[2637]=256;
		sine[2638]=512;
		sine[2639]=768;
		sine[2640]=0;
		sine[2641]=256;
		sine[2642]=512;
		sine[2643]=768;
		sine[2644]=0;
		sine[2645]=256;
		sine[2646]=512;
		sine[2647]=768;
		sine[2648]=0;
		sine[2649]=256;
		sine[2650]=512;
		sine[2651]=768;
		sine[2652]=0;
		sine[2653]=256;
		sine[2654]=512;
		sine[2655]=768;
		sine[2656]=0;
		sine[2657]=256;
		sine[2658]=512;
		sine[2659]=768;
		sine[2660]=0;
		sine[2661]=256;
		sine[2662]=512;
		sine[2663]=768;
		sine[2664]=0;
		sine[2665]=256;
		sine[2666]=512;
		sine[2667]=768;
		sine[2668]=0;
		sine[2669]=256;
		sine[2670]=512;
		sine[2671]=768;
		sine[2672]=0;
		sine[2673]=256;
		sine[2674]=512;
		sine[2675]=768;
		sine[2676]=0;
		sine[2677]=256;
		sine[2678]=512;
		sine[2679]=768;
		sine[2680]=0;
		sine[2681]=256;
		sine[2682]=512;
		sine[2683]=768;
		sine[2684]=0;
		sine[2685]=256;
		sine[2686]=512;
		sine[2687]=768;
		sine[2688]=0;
		sine[2689]=256;
		sine[2690]=512;
		sine[2691]=768;
		sine[2692]=0;
		sine[2693]=256;
		sine[2694]=512;
		sine[2695]=768;
		sine[2696]=0;
		sine[2697]=256;
		sine[2698]=512;
		sine[2699]=768;
		sine[2700]=0;
		sine[2701]=256;
		sine[2702]=512;
		sine[2703]=768;
		sine[2704]=0;
		sine[2705]=256;
		sine[2706]=512;
		sine[2707]=768;
		sine[2708]=0;
		sine[2709]=256;
		sine[2710]=512;
		sine[2711]=768;
		sine[2712]=0;
		sine[2713]=256;
		sine[2714]=512;
		sine[2715]=768;
		sine[2716]=0;
		sine[2717]=256;
		sine[2718]=512;
		sine[2719]=768;
		sine[2720]=0;
		sine[2721]=256;
		sine[2722]=512;
		sine[2723]=768;
		sine[2724]=0;
		sine[2725]=256;
		sine[2726]=512;
		sine[2727]=768;
		sine[2728]=0;
		sine[2729]=256;
		sine[2730]=512;
		sine[2731]=768;
		sine[2732]=0;
		sine[2733]=256;
		sine[2734]=512;
		sine[2735]=768;
		sine[2736]=0;
		sine[2737]=256;
		sine[2738]=512;
		sine[2739]=768;
		sine[2740]=0;
		sine[2741]=256;
		sine[2742]=512;
		sine[2743]=768;
		sine[2744]=0;
		sine[2745]=256;
		sine[2746]=512;
		sine[2747]=768;
		sine[2748]=0;
		sine[2749]=256;
		sine[2750]=512;
		sine[2751]=768;
		sine[2752]=0;
		sine[2753]=256;
		sine[2754]=512;
		sine[2755]=768;
		sine[2756]=0;
		sine[2757]=256;
		sine[2758]=512;
		sine[2759]=768;
		sine[2760]=0;
		sine[2761]=256;
		sine[2762]=512;
		sine[2763]=768;
		sine[2764]=0;
		sine[2765]=256;
		sine[2766]=512;
		sine[2767]=768;
		sine[2768]=0;
		sine[2769]=256;
		sine[2770]=512;
		sine[2771]=768;
		sine[2772]=0;
		sine[2773]=256;
		sine[2774]=512;
		sine[2775]=768;
		sine[2776]=0;
		sine[2777]=256;
		sine[2778]=512;
		sine[2779]=768;
		sine[2780]=0;
		sine[2781]=256;
		sine[2782]=512;
		sine[2783]=768;
		sine[2784]=0;
		sine[2785]=256;
		sine[2786]=512;
		sine[2787]=768;
		sine[2788]=0;
		sine[2789]=256;
		sine[2790]=512;
		sine[2791]=768;
		sine[2792]=0;
		sine[2793]=256;
		sine[2794]=512;
		sine[2795]=768;
		sine[2796]=0;
		sine[2797]=256;
		sine[2798]=512;
		sine[2799]=768;
		sine[2800]=0;
		sine[2801]=256;
		sine[2802]=512;
		sine[2803]=768;
		sine[2804]=0;
		sine[2805]=256;
		sine[2806]=512;
		sine[2807]=768;
		sine[2808]=0;
		sine[2809]=256;
		sine[2810]=512;
		sine[2811]=768;
		sine[2812]=0;
		sine[2813]=256;
		sine[2814]=512;
		sine[2815]=768;
		sine[2816]=0;
		sine[2817]=256;
		sine[2818]=512;
		sine[2819]=768;
		sine[2820]=0;
		sine[2821]=256;
		sine[2822]=512;
		sine[2823]=768;
		sine[2824]=0;
		sine[2825]=256;
		sine[2826]=512;
		sine[2827]=768;
		sine[2828]=0;
		sine[2829]=256;
		sine[2830]=512;
		sine[2831]=768;
		sine[2832]=0;
		sine[2833]=256;
		sine[2834]=512;
		sine[2835]=768;
		sine[2836]=0;
		sine[2837]=256;
		sine[2838]=512;
		sine[2839]=768;
		sine[2840]=0;
		sine[2841]=256;
		sine[2842]=512;
		sine[2843]=768;
		sine[2844]=0;
		sine[2845]=256;
		sine[2846]=512;
		sine[2847]=768;
		sine[2848]=0;
		sine[2849]=256;
		sine[2850]=512;
		sine[2851]=768;
		sine[2852]=0;
		sine[2853]=256;
		sine[2854]=512;
		sine[2855]=768;
		sine[2856]=0;
		sine[2857]=256;
		sine[2858]=512;
		sine[2859]=768;
		sine[2860]=0;
		sine[2861]=256;
		sine[2862]=512;
		sine[2863]=768;
		sine[2864]=0;
		sine[2865]=256;
		sine[2866]=512;
		sine[2867]=768;
		sine[2868]=0;
		sine[2869]=256;
		sine[2870]=512;
		sine[2871]=768;
		sine[2872]=0;
		sine[2873]=256;
		sine[2874]=512;
		sine[2875]=768;
		sine[2876]=0;
		sine[2877]=256;
		sine[2878]=512;
		sine[2879]=768;
		sine[2880]=0;
		sine[2881]=256;
		sine[2882]=512;
		sine[2883]=768;
		sine[2884]=0;
		sine[2885]=256;
		sine[2886]=512;
		sine[2887]=768;
		sine[2888]=0;
		sine[2889]=256;
		sine[2890]=512;
		sine[2891]=768;
		sine[2892]=0;
		sine[2893]=256;
		sine[2894]=512;
		sine[2895]=768;
		sine[2896]=0;
		sine[2897]=256;
		sine[2898]=512;
		sine[2899]=768;
		sine[2900]=0;
		sine[2901]=256;
		sine[2902]=512;
		sine[2903]=768;
		sine[2904]=0;
		sine[2905]=256;
		sine[2906]=512;
		sine[2907]=768;
		sine[2908]=0;
		sine[2909]=256;
		sine[2910]=512;
		sine[2911]=768;
		sine[2912]=0;
		sine[2913]=256;
		sine[2914]=512;
		sine[2915]=768;
		sine[2916]=0;
		sine[2917]=256;
		sine[2918]=512;
		sine[2919]=768;
		sine[2920]=0;
		sine[2921]=256;
		sine[2922]=512;
		sine[2923]=768;
		sine[2924]=0;
		sine[2925]=256;
		sine[2926]=512;
		sine[2927]=768;
		sine[2928]=0;
		sine[2929]=256;
		sine[2930]=512;
		sine[2931]=768;
		sine[2932]=0;
		sine[2933]=256;
		sine[2934]=512;
		sine[2935]=768;
		sine[2936]=0;
		sine[2937]=256;
		sine[2938]=512;
		sine[2939]=768;
		sine[2940]=0;
		sine[2941]=256;
		sine[2942]=512;
		sine[2943]=768;
		sine[2944]=0;
		sine[2945]=256;
		sine[2946]=512;
		sine[2947]=768;
		sine[2948]=0;
		sine[2949]=256;
		sine[2950]=512;
		sine[2951]=768;
		sine[2952]=0;
		sine[2953]=256;
		sine[2954]=512;
		sine[2955]=768;
		sine[2956]=0;
		sine[2957]=256;
		sine[2958]=512;
		sine[2959]=768;
		sine[2960]=0;
		sine[2961]=256;
		sine[2962]=512;
		sine[2963]=768;
		sine[2964]=0;
		sine[2965]=256;
		sine[2966]=512;
		sine[2967]=768;
		sine[2968]=0;
		sine[2969]=256;
		sine[2970]=512;
		sine[2971]=768;
		sine[2972]=0;
		sine[2973]=256;
		sine[2974]=512;
		sine[2975]=768;
		sine[2976]=0;
		sine[2977]=256;
		sine[2978]=512;
		sine[2979]=768;
		sine[2980]=0;
		sine[2981]=256;
		sine[2982]=512;
		sine[2983]=768;
		sine[2984]=0;
		sine[2985]=256;
		sine[2986]=512;
		sine[2987]=768;
		sine[2988]=0;
		sine[2989]=256;
		sine[2990]=512;
		sine[2991]=768;
		sine[2992]=0;
		sine[2993]=256;
		sine[2994]=512;
		sine[2995]=768;
		sine[2996]=0;
		sine[2997]=256;
		sine[2998]=512;
		sine[2999]=768;
		sine[3000]=0;
		sine[3001]=256;
		sine[3002]=512;
		sine[3003]=768;
		sine[3004]=0;
		sine[3005]=256;
		sine[3006]=512;
		sine[3007]=768;
		sine[3008]=0;
		sine[3009]=256;
		sine[3010]=512;
		sine[3011]=768;
		sine[3012]=0;
		sine[3013]=256;
		sine[3014]=512;
		sine[3015]=768;
		sine[3016]=0;
		sine[3017]=256;
		sine[3018]=512;
		sine[3019]=768;
		sine[3020]=0;
		sine[3021]=256;
		sine[3022]=512;
		sine[3023]=768;
		sine[3024]=0;
		sine[3025]=256;
		sine[3026]=512;
		sine[3027]=768;
		sine[3028]=0;
		sine[3029]=256;
		sine[3030]=512;
		sine[3031]=768;
		sine[3032]=0;
		sine[3033]=256;
		sine[3034]=512;
		sine[3035]=768;
		sine[3036]=0;
		sine[3037]=256;
		sine[3038]=512;
		sine[3039]=768;
		sine[3040]=0;
		sine[3041]=256;
		sine[3042]=512;
		sine[3043]=768;
		sine[3044]=0;
		sine[3045]=256;
		sine[3046]=512;
		sine[3047]=768;
		sine[3048]=0;
		sine[3049]=256;
		sine[3050]=512;
		sine[3051]=768;
		sine[3052]=0;
		sine[3053]=256;
		sine[3054]=512;
		sine[3055]=768;
		sine[3056]=0;
		sine[3057]=256;
		sine[3058]=512;
		sine[3059]=768;
		sine[3060]=0;
		sine[3061]=256;
		sine[3062]=512;
		sine[3063]=768;
		sine[3064]=0;
		sine[3065]=256;
		sine[3066]=512;
		sine[3067]=768;
		sine[3068]=0;
		sine[3069]=256;
		sine[3070]=512;
		sine[3071]=768;
		sine[3072]=0;
		sine[3073]=256;
		sine[3074]=512;
		sine[3075]=768;
		sine[3076]=0;
		sine[3077]=256;
		sine[3078]=512;
		sine[3079]=768;
		sine[3080]=0;
		sine[3081]=256;
		sine[3082]=512;
		sine[3083]=768;
		sine[3084]=0;
		sine[3085]=256;
		sine[3086]=512;
		sine[3087]=768;
		sine[3088]=0;
		sine[3089]=256;
		sine[3090]=512;
		sine[3091]=768;
		sine[3092]=0;
		sine[3093]=256;
		sine[3094]=512;
		sine[3095]=768;
		sine[3096]=0;
		sine[3097]=256;
		sine[3098]=512;
		sine[3099]=768;
		sine[3100]=0;
		sine[3101]=256;
		sine[3102]=512;
		sine[3103]=768;
		sine[3104]=0;
		sine[3105]=256;
		sine[3106]=512;
		sine[3107]=768;
		sine[3108]=0;
		sine[3109]=256;
		sine[3110]=512;
		sine[3111]=768;
		sine[3112]=0;
		sine[3113]=256;
		sine[3114]=512;
		sine[3115]=768;
		sine[3116]=0;
		sine[3117]=256;
		sine[3118]=512;
		sine[3119]=768;
		sine[3120]=0;
		sine[3121]=256;
		sine[3122]=512;
		sine[3123]=768;
		sine[3124]=0;
		sine[3125]=256;
		sine[3126]=512;
		sine[3127]=768;
		sine[3128]=0;
		sine[3129]=256;
		sine[3130]=512;
		sine[3131]=768;
		sine[3132]=0;
		sine[3133]=256;
		sine[3134]=512;
		sine[3135]=768;
		sine[3136]=0;
		sine[3137]=256;
		sine[3138]=512;
		sine[3139]=768;
		sine[3140]=0;
		sine[3141]=256;
		sine[3142]=512;
		sine[3143]=768;
		sine[3144]=0;
		sine[3145]=256;
		sine[3146]=512;
		sine[3147]=768;
		sine[3148]=0;
		sine[3149]=256;
		sine[3150]=512;
		sine[3151]=768;
		sine[3152]=0;
		sine[3153]=256;
		sine[3154]=512;
		sine[3155]=768;
		sine[3156]=0;
		sine[3157]=256;
		sine[3158]=512;
		sine[3159]=768;
		sine[3160]=0;
		sine[3161]=256;
		sine[3162]=512;
		sine[3163]=768;
		sine[3164]=0;
		sine[3165]=256;
		sine[3166]=512;
		sine[3167]=768;
		sine[3168]=0;
		sine[3169]=256;
		sine[3170]=512;
		sine[3171]=768;
		sine[3172]=0;
		sine[3173]=256;
		sine[3174]=512;
		sine[3175]=768;
		sine[3176]=0;
		sine[3177]=256;
		sine[3178]=512;
		sine[3179]=768;
		sine[3180]=0;
		sine[3181]=256;
		sine[3182]=512;
		sine[3183]=768;
		sine[3184]=0;
		sine[3185]=256;
		sine[3186]=512;
		sine[3187]=768;
		sine[3188]=0;
		sine[3189]=256;
		sine[3190]=512;
		sine[3191]=768;
		sine[3192]=0;
		sine[3193]=256;
		sine[3194]=512;
		sine[3195]=768;
		sine[3196]=0;
		sine[3197]=256;
		sine[3198]=512;
		sine[3199]=768;
		sine[3200]=0;
		sine[3201]=256;
		sine[3202]=512;
		sine[3203]=768;
		sine[3204]=0;
		sine[3205]=256;
		sine[3206]=512;
		sine[3207]=768;
		sine[3208]=0;
		sine[3209]=256;
		sine[3210]=512;
		sine[3211]=768;
		sine[3212]=0;
		sine[3213]=256;
		sine[3214]=512;
		sine[3215]=768;
		sine[3216]=0;
		sine[3217]=256;
		sine[3218]=512;
		sine[3219]=768;
		sine[3220]=0;
		sine[3221]=256;
		sine[3222]=512;
		sine[3223]=768;
		sine[3224]=0;
		sine[3225]=256;
		sine[3226]=512;
		sine[3227]=768;
		sine[3228]=0;
		sine[3229]=256;
		sine[3230]=512;
		sine[3231]=768;
		sine[3232]=0;
		sine[3233]=256;
		sine[3234]=512;
		sine[3235]=768;
		sine[3236]=0;
		sine[3237]=256;
		sine[3238]=512;
		sine[3239]=768;
		sine[3240]=0;
		sine[3241]=256;
		sine[3242]=512;
		sine[3243]=768;
		sine[3244]=0;
		sine[3245]=256;
		sine[3246]=512;
		sine[3247]=768;
		sine[3248]=0;
		sine[3249]=256;
		sine[3250]=512;
		sine[3251]=768;
		sine[3252]=0;
		sine[3253]=256;
		sine[3254]=512;
		sine[3255]=768;
		sine[3256]=0;
		sine[3257]=256;
		sine[3258]=512;
		sine[3259]=768;
		sine[3260]=0;
		sine[3261]=256;
		sine[3262]=512;
		sine[3263]=768;
		sine[3264]=0;
		sine[3265]=256;
		sine[3266]=512;
		sine[3267]=768;
		sine[3268]=0;
		sine[3269]=256;
		sine[3270]=512;
		sine[3271]=768;
		sine[3272]=0;
		sine[3273]=256;
		sine[3274]=512;
		sine[3275]=768;
		sine[3276]=0;
		sine[3277]=256;
		sine[3278]=512;
		sine[3279]=768;
		sine[3280]=0;
		sine[3281]=256;
		sine[3282]=512;
		sine[3283]=768;
		sine[3284]=0;
		sine[3285]=256;
		sine[3286]=512;
		sine[3287]=768;
		sine[3288]=0;
		sine[3289]=256;
		sine[3290]=512;
		sine[3291]=768;
		sine[3292]=0;
		sine[3293]=256;
		sine[3294]=512;
		sine[3295]=768;
		sine[3296]=0;
		sine[3297]=256;
		sine[3298]=512;
		sine[3299]=768;
		sine[3300]=0;
		sine[3301]=256;
		sine[3302]=512;
		sine[3303]=768;
		sine[3304]=0;
		sine[3305]=256;
		sine[3306]=512;
		sine[3307]=768;
		sine[3308]=0;
		sine[3309]=256;
		sine[3310]=512;
		sine[3311]=768;
		sine[3312]=0;
		sine[3313]=256;
		sine[3314]=512;
		sine[3315]=768;
		sine[3316]=0;
		sine[3317]=256;
		sine[3318]=512;
		sine[3319]=768;
		sine[3320]=0;
		sine[3321]=256;
		sine[3322]=512;
		sine[3323]=768;
		sine[3324]=0;
		sine[3325]=256;
		sine[3326]=512;
		sine[3327]=768;
		sine[3328]=0;
		sine[3329]=256;
		sine[3330]=512;
		sine[3331]=768;
		sine[3332]=0;
		sine[3333]=256;
		sine[3334]=512;
		sine[3335]=768;
		sine[3336]=0;
		sine[3337]=256;
		sine[3338]=512;
		sine[3339]=768;
		sine[3340]=0;
		sine[3341]=256;
		sine[3342]=512;
		sine[3343]=768;
		sine[3344]=0;
		sine[3345]=256;
		sine[3346]=512;
		sine[3347]=768;
		sine[3348]=0;
		sine[3349]=256;
		sine[3350]=512;
		sine[3351]=768;
		sine[3352]=0;
		sine[3353]=256;
		sine[3354]=512;
		sine[3355]=768;
		sine[3356]=0;
		sine[3357]=256;
		sine[3358]=512;
		sine[3359]=768;
		sine[3360]=0;
		sine[3361]=256;
		sine[3362]=512;
		sine[3363]=768;
		sine[3364]=0;
		sine[3365]=256;
		sine[3366]=512;
		sine[3367]=768;
		sine[3368]=0;
		sine[3369]=256;
		sine[3370]=512;
		sine[3371]=768;
		sine[3372]=0;
		sine[3373]=256;
		sine[3374]=512;
		sine[3375]=768;
		sine[3376]=0;
		sine[3377]=256;
		sine[3378]=512;
		sine[3379]=768;
		sine[3380]=0;
		sine[3381]=256;
		sine[3382]=512;
		sine[3383]=768;
		sine[3384]=0;
		sine[3385]=256;
		sine[3386]=512;
		sine[3387]=768;
		sine[3388]=0;
		sine[3389]=256;
		sine[3390]=512;
		sine[3391]=768;
		sine[3392]=0;
		sine[3393]=256;
		sine[3394]=512;
		sine[3395]=768;
		sine[3396]=0;
		sine[3397]=256;
		sine[3398]=512;
		sine[3399]=768;
		sine[3400]=0;
		sine[3401]=256;
		sine[3402]=512;
		sine[3403]=768;
		sine[3404]=0;
		sine[3405]=256;
		sine[3406]=512;
		sine[3407]=768;
		sine[3408]=0;
		sine[3409]=256;
		sine[3410]=512;
		sine[3411]=768;
		sine[3412]=0;
		sine[3413]=256;
		sine[3414]=512;
		sine[3415]=768;
		sine[3416]=0;
		sine[3417]=256;
		sine[3418]=512;
		sine[3419]=768;
		sine[3420]=0;
		sine[3421]=256;
		sine[3422]=512;
		sine[3423]=768;
		sine[3424]=0;
		sine[3425]=256;
		sine[3426]=512;
		sine[3427]=768;
		sine[3428]=0;
		sine[3429]=256;
		sine[3430]=512;
		sine[3431]=768;
		sine[3432]=0;
		sine[3433]=256;
		sine[3434]=512;
		sine[3435]=768;
		sine[3436]=0;
		sine[3437]=256;
		sine[3438]=512;
		sine[3439]=768;
		sine[3440]=0;
		sine[3441]=256;
		sine[3442]=512;
		sine[3443]=768;
		sine[3444]=0;
		sine[3445]=256;
		sine[3446]=512;
		sine[3447]=768;
		sine[3448]=0;
		sine[3449]=256;
		sine[3450]=512;
		sine[3451]=768;
		sine[3452]=0;
		sine[3453]=256;
		sine[3454]=512;
		sine[3455]=768;
		sine[3456]=0;
		sine[3457]=256;
		sine[3458]=512;
		sine[3459]=768;
		sine[3460]=0;
		sine[3461]=256;
		sine[3462]=512;
		sine[3463]=768;
		sine[3464]=0;
		sine[3465]=256;
		sine[3466]=512;
		sine[3467]=768;
		sine[3468]=0;
		sine[3469]=256;
		sine[3470]=512;
		sine[3471]=768;
		sine[3472]=0;
		sine[3473]=256;
		sine[3474]=512;
		sine[3475]=768;
		sine[3476]=0;
		sine[3477]=256;
		sine[3478]=512;
		sine[3479]=768;
		sine[3480]=0;
		sine[3481]=256;
		sine[3482]=512;
		sine[3483]=768;
		sine[3484]=0;
		sine[3485]=256;
		sine[3486]=512;
		sine[3487]=768;
		sine[3488]=0;
		sine[3489]=256;
		sine[3490]=512;
		sine[3491]=768;
		sine[3492]=0;
		sine[3493]=256;
		sine[3494]=512;
		sine[3495]=768;
		sine[3496]=0;
		sine[3497]=256;
		sine[3498]=512;
		sine[3499]=768;
		sine[3500]=0;
		sine[3501]=256;
		sine[3502]=512;
		sine[3503]=768;
		sine[3504]=0;
		sine[3505]=256;
		sine[3506]=512;
		sine[3507]=768;
		sine[3508]=0;
		sine[3509]=256;
		sine[3510]=512;
		sine[3511]=768;
		sine[3512]=0;
		sine[3513]=256;
		sine[3514]=512;
		sine[3515]=768;
		sine[3516]=0;
		sine[3517]=256;
		sine[3518]=512;
		sine[3519]=768;
		sine[3520]=0;
		sine[3521]=256;
		sine[3522]=512;
		sine[3523]=768;
		sine[3524]=0;
		sine[3525]=256;
		sine[3526]=512;
		sine[3527]=768;
		sine[3528]=0;
		sine[3529]=256;
		sine[3530]=512;
		sine[3531]=768;
		sine[3532]=0;
		sine[3533]=256;
		sine[3534]=512;
		sine[3535]=768;
		sine[3536]=0;
		sine[3537]=256;
		sine[3538]=512;
		sine[3539]=768;
		sine[3540]=0;
		sine[3541]=256;
		sine[3542]=512;
		sine[3543]=768;
		sine[3544]=0;
		sine[3545]=256;
		sine[3546]=512;
		sine[3547]=768;
		sine[3548]=0;
		sine[3549]=256;
		sine[3550]=512;
		sine[3551]=768;
		sine[3552]=0;
		sine[3553]=256;
		sine[3554]=512;
		sine[3555]=768;
		sine[3556]=0;
		sine[3557]=256;
		sine[3558]=512;
		sine[3559]=768;
		sine[3560]=0;
		sine[3561]=256;
		sine[3562]=512;
		sine[3563]=768;
		sine[3564]=0;
		sine[3565]=256;
		sine[3566]=512;
		sine[3567]=768;
		sine[3568]=0;
		sine[3569]=256;
		sine[3570]=512;
		sine[3571]=768;
		sine[3572]=0;
		sine[3573]=256;
		sine[3574]=512;
		sine[3575]=768;
		sine[3576]=0;
		sine[3577]=256;
		sine[3578]=512;
		sine[3579]=768;
		sine[3580]=0;
		sine[3581]=256;
		sine[3582]=512;
		sine[3583]=768;
		sine[3584]=0;
		sine[3585]=256;
		sine[3586]=512;
		sine[3587]=768;
		sine[3588]=0;
		sine[3589]=256;
		sine[3590]=512;
		sine[3591]=768;
		sine[3592]=0;
		sine[3593]=256;
		sine[3594]=512;
		sine[3595]=768;
		sine[3596]=0;
		sine[3597]=256;
		sine[3598]=512;
		sine[3599]=768;
		sine[3600]=0;
		sine[3601]=256;
		sine[3602]=512;
		sine[3603]=768;
		sine[3604]=0;
		sine[3605]=256;
		sine[3606]=512;
		sine[3607]=768;
		sine[3608]=0;
		sine[3609]=256;
		sine[3610]=512;
		sine[3611]=768;
		sine[3612]=0;
		sine[3613]=256;
		sine[3614]=512;
		sine[3615]=768;
		sine[3616]=0;
		sine[3617]=256;
		sine[3618]=512;
		sine[3619]=768;
		sine[3620]=0;
		sine[3621]=256;
		sine[3622]=512;
		sine[3623]=768;
		sine[3624]=0;
		sine[3625]=256;
		sine[3626]=512;
		sine[3627]=768;
		sine[3628]=0;
		sine[3629]=256;
		sine[3630]=512;
		sine[3631]=768;
		sine[3632]=0;
		sine[3633]=256;
		sine[3634]=512;
		sine[3635]=768;
		sine[3636]=0;
		sine[3637]=256;
		sine[3638]=512;
		sine[3639]=768;
		sine[3640]=0;
		sine[3641]=256;
		sine[3642]=512;
		sine[3643]=768;
		sine[3644]=0;
		sine[3645]=256;
		sine[3646]=512;
		sine[3647]=768;
		sine[3648]=0;
		sine[3649]=256;
		sine[3650]=512;
		sine[3651]=768;
		sine[3652]=0;
		sine[3653]=256;
		sine[3654]=512;
		sine[3655]=768;
		sine[3656]=0;
		sine[3657]=256;
		sine[3658]=512;
		sine[3659]=768;
		sine[3660]=0;
		sine[3661]=256;
		sine[3662]=512;
		sine[3663]=768;
		sine[3664]=0;
		sine[3665]=256;
		sine[3666]=512;
		sine[3667]=768;
		sine[3668]=0;
		sine[3669]=256;
		sine[3670]=512;
		sine[3671]=768;
		sine[3672]=0;
		sine[3673]=256;
		sine[3674]=512;
		sine[3675]=768;
		sine[3676]=0;
		sine[3677]=256;
		sine[3678]=512;
		sine[3679]=768;
		sine[3680]=0;
		sine[3681]=256;
		sine[3682]=512;
		sine[3683]=768;
		sine[3684]=0;
		sine[3685]=256;
		sine[3686]=512;
		sine[3687]=768;
		sine[3688]=0;
		sine[3689]=256;
		sine[3690]=512;
		sine[3691]=768;
		sine[3692]=0;
		sine[3693]=256;
		sine[3694]=512;
		sine[3695]=768;
		sine[3696]=0;
		sine[3697]=256;
		sine[3698]=512;
		sine[3699]=768;
		sine[3700]=0;
		sine[3701]=256;
		sine[3702]=512;
		sine[3703]=768;
		sine[3704]=0;
		sine[3705]=256;
		sine[3706]=512;
		sine[3707]=768;
		sine[3708]=0;
		sine[3709]=256;
		sine[3710]=512;
		sine[3711]=768;
		sine[3712]=0;
		sine[3713]=256;
		sine[3714]=512;
		sine[3715]=768;
		sine[3716]=0;
		sine[3717]=256;
		sine[3718]=512;
		sine[3719]=768;
		sine[3720]=0;
		sine[3721]=256;
		sine[3722]=512;
		sine[3723]=768;
		sine[3724]=0;
		sine[3725]=256;
		sine[3726]=512;
		sine[3727]=768;
		sine[3728]=0;
		sine[3729]=256;
		sine[3730]=512;
		sine[3731]=768;
		sine[3732]=0;
		sine[3733]=256;
		sine[3734]=512;
		sine[3735]=768;
		sine[3736]=0;
		sine[3737]=256;
		sine[3738]=512;
		sine[3739]=768;
		sine[3740]=0;
		sine[3741]=256;
		sine[3742]=512;
		sine[3743]=768;
		sine[3744]=0;
		sine[3745]=256;
		sine[3746]=512;
		sine[3747]=768;
		sine[3748]=0;
		sine[3749]=256;
		sine[3750]=512;
		sine[3751]=768;
		sine[3752]=0;
		sine[3753]=256;
		sine[3754]=512;
		sine[3755]=768;
		sine[3756]=0;
		sine[3757]=256;
		sine[3758]=512;
		sine[3759]=768;
		sine[3760]=0;
		sine[3761]=256;
		sine[3762]=512;
		sine[3763]=768;
		sine[3764]=0;
		sine[3765]=256;
		sine[3766]=512;
		sine[3767]=768;
		sine[3768]=0;
		sine[3769]=256;
		sine[3770]=512;
		sine[3771]=768;
		sine[3772]=0;
		sine[3773]=256;
		sine[3774]=512;
		sine[3775]=768;
		sine[3776]=0;
		sine[3777]=256;
		sine[3778]=512;
		sine[3779]=768;
		sine[3780]=0;
		sine[3781]=256;
		sine[3782]=512;
		sine[3783]=768;
		sine[3784]=0;
		sine[3785]=256;
		sine[3786]=512;
		sine[3787]=768;
		sine[3788]=0;
		sine[3789]=256;
		sine[3790]=512;
		sine[3791]=768;
		sine[3792]=0;
		sine[3793]=256;
		sine[3794]=512;
		sine[3795]=768;
		sine[3796]=0;
		sine[3797]=256;
		sine[3798]=512;
		sine[3799]=768;
		sine[3800]=0;
		sine[3801]=256;
		sine[3802]=512;
		sine[3803]=768;
		sine[3804]=0;
		sine[3805]=256;
		sine[3806]=512;
		sine[3807]=768;
		sine[3808]=0;
		sine[3809]=256;
		sine[3810]=512;
		sine[3811]=768;
		sine[3812]=0;
		sine[3813]=256;
		sine[3814]=512;
		sine[3815]=768;
		sine[3816]=0;
		sine[3817]=256;
		sine[3818]=512;
		sine[3819]=768;
		sine[3820]=0;
		sine[3821]=256;
		sine[3822]=512;
		sine[3823]=768;
		sine[3824]=0;
		sine[3825]=256;
		sine[3826]=512;
		sine[3827]=768;
		sine[3828]=0;
		sine[3829]=256;
		sine[3830]=512;
		sine[3831]=768;
		sine[3832]=0;
		sine[3833]=256;
		sine[3834]=512;
		sine[3835]=768;
		sine[3836]=0;
		sine[3837]=256;
		sine[3838]=512;
		sine[3839]=768;
		sine[3840]=0;
		sine[3841]=256;
		sine[3842]=512;
		sine[3843]=768;
		sine[3844]=0;
		sine[3845]=256;
		sine[3846]=512;
		sine[3847]=768;
		sine[3848]=0;
		sine[3849]=256;
		sine[3850]=512;
		sine[3851]=768;
		sine[3852]=0;
		sine[3853]=256;
		sine[3854]=512;
		sine[3855]=768;
		sine[3856]=0;
		sine[3857]=256;
		sine[3858]=512;
		sine[3859]=768;
		sine[3860]=0;
		sine[3861]=256;
		sine[3862]=512;
		sine[3863]=768;
		sine[3864]=0;
		sine[3865]=256;
		sine[3866]=512;
		sine[3867]=768;
		sine[3868]=0;
		sine[3869]=256;
		sine[3870]=512;
		sine[3871]=768;
		sine[3872]=0;
		sine[3873]=256;
		sine[3874]=512;
		sine[3875]=768;
		sine[3876]=0;
		sine[3877]=256;
		sine[3878]=512;
		sine[3879]=768;
		sine[3880]=0;
		sine[3881]=256;
		sine[3882]=512;
		sine[3883]=768;
		sine[3884]=0;
		sine[3885]=256;
		sine[3886]=512;
		sine[3887]=768;
		sine[3888]=0;
		sine[3889]=256;
		sine[3890]=512;
		sine[3891]=768;
		sine[3892]=0;
		sine[3893]=256;
		sine[3894]=512;
		sine[3895]=768;
		sine[3896]=0;
		sine[3897]=256;
		sine[3898]=512;
		sine[3899]=768;
		sine[3900]=0;
		sine[3901]=256;
		sine[3902]=512;
		sine[3903]=768;
		sine[3904]=0;
		sine[3905]=256;
		sine[3906]=512;
		sine[3907]=768;
		sine[3908]=0;
		sine[3909]=256;
		sine[3910]=512;
		sine[3911]=768;
		sine[3912]=0;
		sine[3913]=256;
		sine[3914]=512;
		sine[3915]=768;
		sine[3916]=0;
		sine[3917]=256;
		sine[3918]=512;
		sine[3919]=768;
		sine[3920]=0;
		sine[3921]=256;
		sine[3922]=512;
		sine[3923]=768;
		sine[3924]=0;
		sine[3925]=256;
		sine[3926]=512;
		sine[3927]=768;
		sine[3928]=0;
		sine[3929]=256;
		sine[3930]=512;
		sine[3931]=768;
		sine[3932]=0;
		sine[3933]=256;
		sine[3934]=512;
		sine[3935]=768;
		sine[3936]=0;
		sine[3937]=256;
		sine[3938]=512;
		sine[3939]=768;
		sine[3940]=0;
		sine[3941]=256;
		sine[3942]=512;
		sine[3943]=768;
		sine[3944]=0;
		sine[3945]=256;
		sine[3946]=512;
		sine[3947]=768;
		sine[3948]=0;
		sine[3949]=256;
		sine[3950]=512;
		sine[3951]=768;
		sine[3952]=0;
		sine[3953]=256;
		sine[3954]=512;
		sine[3955]=768;
		sine[3956]=0;
		sine[3957]=256;
		sine[3958]=512;
		sine[3959]=768;
		sine[3960]=0;
		sine[3961]=256;
		sine[3962]=512;
		sine[3963]=768;
		sine[3964]=0;
		sine[3965]=256;
		sine[3966]=512;
		sine[3967]=768;
		sine[3968]=0;
		sine[3969]=256;
		sine[3970]=512;
		sine[3971]=768;
		sine[3972]=0;
		sine[3973]=256;
		sine[3974]=512;
		sine[3975]=768;
		sine[3976]=0;
		sine[3977]=256;
		sine[3978]=512;
		sine[3979]=768;
		sine[3980]=0;
		sine[3981]=256;
		sine[3982]=512;
		sine[3983]=768;
		sine[3984]=0;
		sine[3985]=256;
		sine[3986]=512;
		sine[3987]=768;
		sine[3988]=0;
		sine[3989]=256;
		sine[3990]=512;
		sine[3991]=768;
		sine[3992]=0;
		sine[3993]=256;
		sine[3994]=512;
		sine[3995]=768;
		sine[3996]=0;
		sine[3997]=256;
		sine[3998]=512;
		sine[3999]=768;
		sine[4000]=0;
		sine[4001]=256;
		sine[4002]=512;
		sine[4003]=768;
		sine[4004]=0;
		sine[4005]=256;
		sine[4006]=512;
		sine[4007]=768;
		sine[4008]=0;
		sine[4009]=256;
		sine[4010]=512;
		sine[4011]=768;
		sine[4012]=0;
		sine[4013]=256;
		sine[4014]=512;
		sine[4015]=768;
		sine[4016]=0;
		sine[4017]=256;
		sine[4018]=512;
		sine[4019]=768;
		sine[4020]=0;
		sine[4021]=256;
		sine[4022]=512;
		sine[4023]=768;
		sine[4024]=0;
		sine[4025]=256;
		sine[4026]=512;
		sine[4027]=768;
		sine[4028]=0;
		sine[4029]=256;
		sine[4030]=512;
		sine[4031]=768;
		sine[4032]=0;
		sine[4033]=256;
		sine[4034]=512;
		sine[4035]=768;
		sine[4036]=0;
		sine[4037]=256;
		sine[4038]=512;
		sine[4039]=768;
		sine[4040]=0;
		sine[4041]=256;
		sine[4042]=512;
		sine[4043]=768;
		sine[4044]=0;
		sine[4045]=256;
		sine[4046]=512;
		sine[4047]=768;
		sine[4048]=0;
		sine[4049]=256;
		sine[4050]=512;
		sine[4051]=768;
		sine[4052]=0;
		sine[4053]=256;
		sine[4054]=512;
		sine[4055]=768;
		sine[4056]=0;
		sine[4057]=256;
		sine[4058]=512;
		sine[4059]=768;
		sine[4060]=0;
		sine[4061]=256;
		sine[4062]=512;
		sine[4063]=768;
		sine[4064]=0;
		sine[4065]=256;
		sine[4066]=512;
		sine[4067]=768;
		sine[4068]=0;
		sine[4069]=256;
		sine[4070]=512;
		sine[4071]=768;
		sine[4072]=0;
		sine[4073]=256;
		sine[4074]=512;
		sine[4075]=768;
		sine[4076]=0;
		sine[4077]=256;
		sine[4078]=512;
		sine[4079]=768;
		sine[4080]=0;
		sine[4081]=256;
		sine[4082]=512;
		sine[4083]=768;
		sine[4084]=0;
		sine[4085]=256;
		sine[4086]=512;
		sine[4087]=768;
		sine[4088]=0;
		sine[4089]=256;
		sine[4090]=512;
		sine[4091]=768;
		sine[4092]=0;
		sine[4093]=256;
		sine[4094]=512;
		sine[4095]=768;
*/

		//250Hz samples
		pattern1[0] = 0x800;
		pattern1[1] = 0x803;
		pattern1[2] = 0x806;
		pattern1[3] = 0x809;
		pattern1[4] = 0x80c;
		pattern1[5] = 0x80f;
		pattern1[6] = 0x812;
		pattern1[7] = 0x815;
		pattern1[8] = 0x819;
		pattern1[9] = 0x81c;
		pattern1[10] = 0x81f;
		pattern1[11] = 0x822;
		pattern1[12] = 0x825;
		pattern1[13] = 0x828;
		pattern1[14] = 0x82b;
		pattern1[15] = 0x82f;
		pattern1[16] = 0x832;
		pattern1[17] = 0x835;
		pattern1[18] = 0x838;
		pattern1[19] = 0x83b;
		pattern1[20] = 0x83e;
		pattern1[21] = 0x841;
		pattern1[22] = 0x845;
		pattern1[23] = 0x848;
		pattern1[24] = 0x84b;
		pattern1[25] = 0x84e;
		pattern1[26] = 0x851;
		pattern1[27] = 0x854;
		pattern1[28] = 0x857;
		pattern1[29] = 0x85b;
		pattern1[30] = 0x85e;
		pattern1[31] = 0x861;
		pattern1[32] = 0x864;
		pattern1[33] = 0x867;
		pattern1[34] = 0x86a;
		pattern1[35] = 0x86d;
		pattern1[36] = 0x871;
		pattern1[37] = 0x874;
		pattern1[38] = 0x877;
		pattern1[39] = 0x87a;
		pattern1[40] = 0x87d;
		pattern1[41] = 0x880;
		pattern1[42] = 0x883;
		pattern1[43] = 0x886;
		pattern1[44] = 0x88a;
		pattern1[45] = 0x88d;
		pattern1[46] = 0x890;
		pattern1[47] = 0x893;
		pattern1[48] = 0x896;
		pattern1[49] = 0x899;
		pattern1[50] = 0x89c;
		pattern1[51] = 0x8a0;
		pattern1[52] = 0x8a3;
		pattern1[53] = 0x8a6;
		pattern1[54] = 0x8a9;
		pattern1[55] = 0x8ac;
		pattern1[56] = 0x8af;
		pattern1[57] = 0x8b2;
		pattern1[58] = 0x8b5;
		pattern1[59] = 0x8b9;
		pattern1[60] = 0x8bc;
		pattern1[61] = 0x8bf;
		pattern1[62] = 0x8c2;
		pattern1[63] = 0x8c5;
		pattern1[64] = 0x8c8;
		pattern1[65] = 0x8cb;
		pattern1[66] = 0x8ce;
		pattern1[67] = 0x8d2;
		pattern1[68] = 0x8d5;
		pattern1[69] = 0x8d8;
		pattern1[70] = 0x8db;
		pattern1[71] = 0x8de;
		pattern1[72] = 0x8e1;
		pattern1[73] = 0x8e4;
		pattern1[74] = 0x8e7;
		pattern1[75] = 0x8eb;
		pattern1[76] = 0x8ee;
		pattern1[77] = 0x8f1;
		pattern1[78] = 0x8f4;
		pattern1[79] = 0x8f7;
		pattern1[80] = 0x8fa;
		pattern1[81] = 0x8fd;
		pattern1[82] = 0x900;
		pattern1[83] = 0x903;
		pattern1[84] = 0x907;
		pattern1[85] = 0x90a;
		pattern1[86] = 0x90d;
		pattern1[87] = 0x910;
		pattern1[88] = 0x913;
		pattern1[89] = 0x916;
		pattern1[90] = 0x919;
		pattern1[91] = 0x91c;
		pattern1[92] = 0x91f;
		pattern1[93] = 0x923;
		pattern1[94] = 0x926;
		pattern1[95] = 0x929;
		pattern1[96] = 0x92c;
		pattern1[97] = 0x92f;
		pattern1[98] = 0x932;
		pattern1[99] = 0x935;
		pattern1[100] = 0x938;
		pattern1[101] = 0x93b;
		pattern1[102] = 0x93f;
		pattern1[103] = 0x942;
		pattern1[104] = 0x945;
		pattern1[105] = 0x948;
		pattern1[106] = 0x94b;
		pattern1[107] = 0x94e;
		pattern1[108] = 0x951;
		pattern1[109] = 0x954;
		pattern1[110] = 0x957;
		pattern1[111] = 0x95a;
		pattern1[112] = 0x95e;
		pattern1[113] = 0x961;
		pattern1[114] = 0x964;
		pattern1[115] = 0x967;
		pattern1[116] = 0x96a;
		pattern1[117] = 0x96d;
		pattern1[118] = 0x970;
		pattern1[119] = 0x973;
		pattern1[120] = 0x976;
		pattern1[121] = 0x979;
		pattern1[122] = 0x97c;
		pattern1[123] = 0x980;
		pattern1[124] = 0x983;
		pattern1[125] = 0x986;
		pattern1[126] = 0x989;
		pattern1[127] = 0x98c;
		pattern1[128] = 0x98f;
		pattern1[129] = 0x992;
		pattern1[130] = 0x995;
		pattern1[131] = 0x998;
		pattern1[132] = 0x99b;
		pattern1[133] = 0x99e;
		pattern1[134] = 0x9a1;
		pattern1[135] = 0x9a4;
		pattern1[136] = 0x9a8;
		pattern1[137] = 0x9ab;
		pattern1[138] = 0x9ae;
		pattern1[139] = 0x9b1;
		pattern1[140] = 0x9b4;
		pattern1[141] = 0x9b7;
		pattern1[142] = 0x9ba;
		pattern1[143] = 0x9bd;
		pattern1[144] = 0x9c0;
		pattern1[145] = 0x9c3;
		pattern1[146] = 0x9c6;
		pattern1[147] = 0x9c9;
		pattern1[148] = 0x9cc;
		pattern1[149] = 0x9cf;
		pattern1[150] = 0x9d2;
		pattern1[151] = 0x9d6;
		pattern1[152] = 0x9d9;
		pattern1[153] = 0x9dc;
		pattern1[154] = 0x9df;
		pattern1[155] = 0x9e2;
		pattern1[156] = 0x9e5;
		pattern1[157] = 0x9e8;
		pattern1[158] = 0x9eb;
		pattern1[159] = 0x9ee;
		pattern1[160] = 0x9f1;
		pattern1[161] = 0x9f4;
		pattern1[162] = 0x9f7;
		pattern1[163] = 0x9fa;
		pattern1[164] = 0x9fd;
		pattern1[165] = 0xa00;
		pattern1[166] = 0xa03;
		pattern1[167] = 0xa06;
		pattern1[168] = 0xa09;
		pattern1[169] = 0xa0c;
		pattern1[170] = 0xa0f;
		pattern1[171] = 0xa12;
		pattern1[172] = 0xa15;
		pattern1[173] = 0xa19;
		pattern1[174] = 0xa1c;
		pattern1[175] = 0xa1f;
		pattern1[176] = 0xa22;
		pattern1[177] = 0xa25;
		pattern1[178] = 0xa28;
		pattern1[179] = 0xa2b;
		pattern1[180] = 0xa2e;
		pattern1[181] = 0xa31;
		pattern1[182] = 0xa34;
		pattern1[183] = 0xa37;
		pattern1[184] = 0xa3a;
		pattern1[185] = 0xa3d;
		pattern1[186] = 0xa40;
		pattern1[187] = 0xa43;
		pattern1[188] = 0xa46;
		pattern1[189] = 0xa49;
		pattern1[190] = 0xa4c;
		pattern1[191] = 0xa4f;
		pattern1[192] = 0xa52;
		pattern1[193] = 0xa55;
		pattern1[194] = 0xa58;
		pattern1[195] = 0xa5b;
		pattern1[196] = 0xa5e;
		pattern1[197] = 0xa61;
		pattern1[198] = 0xa64;
		pattern1[199] = 0xa67;
		pattern1[200] = 0xa6a;
		pattern1[201] = 0xa6d;
		pattern1[202] = 0xa70;
		pattern1[203] = 0xa73;
		pattern1[204] = 0xa76;
		pattern1[205] = 0xa79;
		pattern1[206] = 0xa7c;
		pattern1[207] = 0xa7f;
		pattern1[208] = 0xa82;
		pattern1[209] = 0xa85;
		pattern1[210] = 0xa88;
		pattern1[211] = 0xa8b;
		pattern1[212] = 0xa8e;
		pattern1[213] = 0xa91;
		pattern1[214] = 0xa94;
		pattern1[215] = 0xa97;
		pattern1[216] = 0xa9a;
		pattern1[217] = 0xa9d;
		pattern1[218] = 0xaa0;
		pattern1[219] = 0xaa2;
		pattern1[220] = 0xaa5;
		pattern1[221] = 0xaa8;
		pattern1[222] = 0xaab;
		pattern1[223] = 0xaae;
		pattern1[224] = 0xab1;
		pattern1[225] = 0xab4;
		pattern1[226] = 0xab7;
		pattern1[227] = 0xaba;
		pattern1[228] = 0xabd;
		pattern1[229] = 0xac0;
		pattern1[230] = 0xac3;
		pattern1[231] = 0xac6;
		pattern1[232] = 0xac9;
		pattern1[233] = 0xacc;
		pattern1[234] = 0xacf;
		pattern1[235] = 0xad2;
		pattern1[236] = 0xad5;
		pattern1[237] = 0xad8;
		pattern1[238] = 0xadb;
		pattern1[239] = 0xadd;
		pattern1[240] = 0xae0;
		pattern1[241] = 0xae3;
		pattern1[242] = 0xae6;
		pattern1[243] = 0xae9;
		pattern1[244] = 0xaec;
		pattern1[245] = 0xaef;
		pattern1[246] = 0xaf2;
		pattern1[247] = 0xaf5;
		pattern1[248] = 0xaf8;
		pattern1[249] = 0xafb;
		pattern1[250] = 0xafe;
		pattern1[251] = 0xb01;
		pattern1[252] = 0xb03;
		pattern1[253] = 0xb06;
		pattern1[254] = 0xb09;
		pattern1[255] = 0xb0c;
		pattern1[256] = 0xb0f;
		pattern1[257] = 0xb12;
		pattern1[258] = 0xb15;
		pattern1[259] = 0xb18;
		pattern1[260] = 0xb1b;
		pattern1[261] = 0xb1e;
		pattern1[262] = 0xb20;
		pattern1[263] = 0xb23;
		pattern1[264] = 0xb26;
		pattern1[265] = 0xb29;
		pattern1[266] = 0xb2c;
		pattern1[267] = 0xb2f;
		pattern1[268] = 0xb32;
		pattern1[269] = 0xb35;
		pattern1[270] = 0xb37;
		pattern1[271] = 0xb3a;
		pattern1[272] = 0xb3d;
		pattern1[273] = 0xb40;
		pattern1[274] = 0xb43;
		pattern1[275] = 0xb46;
		pattern1[276] = 0xb49;
		pattern1[277] = 0xb4c;
		pattern1[278] = 0xb4e;
		pattern1[279] = 0xb51;
		pattern1[280] = 0xb54;
		pattern1[281] = 0xb57;
		pattern1[282] = 0xb5a;
		pattern1[283] = 0xb5d;
		pattern1[284] = 0xb60;
		pattern1[285] = 0xb62;
		pattern1[286] = 0xb65;
		pattern1[287] = 0xb68;
		pattern1[288] = 0xb6b;
		pattern1[289] = 0xb6e;
		pattern1[290] = 0xb71;
		pattern1[291] = 0xb73;
		pattern1[292] = 0xb76;
		pattern1[293] = 0xb79;
		pattern1[294] = 0xb7c;
		pattern1[295] = 0xb7f;
		pattern1[296] = 0xb82;
		pattern1[297] = 0xb84;
		pattern1[298] = 0xb87;
		pattern1[299] = 0xb8a;
		pattern1[300] = 0xb8d;
		pattern1[301] = 0xb90;
		pattern1[302] = 0xb92;
		pattern1[303] = 0xb95;
		pattern1[304] = 0xb98;
		pattern1[305] = 0xb9b;
		pattern1[306] = 0xb9e;
		pattern1[307] = 0xba0;
		pattern1[308] = 0xba3;
		pattern1[309] = 0xba6;
		pattern1[310] = 0xba9;
		pattern1[311] = 0xbac;
		pattern1[312] = 0xbae;
		pattern1[313] = 0xbb1;
		pattern1[314] = 0xbb4;
		pattern1[315] = 0xbb7;
		pattern1[316] = 0xbba;
		pattern1[317] = 0xbbc;
		pattern1[318] = 0xbbf;
		pattern1[319] = 0xbc2;
		pattern1[320] = 0xbc5;
		pattern1[321] = 0xbc7;
		pattern1[322] = 0xbca;
		pattern1[323] = 0xbcd;
		pattern1[324] = 0xbd0;
		pattern1[325] = 0xbd3;
		pattern1[326] = 0xbd5;
		pattern1[327] = 0xbd8;
		pattern1[328] = 0xbdb;
		pattern1[329] = 0xbde;
		pattern1[330] = 0xbe0;
		pattern1[331] = 0xbe3;
		pattern1[332] = 0xbe6;
		pattern1[333] = 0xbe9;
		pattern1[334] = 0xbeb;
		pattern1[335] = 0xbee;
		pattern1[336] = 0xbf1;
		pattern1[337] = 0xbf3;
		pattern1[338] = 0xbf6;
		pattern1[339] = 0xbf9;
		pattern1[340] = 0xbfc;
		pattern1[341] = 0xbfe;
		pattern1[342] = 0xc01;
		pattern1[343] = 0xc04;
		pattern1[344] = 0xc06;
		pattern1[345] = 0xc09;
		pattern1[346] = 0xc0c;
		pattern1[347] = 0xc0f;
		pattern1[348] = 0xc11;
		pattern1[349] = 0xc14;
		pattern1[350] = 0xc17;
		pattern1[351] = 0xc19;
		pattern1[352] = 0xc1c;
		pattern1[353] = 0xc1f;
		pattern1[354] = 0xc22;
		pattern1[355] = 0xc24;
		pattern1[356] = 0xc27;
		pattern1[357] = 0xc2a;
		pattern1[358] = 0xc2c;
		pattern1[359] = 0xc2f;
		pattern1[360] = 0xc32;
		pattern1[361] = 0xc34;
		pattern1[362] = 0xc37;
		pattern1[363] = 0xc3a;
		pattern1[364] = 0xc3c;
		pattern1[365] = 0xc3f;
		pattern1[366] = 0xc42;
		pattern1[367] = 0xc44;
		pattern1[368] = 0xc47;
		pattern1[369] = 0xc4a;
		pattern1[370] = 0xc4c;
		pattern1[371] = 0xc4f;
		pattern1[372] = 0xc52;
		pattern1[373] = 0xc54;
		pattern1[374] = 0xc57;
		pattern1[375] = 0xc59;
		pattern1[376] = 0xc5c;
		pattern1[377] = 0xc5f;
		pattern1[378] = 0xc61;
		pattern1[379] = 0xc64;
		pattern1[380] = 0xc67;
		pattern1[381] = 0xc69;
		pattern1[382] = 0xc6c;
		pattern1[383] = 0xc6e;
		pattern1[384] = 0xc71;
		pattern1[385] = 0xc74;
		pattern1[386] = 0xc76;
		pattern1[387] = 0xc79;
		pattern1[388] = 0xc7b;
		pattern1[389] = 0xc7e;
		pattern1[390] = 0xc81;
		pattern1[391] = 0xc83;
		pattern1[392] = 0xc86;
		pattern1[393] = 0xc88;
		pattern1[394] = 0xc8b;
		pattern1[395] = 0xc8e;
		pattern1[396] = 0xc90;
		pattern1[397] = 0xc93;
		pattern1[398] = 0xc95;
		pattern1[399] = 0xc98;
		pattern1[400] = 0xc9a;
		pattern1[401] = 0xc9d;
		pattern1[402] = 0xca0;
		pattern1[403] = 0xca2;
		pattern1[404] = 0xca5;
		pattern1[405] = 0xca7;
		pattern1[406] = 0xcaa;
		pattern1[407] = 0xcac;
		pattern1[408] = 0xcaf;
		pattern1[409] = 0xcb1;
		pattern1[410] = 0xcb4;
		pattern1[411] = 0xcb7;
		pattern1[412] = 0xcb9;
		pattern1[413] = 0xcbc;
		pattern1[414] = 0xcbe;
		pattern1[415] = 0xcc1;
		pattern1[416] = 0xcc3;
		pattern1[417] = 0xcc6;
		pattern1[418] = 0xcc8;
		pattern1[419] = 0xccb;
		pattern1[420] = 0xccd;
		pattern1[421] = 0xcd0;
		pattern1[422] = 0xcd2;
		pattern1[423] = 0xcd5;
		pattern1[424] = 0xcd7;
		pattern1[425] = 0xcda;
		pattern1[426] = 0xcdc;
		pattern1[427] = 0xcdf;
		pattern1[428] = 0xce1;
		pattern1[429] = 0xce4;
		pattern1[430] = 0xce6;
		pattern1[431] = 0xce9;
		pattern1[432] = 0xceb;
		pattern1[433] = 0xcee;
		pattern1[434] = 0xcf0;
		pattern1[435] = 0xcf3;
		pattern1[436] = 0xcf5;
		pattern1[437] = 0xcf8;
		pattern1[438] = 0xcfa;
		pattern1[439] = 0xcfc;
		pattern1[440] = 0xcff;
		pattern1[441] = 0xd01;
		pattern1[442] = 0xd04;
		pattern1[443] = 0xd06;
		pattern1[444] = 0xd09;
		pattern1[445] = 0xd0b;
		pattern1[446] = 0xd0e;
		pattern1[447] = 0xd10;
		pattern1[448] = 0xd12;
		pattern1[449] = 0xd15;
		pattern1[450] = 0xd17;
		pattern1[451] = 0xd1a;
		pattern1[452] = 0xd1c;
		pattern1[453] = 0xd1f;
		pattern1[454] = 0xd21;
		pattern1[455] = 0xd23;
		pattern1[456] = 0xd26;
		pattern1[457] = 0xd28;
		pattern1[458] = 0xd2b;
		pattern1[459] = 0xd2d;
		pattern1[460] = 0xd2f;
		pattern1[461] = 0xd32;
		pattern1[462] = 0xd34;
		pattern1[463] = 0xd36;
		pattern1[464] = 0xd39;
		pattern1[465] = 0xd3b;
		pattern1[466] = 0xd3e;
		pattern1[467] = 0xd40;
		pattern1[468] = 0xd42;
		pattern1[469] = 0xd45;
		pattern1[470] = 0xd47;
		pattern1[471] = 0xd49;
		pattern1[472] = 0xd4c;
		pattern1[473] = 0xd4e;
		pattern1[474] = 0xd50;
		pattern1[475] = 0xd53;
		pattern1[476] = 0xd55;
		pattern1[477] = 0xd58;
		pattern1[478] = 0xd5a;
		pattern1[479] = 0xd5c;
		pattern1[480] = 0xd5f;
		pattern1[481] = 0xd61;
		pattern1[482] = 0xd63;
		pattern1[483] = 0xd65;
		pattern1[484] = 0xd68;
		pattern1[485] = 0xd6a;
		pattern1[486] = 0xd6c;
		pattern1[487] = 0xd6f;
		pattern1[488] = 0xd71;
		pattern1[489] = 0xd73;
		pattern1[490] = 0xd76;
		pattern1[491] = 0xd78;
		pattern1[492] = 0xd7a;
		pattern1[493] = 0xd7c;
		pattern1[494] = 0xd7f;
		pattern1[495] = 0xd81;
		pattern1[496] = 0xd83;
		pattern1[497] = 0xd86;
		pattern1[498] = 0xd88;
		pattern1[499] = 0xd8a;
		pattern1[500] = 0xd8c;
		pattern1[501] = 0xd8f;
		pattern1[502] = 0xd91;
		pattern1[503] = 0xd93;
		pattern1[504] = 0xd95;
		pattern1[505] = 0xd98;
		pattern1[506] = 0xd9a;
		pattern1[507] = 0xd9c;
		pattern1[508] = 0xd9e;
		pattern1[509] = 0xda1;
		pattern1[510] = 0xda3;
		pattern1[511] = 0xda5;
		pattern1[512] = 0xda7;
		pattern1[513] = 0xdaa;
		pattern1[514] = 0xdac;
		pattern1[515] = 0xdae;
		pattern1[516] = 0xdb0;
		pattern1[517] = 0xdb2;
		pattern1[518] = 0xdb5;
		pattern1[519] = 0xdb7;
		pattern1[520] = 0xdb9;
		pattern1[521] = 0xdbb;
		pattern1[522] = 0xdbd;
		pattern1[523] = 0xdc0;
		pattern1[524] = 0xdc2;
		pattern1[525] = 0xdc4;
		pattern1[526] = 0xdc6;
		pattern1[527] = 0xdc8;
		pattern1[528] = 0xdca;
		pattern1[529] = 0xdcd;
		pattern1[530] = 0xdcf;
		pattern1[531] = 0xdd1;
		pattern1[532] = 0xdd3;
		pattern1[533] = 0xdd5;
		pattern1[534] = 0xdd7;
		pattern1[535] = 0xdd9;
		pattern1[536] = 0xddc;
		pattern1[537] = 0xdde;
		pattern1[538] = 0xde0;
		pattern1[539] = 0xde2;
		pattern1[540] = 0xde4;
		pattern1[541] = 0xde6;
		pattern1[542] = 0xde8;
		pattern1[543] = 0xdea;
		pattern1[544] = 0xded;
		pattern1[545] = 0xdef;
		pattern1[546] = 0xdf1;
		pattern1[547] = 0xdf3;
		pattern1[548] = 0xdf5;
		pattern1[549] = 0xdf7;
		pattern1[550] = 0xdf9;
		pattern1[551] = 0xdfb;
		pattern1[552] = 0xdfd;
		pattern1[553] = 0xdff;
		pattern1[554] = 0xe02;
		pattern1[555] = 0xe04;
		pattern1[556] = 0xe06;
		pattern1[557] = 0xe08;
		pattern1[558] = 0xe0a;
		pattern1[559] = 0xe0c;
		pattern1[560] = 0xe0e;
		pattern1[561] = 0xe10;
		pattern1[562] = 0xe12;
		pattern1[563] = 0xe14;
		pattern1[564] = 0xe16;
		pattern1[565] = 0xe18;
		pattern1[566] = 0xe1a;
		pattern1[567] = 0xe1c;
		pattern1[568] = 0xe1e;
		pattern1[569] = 0xe20;
		pattern1[570] = 0xe22;
		pattern1[571] = 0xe24;
		pattern1[572] = 0xe26;
		pattern1[573] = 0xe28;
		pattern1[574] = 0xe2a;
		pattern1[575] = 0xe2c;
		pattern1[576] = 0xe2e;
		pattern1[577] = 0xe30;
		pattern1[578] = 0xe32;
		pattern1[579] = 0xe34;
		pattern1[580] = 0xe36;
		pattern1[581] = 0xe38;
		pattern1[582] = 0xe3a;
		pattern1[583] = 0xe3c;
		pattern1[584] = 0xe3e;
		pattern1[585] = 0xe40;
		pattern1[586] = 0xe42;
		pattern1[587] = 0xe44;
		pattern1[588] = 0xe46;
		pattern1[589] = 0xe48;
		pattern1[590] = 0xe4a;
		pattern1[591] = 0xe4c;
		pattern1[592] = 0xe4e;
		pattern1[593] = 0xe50;
		pattern1[594] = 0xe51;
		pattern1[595] = 0xe53;
		pattern1[596] = 0xe55;
		pattern1[597] = 0xe57;
		pattern1[598] = 0xe59;
		pattern1[599] = 0xe5b;
		pattern1[600] = 0xe5d;
		pattern1[601] = 0xe5f;
		pattern1[602] = 0xe61;
		pattern1[603] = 0xe63;
		pattern1[604] = 0xe65;
		pattern1[605] = 0xe66;
		pattern1[606] = 0xe68;
		pattern1[607] = 0xe6a;
		pattern1[608] = 0xe6c;
		pattern1[609] = 0xe6e;
		pattern1[610] = 0xe70;
		pattern1[611] = 0xe72;
		pattern1[612] = 0xe74;
		pattern1[613] = 0xe75;
		pattern1[614] = 0xe77;
		pattern1[615] = 0xe79;
		pattern1[616] = 0xe7b;
		pattern1[617] = 0xe7d;
		pattern1[618] = 0xe7f;
		pattern1[619] = 0xe80;
		pattern1[620] = 0xe82;
		pattern1[621] = 0xe84;
		pattern1[622] = 0xe86;
		pattern1[623] = 0xe88;
		pattern1[624] = 0xe8a;
		pattern1[625] = 0xe8b;
		pattern1[626] = 0xe8d;
		pattern1[627] = 0xe8f;
		pattern1[628] = 0xe91;
		pattern1[629] = 0xe92;
		pattern1[630] = 0xe94;
		pattern1[631] = 0xe96;
		pattern1[632] = 0xe98;
		pattern1[633] = 0xe9a;
		pattern1[634] = 0xe9b;
		pattern1[635] = 0xe9d;
		pattern1[636] = 0xe9f;
		pattern1[637] = 0xea1;
		pattern1[638] = 0xea2;
		pattern1[639] = 0xea4;
		pattern1[640] = 0xea6;
		pattern1[641] = 0xea8;
		pattern1[642] = 0xea9;
		pattern1[643] = 0xeab;
		pattern1[644] = 0xead;
		pattern1[645] = 0xeaf;
		pattern1[646] = 0xeb0;
		pattern1[647] = 0xeb2;
		pattern1[648] = 0xeb4;
		pattern1[649] = 0xeb5;
		pattern1[650] = 0xeb7;
		pattern1[651] = 0xeb9;
		pattern1[652] = 0xebb;
		pattern1[653] = 0xebc;
		pattern1[654] = 0xebe;
		pattern1[655] = 0xec0;
		pattern1[656] = 0xec1;
		pattern1[657] = 0xec3;
		pattern1[658] = 0xec5;
		pattern1[659] = 0xec6;
		pattern1[660] = 0xec8;
		pattern1[661] = 0xeca;
		pattern1[662] = 0xecb;
		pattern1[663] = 0xecd;
		pattern1[664] = 0xecf;
		pattern1[665] = 0xed0;
		pattern1[666] = 0xed2;
		pattern1[667] = 0xed4;
		pattern1[668] = 0xed5;
		pattern1[669] = 0xed7;
		pattern1[670] = 0xed8;
		pattern1[671] = 0xeda;
		pattern1[672] = 0xedc;
		pattern1[673] = 0xedd;
		pattern1[674] = 0xedf;
		pattern1[675] = 0xee1;
		pattern1[676] = 0xee2;
		pattern1[677] = 0xee4;
		pattern1[678] = 0xee5;
		pattern1[679] = 0xee7;
		pattern1[680] = 0xee8;
		pattern1[681] = 0xeea;
		pattern1[682] = 0xeec;
		pattern1[683] = 0xeed;
		pattern1[684] = 0xeef;
		pattern1[685] = 0xef0;
		pattern1[686] = 0xef2;
		pattern1[687] = 0xef3;
		pattern1[688] = 0xef5;
		pattern1[689] = 0xef7;
		pattern1[690] = 0xef8;
		pattern1[691] = 0xefa;
		pattern1[692] = 0xefb;
		pattern1[693] = 0xefd;
		pattern1[694] = 0xefe;
		pattern1[695] = 0xf00;
		pattern1[696] = 0xf01;
		pattern1[697] = 0xf03;
		pattern1[698] = 0xf04;
		pattern1[699] = 0xf06;
		pattern1[700] = 0xf07;
		pattern1[701] = 0xf09;
		pattern1[702] = 0xf0a;
		pattern1[703] = 0xf0c;
		pattern1[704] = 0xf0d;
		pattern1[705] = 0xf0f;
		pattern1[706] = 0xf10;
		pattern1[707] = 0xf12;
		pattern1[708] = 0xf13;
		pattern1[709] = 0xf15;
		pattern1[710] = 0xf16;
		pattern1[711] = 0xf17;
		pattern1[712] = 0xf19;
		pattern1[713] = 0xf1a;
		pattern1[714] = 0xf1c;
		pattern1[715] = 0xf1d;
		pattern1[716] = 0xf1f;
		pattern1[717] = 0xf20;
		pattern1[718] = 0xf22;
		pattern1[719] = 0xf23;
		pattern1[720] = 0xf24;
		pattern1[721] = 0xf26;
		pattern1[722] = 0xf27;
		pattern1[723] = 0xf29;
		pattern1[724] = 0xf2a;
		pattern1[725] = 0xf2b;
		pattern1[726] = 0xf2d;
		pattern1[727] = 0xf2e;
		pattern1[728] = 0xf30;
		pattern1[729] = 0xf31;
		pattern1[730] = 0xf32;
		pattern1[731] = 0xf34;
		pattern1[732] = 0xf35;
		pattern1[733] = 0xf36;
		pattern1[734] = 0xf38;
		pattern1[735] = 0xf39;
		pattern1[736] = 0xf3a;
		pattern1[737] = 0xf3c;
		pattern1[738] = 0xf3d;
		pattern1[739] = 0xf3e;
		pattern1[740] = 0xf40;
		pattern1[741] = 0xf41;
		pattern1[742] = 0xf42;
		pattern1[743] = 0xf44;
		pattern1[744] = 0xf45;
		pattern1[745] = 0xf46;
		pattern1[746] = 0xf48;
		pattern1[747] = 0xf49;
		pattern1[748] = 0xf4a;
		pattern1[749] = 0xf4c;
		pattern1[750] = 0xf4d;
		pattern1[751] = 0xf4e;
		pattern1[752] = 0xf4f;
		pattern1[753] = 0xf51;
		pattern1[754] = 0xf52;
		pattern1[755] = 0xf53;
		pattern1[756] = 0xf54;
		pattern1[757] = 0xf56;
		pattern1[758] = 0xf57;
		pattern1[759] = 0xf58;
		pattern1[760] = 0xf59;
		pattern1[761] = 0xf5b;
		pattern1[762] = 0xf5c;
		pattern1[763] = 0xf5d;
		pattern1[764] = 0xf5e;
		pattern1[765] = 0xf60;
		pattern1[766] = 0xf61;
		pattern1[767] = 0xf62;
		pattern1[768] = 0xf63;
		pattern1[769] = 0xf64;
		pattern1[770] = 0xf66;
		pattern1[771] = 0xf67;
		pattern1[772] = 0xf68;
		pattern1[773] = 0xf69;
		pattern1[774] = 0xf6a;
		pattern1[775] = 0xf6b;
		pattern1[776] = 0xf6d;
		pattern1[777] = 0xf6e;
		pattern1[778] = 0xf6f;
		pattern1[779] = 0xf70;
		pattern1[780] = 0xf71;
		pattern1[781] = 0xf72;
		pattern1[782] = 0xf74;
		pattern1[783] = 0xf75;
		pattern1[784] = 0xf76;
		pattern1[785] = 0xf77;
		pattern1[786] = 0xf78;
		pattern1[787] = 0xf79;
		pattern1[788] = 0xf7a;
		pattern1[789] = 0xf7b;
		pattern1[790] = 0xf7d;
		pattern1[791] = 0xf7e;
		pattern1[792] = 0xf7f;
		pattern1[793] = 0xf80;
		pattern1[794] = 0xf81;
		pattern1[795] = 0xf82;
		pattern1[796] = 0xf83;
		pattern1[797] = 0xf84;
		pattern1[798] = 0xf85;
		pattern1[799] = 0xf86;
		pattern1[800] = 0xf87;
		pattern1[801] = 0xf88;
		pattern1[802] = 0xf89;
		pattern1[803] = 0xf8a;
		pattern1[804] = 0xf8c;
		pattern1[805] = 0xf8d;
		pattern1[806] = 0xf8e;
		pattern1[807] = 0xf8f;
		pattern1[808] = 0xf90;
		pattern1[809] = 0xf91;
		pattern1[810] = 0xf92;
		pattern1[811] = 0xf93;
		pattern1[812] = 0xf94;
		pattern1[813] = 0xf95;
		pattern1[814] = 0xf96;
		pattern1[815] = 0xf97;
		pattern1[816] = 0xf98;
		pattern1[817] = 0xf99;
		pattern1[818] = 0xf9a;
		pattern1[819] = 0xf9b;
		pattern1[820] = 0xf9c;
		pattern1[821] = 0xf9d;
		pattern1[822] = 0xf9d;
		pattern1[823] = 0xf9e;
		pattern1[824] = 0xf9f;
		pattern1[825] = 0xfa0;
		pattern1[826] = 0xfa1;
		pattern1[827] = 0xfa2;
		pattern1[828] = 0xfa3;
		pattern1[829] = 0xfa4;
		pattern1[830] = 0xfa5;
		pattern1[831] = 0xfa6;
		pattern1[832] = 0xfa7;
		pattern1[833] = 0xfa8;
		pattern1[834] = 0xfa9;
		pattern1[835] = 0xfaa;
		pattern1[836] = 0xfaa;
		pattern1[837] = 0xfab;
		pattern1[838] = 0xfac;
		pattern1[839] = 0xfad;
		pattern1[840] = 0xfae;
		pattern1[841] = 0xfaf;
		pattern1[842] = 0xfb0;
		pattern1[843] = 0xfb1;
		pattern1[844] = 0xfb1;
		pattern1[845] = 0xfb2;
		pattern1[846] = 0xfb3;
		pattern1[847] = 0xfb4;
		pattern1[848] = 0xfb5;
		pattern1[849] = 0xfb6;
		pattern1[850] = 0xfb6;
		pattern1[851] = 0xfb7;
		pattern1[852] = 0xfb8;
		pattern1[853] = 0xfb9;
		pattern1[854] = 0xfba;
		pattern1[855] = 0xfbb;
		pattern1[856] = 0xfbb;
		pattern1[857] = 0xfbc;
		pattern1[858] = 0xfbd;
		pattern1[859] = 0xfbe;
		pattern1[860] = 0xfbf;
		pattern1[861] = 0xfbf;
		pattern1[862] = 0xfc0;
		pattern1[863] = 0xfc1;
		pattern1[864] = 0xfc2;
		pattern1[865] = 0xfc2;
		pattern1[866] = 0xfc3;
		pattern1[867] = 0xfc4;
		pattern1[868] = 0xfc5;
		pattern1[869] = 0xfc5;
		pattern1[870] = 0xfc6;
		pattern1[871] = 0xfc7;
		pattern1[872] = 0xfc8;
		pattern1[873] = 0xfc8;
		pattern1[874] = 0xfc9;
		pattern1[875] = 0xfca;
		pattern1[876] = 0xfca;
		pattern1[877] = 0xfcb;
		pattern1[878] = 0xfcc;
		pattern1[879] = 0xfcd;
		pattern1[880] = 0xfcd;
		pattern1[881] = 0xfce;
		pattern1[882] = 0xfcf;
		pattern1[883] = 0xfcf;
		pattern1[884] = 0xfd0;
		pattern1[885] = 0xfd1;
		pattern1[886] = 0xfd1;
		pattern1[887] = 0xfd2;
		pattern1[888] = 0xfd3;
		pattern1[889] = 0xfd3;
		pattern1[890] = 0xfd4;
		pattern1[891] = 0xfd5;
		pattern1[892] = 0xfd5;
		pattern1[893] = 0xfd6;
		pattern1[894] = 0xfd6;
		pattern1[895] = 0xfd7;
		pattern1[896] = 0xfd8;
		pattern1[897] = 0xfd8;
		pattern1[898] = 0xfd9;
		pattern1[899] = 0xfd9;
		pattern1[900] = 0xfda;
		pattern1[901] = 0xfdb;
		pattern1[902] = 0xfdb;
		pattern1[903] = 0xfdc;
		pattern1[904] = 0xfdc;
		pattern1[905] = 0xfdd;
		pattern1[906] = 0xfde;
		pattern1[907] = 0xfde;
		pattern1[908] = 0xfdf;
		pattern1[909] = 0xfdf;
		pattern1[910] = 0xfe0;
		pattern1[911] = 0xfe0;
		pattern1[912] = 0xfe1;
		pattern1[913] = 0xfe1;
		pattern1[914] = 0xfe2;
		pattern1[915] = 0xfe2;
		pattern1[916] = 0xfe3;
		pattern1[917] = 0xfe3;
		pattern1[918] = 0xfe4;
		pattern1[919] = 0xfe4;
		pattern1[920] = 0xfe5;
		pattern1[921] = 0xfe5;
		pattern1[922] = 0xfe6;
		pattern1[923] = 0xfe6;
		pattern1[924] = 0xfe7;
		pattern1[925] = 0xfe7;
		pattern1[926] = 0xfe8;
		pattern1[927] = 0xfe8;
		pattern1[928] = 0xfe9;
		pattern1[929] = 0xfe9;
		pattern1[930] = 0xfea;
		pattern1[931] = 0xfea;
		pattern1[932] = 0xfeb;
		pattern1[933] = 0xfeb;
		pattern1[934] = 0xfec;
		pattern1[935] = 0xfec;
		pattern1[936] = 0xfec;
		pattern1[937] = 0xfed;
		pattern1[938] = 0xfed;
		pattern1[939] = 0xfee;
		pattern1[940] = 0xfee;
		pattern1[941] = 0xfee;
		pattern1[942] = 0xfef;
		pattern1[943] = 0xfef;
		pattern1[944] = 0xff0;
		pattern1[945] = 0xff0;
		pattern1[946] = 0xff0;
		pattern1[947] = 0xff1;
		pattern1[948] = 0xff1;
		pattern1[949] = 0xff1;
		pattern1[950] = 0xff2;
		pattern1[951] = 0xff2;
		pattern1[952] = 0xff3;
		pattern1[953] = 0xff3;
		pattern1[954] = 0xff3;
		pattern1[955] = 0xff4;
		pattern1[956] = 0xff4;
		pattern1[957] = 0xff4;
		pattern1[958] = 0xff5;
		pattern1[959] = 0xff5;
		pattern1[960] = 0xff5;
		pattern1[961] = 0xff5;
		pattern1[962] = 0xff6;
		pattern1[963] = 0xff6;
		pattern1[964] = 0xff6;
		pattern1[965] = 0xff7;
		pattern1[966] = 0xff7;
		pattern1[967] = 0xff7;
		pattern1[968] = 0xff7;
		pattern1[969] = 0xff8;
		pattern1[970] = 0xff8;
		pattern1[971] = 0xff8;
		pattern1[972] = 0xff8;
		pattern1[973] = 0xff9;
		pattern1[974] = 0xff9;
		pattern1[975] = 0xff9;
		pattern1[976] = 0xff9;
		pattern1[977] = 0xffa;
		pattern1[978] = 0xffa;
		pattern1[979] = 0xffa;
		pattern1[980] = 0xffa;
		pattern1[981] = 0xffb;
		pattern1[982] = 0xffb;
		pattern1[983] = 0xffb;
		pattern1[984] = 0xffb;
		pattern1[985] = 0xffb;
		pattern1[986] = 0xffc;
		pattern1[987] = 0xffc;
		pattern1[988] = 0xffc;
		pattern1[989] = 0xffc;
		pattern1[990] = 0xffc;
		pattern1[991] = 0xffc;
		pattern1[992] = 0xffd;
		pattern1[993] = 0xffd;
		pattern1[994] = 0xffd;
		pattern1[995] = 0xffd;
		pattern1[996] = 0xffd;
		pattern1[997] = 0xffd;
		pattern1[998] = 0xffd;
		pattern1[999] = 0xffd;
		pattern1[1000] = 0xffe;
		pattern1[1001] = 0xffe;
		pattern1[1002] = 0xffe;
		pattern1[1003] = 0xffe;
		pattern1[1004] = 0xffe;
		pattern1[1005] = 0xffe;
		pattern1[1006] = 0xffe;
		pattern1[1007] = 0xffe;
		pattern1[1008] = 0xffe;
		pattern1[1009] = 0xffe;
		pattern1[1010] = 0xfff;
		pattern1[1011] = 0xfff;
		pattern1[1012] = 0xfff;
		pattern1[1013] = 0xfff;
		pattern1[1014] = 0xfff;
		pattern1[1015] = 0xfff;
		pattern1[1016] = 0xfff;
		pattern1[1017] = 0xfff;
		pattern1[1018] = 0xfff;
		pattern1[1019] = 0xfff;
		pattern1[1020] = 0xfff;
		pattern1[1021] = 0xfff;
		pattern1[1022] = 0xfff;
		pattern1[1023] = 0xfff;
		pattern1[1024] = 0xfff;
		pattern1[1025] = 0xfff;
		pattern1[1026] = 0xfff;
		pattern1[1027] = 0xfff;
		pattern1[1028] = 0xfff;
		pattern1[1029] = 0xfff;
		pattern1[1030] = 0xfff;
		pattern1[1031] = 0xfff;
		pattern1[1032] = 0xfff;
		pattern1[1033] = 0xfff;
		pattern1[1034] = 0xfff;
		pattern1[1035] = 0xfff;
		pattern1[1036] = 0xfff;
		pattern1[1037] = 0xfff;
		pattern1[1038] = 0xfff;
		pattern1[1039] = 0xffe;
		pattern1[1040] = 0xffe;
		pattern1[1041] = 0xffe;
		pattern1[1042] = 0xffe;
		pattern1[1043] = 0xffe;
		pattern1[1044] = 0xffe;
		pattern1[1045] = 0xffe;
		pattern1[1046] = 0xffe;
		pattern1[1047] = 0xffe;
		pattern1[1048] = 0xffe;
		pattern1[1049] = 0xffd;
		pattern1[1050] = 0xffd;
		pattern1[1051] = 0xffd;
		pattern1[1052] = 0xffd;
		pattern1[1053] = 0xffd;
		pattern1[1054] = 0xffd;
		pattern1[1055] = 0xffd;
		pattern1[1056] = 0xffd;
		pattern1[1057] = 0xffc;
		pattern1[1058] = 0xffc;
		pattern1[1059] = 0xffc;
		pattern1[1060] = 0xffc;
		pattern1[1061] = 0xffc;
		pattern1[1062] = 0xffc;
		pattern1[1063] = 0xffb;
		pattern1[1064] = 0xffb;
		pattern1[1065] = 0xffb;
		pattern1[1066] = 0xffb;
		pattern1[1067] = 0xffb;
		pattern1[1068] = 0xffa;
		pattern1[1069] = 0xffa;
		pattern1[1070] = 0xffa;
		pattern1[1071] = 0xffa;
		pattern1[1072] = 0xff9;
		pattern1[1073] = 0xff9;
		pattern1[1074] = 0xff9;
		pattern1[1075] = 0xff9;
		pattern1[1076] = 0xff8;
		pattern1[1077] = 0xff8;
		pattern1[1078] = 0xff8;
		pattern1[1079] = 0xff8;
		pattern1[1080] = 0xff7;
		pattern1[1081] = 0xff7;
		pattern1[1082] = 0xff7;
		pattern1[1083] = 0xff7;
		pattern1[1084] = 0xff6;
		pattern1[1085] = 0xff6;
		pattern1[1086] = 0xff6;
		pattern1[1087] = 0xff5;
		pattern1[1088] = 0xff5;
		pattern1[1089] = 0xff5;
		pattern1[1090] = 0xff5;
		pattern1[1091] = 0xff4;
		pattern1[1092] = 0xff4;
		pattern1[1093] = 0xff4;
		pattern1[1094] = 0xff3;
		pattern1[1095] = 0xff3;
		pattern1[1096] = 0xff3;
		pattern1[1097] = 0xff2;
		pattern1[1098] = 0xff2;
		pattern1[1099] = 0xff1;
		pattern1[1100] = 0xff1;
		pattern1[1101] = 0xff1;
		pattern1[1102] = 0xff0;
		pattern1[1103] = 0xff0;
		pattern1[1104] = 0xff0;
		pattern1[1105] = 0xfef;
		pattern1[1106] = 0xfef;
		pattern1[1107] = 0xfee;
		pattern1[1108] = 0xfee;
		pattern1[1109] = 0xfee;
		pattern1[1110] = 0xfed;
		pattern1[1111] = 0xfed;
		pattern1[1112] = 0xfec;
		pattern1[1113] = 0xfec;
		pattern1[1114] = 0xfec;
		pattern1[1115] = 0xfeb;
		pattern1[1116] = 0xfeb;
		pattern1[1117] = 0xfea;
		pattern1[1118] = 0xfea;
		pattern1[1119] = 0xfe9;
		pattern1[1120] = 0xfe9;
		pattern1[1121] = 0xfe8;
		pattern1[1122] = 0xfe8;
		pattern1[1123] = 0xfe7;
		pattern1[1124] = 0xfe7;
		pattern1[1125] = 0xfe6;
		pattern1[1126] = 0xfe6;
		pattern1[1127] = 0xfe5;
		pattern1[1128] = 0xfe5;
		pattern1[1129] = 0xfe4;
		pattern1[1130] = 0xfe4;
		pattern1[1131] = 0xfe3;
		pattern1[1132] = 0xfe3;
		pattern1[1133] = 0xfe2;
		pattern1[1134] = 0xfe2;
		pattern1[1135] = 0xfe1;
		pattern1[1136] = 0xfe1;
		pattern1[1137] = 0xfe0;
		pattern1[1138] = 0xfe0;
		pattern1[1139] = 0xfdf;
		pattern1[1140] = 0xfdf;
		pattern1[1141] = 0xfde;
		pattern1[1142] = 0xfde;
		pattern1[1143] = 0xfdd;
		pattern1[1144] = 0xfdc;
		pattern1[1145] = 0xfdc;
		pattern1[1146] = 0xfdb;
		pattern1[1147] = 0xfdb;
		pattern1[1148] = 0xfda;
		pattern1[1149] = 0xfd9;
		pattern1[1150] = 0xfd9;
		pattern1[1151] = 0xfd8;
		pattern1[1152] = 0xfd8;
		pattern1[1153] = 0xfd7;
		pattern1[1154] = 0xfd6;
		pattern1[1155] = 0xfd6;
		pattern1[1156] = 0xfd5;
		pattern1[1157] = 0xfd5;
		pattern1[1158] = 0xfd4;
		pattern1[1159] = 0xfd3;
		pattern1[1160] = 0xfd3;
		pattern1[1161] = 0xfd2;
		pattern1[1162] = 0xfd1;
		pattern1[1163] = 0xfd1;
		pattern1[1164] = 0xfd0;
		pattern1[1165] = 0xfcf;
		pattern1[1166] = 0xfcf;
		pattern1[1167] = 0xfce;
		pattern1[1168] = 0xfcd;
		pattern1[1169] = 0xfcd;
		pattern1[1170] = 0xfcc;
		pattern1[1171] = 0xfcb;
		pattern1[1172] = 0xfca;
		pattern1[1173] = 0xfca;
		pattern1[1174] = 0xfc9;
		pattern1[1175] = 0xfc8;
		pattern1[1176] = 0xfc8;
		pattern1[1177] = 0xfc7;
		pattern1[1178] = 0xfc6;
		pattern1[1179] = 0xfc5;
		pattern1[1180] = 0xfc5;
		pattern1[1181] = 0xfc4;
		pattern1[1182] = 0xfc3;
		pattern1[1183] = 0xfc2;
		pattern1[1184] = 0xfc2;
		pattern1[1185] = 0xfc1;
		pattern1[1186] = 0xfc0;
		pattern1[1187] = 0xfbf;
		pattern1[1188] = 0xfbf;
		pattern1[1189] = 0xfbe;
		pattern1[1190] = 0xfbd;
		pattern1[1191] = 0xfbc;
		pattern1[1192] = 0xfbb;
		pattern1[1193] = 0xfbb;
		pattern1[1194] = 0xfba;
		pattern1[1195] = 0xfb9;
		pattern1[1196] = 0xfb8;
		pattern1[1197] = 0xfb7;
		pattern1[1198] = 0xfb6;
		pattern1[1199] = 0xfb6;
		pattern1[1200] = 0xfb5;
		pattern1[1201] = 0xfb4;
		pattern1[1202] = 0xfb3;
		pattern1[1203] = 0xfb2;
		pattern1[1204] = 0xfb1;
		pattern1[1205] = 0xfb1;
		pattern1[1206] = 0xfb0;
		pattern1[1207] = 0xfaf;
		pattern1[1208] = 0xfae;
		pattern1[1209] = 0xfad;
		pattern1[1210] = 0xfac;
		pattern1[1211] = 0xfab;
		pattern1[1212] = 0xfaa;
		pattern1[1213] = 0xfaa;
		pattern1[1214] = 0xfa9;
		pattern1[1215] = 0xfa8;
		pattern1[1216] = 0xfa7;
		pattern1[1217] = 0xfa6;
		pattern1[1218] = 0xfa5;
		pattern1[1219] = 0xfa4;
		pattern1[1220] = 0xfa3;
		pattern1[1221] = 0xfa2;
		pattern1[1222] = 0xfa1;
		pattern1[1223] = 0xfa0;
		pattern1[1224] = 0xf9f;
		pattern1[1225] = 0xf9e;
		pattern1[1226] = 0xf9d;
		pattern1[1227] = 0xf9d;
		pattern1[1228] = 0xf9c;
		pattern1[1229] = 0xf9b;
		pattern1[1230] = 0xf9a;
		pattern1[1231] = 0xf99;
		pattern1[1232] = 0xf98;
		pattern1[1233] = 0xf97;
		pattern1[1234] = 0xf96;
		pattern1[1235] = 0xf95;
		pattern1[1236] = 0xf94;
		pattern1[1237] = 0xf93;
		pattern1[1238] = 0xf92;
		pattern1[1239] = 0xf91;
		pattern1[1240] = 0xf90;
		pattern1[1241] = 0xf8f;
		pattern1[1242] = 0xf8e;
		pattern1[1243] = 0xf8d;
		pattern1[1244] = 0xf8c;
		pattern1[1245] = 0xf8a;
		pattern1[1246] = 0xf89;
		pattern1[1247] = 0xf88;
		pattern1[1248] = 0xf87;
		pattern1[1249] = 0xf86;
		pattern1[1250] = 0xf85;
		pattern1[1251] = 0xf84;
		pattern1[1252] = 0xf83;
		pattern1[1253] = 0xf82;
		pattern1[1254] = 0xf81;
		pattern1[1255] = 0xf80;
		pattern1[1256] = 0xf7f;
		pattern1[1257] = 0xf7e;
		pattern1[1258] = 0xf7d;
		pattern1[1259] = 0xf7b;
		pattern1[1260] = 0xf7a;
		pattern1[1261] = 0xf79;
		pattern1[1262] = 0xf78;
		pattern1[1263] = 0xf77;
		pattern1[1264] = 0xf76;
		pattern1[1265] = 0xf75;
		pattern1[1266] = 0xf74;
		pattern1[1267] = 0xf72;
		pattern1[1268] = 0xf71;
		pattern1[1269] = 0xf70;
		pattern1[1270] = 0xf6f;
		pattern1[1271] = 0xf6e;
		pattern1[1272] = 0xf6d;
		pattern1[1273] = 0xf6b;
		pattern1[1274] = 0xf6a;
		pattern1[1275] = 0xf69;
		pattern1[1276] = 0xf68;
		pattern1[1277] = 0xf67;
		pattern1[1278] = 0xf66;
		pattern1[1279] = 0xf64;
		pattern1[1280] = 0xf63;
		pattern1[1281] = 0xf62;
		pattern1[1282] = 0xf61;
		pattern1[1283] = 0xf60;
		pattern1[1284] = 0xf5e;
		pattern1[1285] = 0xf5d;
		pattern1[1286] = 0xf5c;
		pattern1[1287] = 0xf5b;
		pattern1[1288] = 0xf59;
		pattern1[1289] = 0xf58;
		pattern1[1290] = 0xf57;
		pattern1[1291] = 0xf56;
		pattern1[1292] = 0xf54;
		pattern1[1293] = 0xf53;
		pattern1[1294] = 0xf52;
		pattern1[1295] = 0xf51;
		pattern1[1296] = 0xf4f;
		pattern1[1297] = 0xf4e;
		pattern1[1298] = 0xf4d;
		pattern1[1299] = 0xf4c;
		pattern1[1300] = 0xf4a;
		pattern1[1301] = 0xf49;
		pattern1[1302] = 0xf48;
		pattern1[1303] = 0xf46;
		pattern1[1304] = 0xf45;
		pattern1[1305] = 0xf44;
		pattern1[1306] = 0xf42;
		pattern1[1307] = 0xf41;
		pattern1[1308] = 0xf40;
		pattern1[1309] = 0xf3e;
		pattern1[1310] = 0xf3d;
		pattern1[1311] = 0xf3c;
		pattern1[1312] = 0xf3a;
		pattern1[1313] = 0xf39;
		pattern1[1314] = 0xf38;
		pattern1[1315] = 0xf36;
		pattern1[1316] = 0xf35;
		pattern1[1317] = 0xf34;
		pattern1[1318] = 0xf32;
		pattern1[1319] = 0xf31;
		pattern1[1320] = 0xf30;
		pattern1[1321] = 0xf2e;
		pattern1[1322] = 0xf2d;
		pattern1[1323] = 0xf2b;
		pattern1[1324] = 0xf2a;
		pattern1[1325] = 0xf29;
		pattern1[1326] = 0xf27;
		pattern1[1327] = 0xf26;
		pattern1[1328] = 0xf24;
		pattern1[1329] = 0xf23;
		pattern1[1330] = 0xf22;
		pattern1[1331] = 0xf20;
		pattern1[1332] = 0xf1f;
		pattern1[1333] = 0xf1d;
		pattern1[1334] = 0xf1c;
		pattern1[1335] = 0xf1a;
		pattern1[1336] = 0xf19;
		pattern1[1337] = 0xf17;
		pattern1[1338] = 0xf16;
		pattern1[1339] = 0xf15;
		pattern1[1340] = 0xf13;
		pattern1[1341] = 0xf12;
		pattern1[1342] = 0xf10;
		pattern1[1343] = 0xf0f;
		pattern1[1344] = 0xf0d;
		pattern1[1345] = 0xf0c;
		pattern1[1346] = 0xf0a;
		pattern1[1347] = 0xf09;
		pattern1[1348] = 0xf07;
		pattern1[1349] = 0xf06;
		pattern1[1350] = 0xf04;
		pattern1[1351] = 0xf03;
		pattern1[1352] = 0xf01;
		pattern1[1353] = 0xf00;
		pattern1[1354] = 0xefe;
		pattern1[1355] = 0xefd;
		pattern1[1356] = 0xefb;
		pattern1[1357] = 0xefa;
		pattern1[1358] = 0xef8;
		pattern1[1359] = 0xef7;
		pattern1[1360] = 0xef5;
		pattern1[1361] = 0xef3;
		pattern1[1362] = 0xef2;
		pattern1[1363] = 0xef0;
		pattern1[1364] = 0xeef;
		pattern1[1365] = 0xeed;
		pattern1[1366] = 0xeec;
		pattern1[1367] = 0xeea;
		pattern1[1368] = 0xee8;
		pattern1[1369] = 0xee7;
		pattern1[1370] = 0xee5;
		pattern1[1371] = 0xee4;
		pattern1[1372] = 0xee2;
		pattern1[1373] = 0xee1;
		pattern1[1374] = 0xedf;
		pattern1[1375] = 0xedd;
		pattern1[1376] = 0xedc;
		pattern1[1377] = 0xeda;
		pattern1[1378] = 0xed8;
		pattern1[1379] = 0xed7;
		pattern1[1380] = 0xed5;
		pattern1[1381] = 0xed4;
		pattern1[1382] = 0xed2;
		pattern1[1383] = 0xed0;
		pattern1[1384] = 0xecf;
		pattern1[1385] = 0xecd;
		pattern1[1386] = 0xecb;
		pattern1[1387] = 0xeca;
		pattern1[1388] = 0xec8;
		pattern1[1389] = 0xec6;
		pattern1[1390] = 0xec5;
		pattern1[1391] = 0xec3;
		pattern1[1392] = 0xec1;
		pattern1[1393] = 0xec0;
		pattern1[1394] = 0xebe;
		pattern1[1395] = 0xebc;
		pattern1[1396] = 0xebb;
		pattern1[1397] = 0xeb9;
		pattern1[1398] = 0xeb7;
		pattern1[1399] = 0xeb5;
		pattern1[1400] = 0xeb4;
		pattern1[1401] = 0xeb2;
		pattern1[1402] = 0xeb0;
		pattern1[1403] = 0xeaf;
		pattern1[1404] = 0xead;
		pattern1[1405] = 0xeab;
		pattern1[1406] = 0xea9;
		pattern1[1407] = 0xea8;
		pattern1[1408] = 0xea6;
		pattern1[1409] = 0xea4;
		pattern1[1410] = 0xea2;
		pattern1[1411] = 0xea1;
		pattern1[1412] = 0xe9f;
		pattern1[1413] = 0xe9d;
		pattern1[1414] = 0xe9b;
		pattern1[1415] = 0xe9a;
		pattern1[1416] = 0xe98;
		pattern1[1417] = 0xe96;
		pattern1[1418] = 0xe94;
		pattern1[1419] = 0xe92;
		pattern1[1420] = 0xe91;
		pattern1[1421] = 0xe8f;
		pattern1[1422] = 0xe8d;
		pattern1[1423] = 0xe8b;
		pattern1[1424] = 0xe8a;
		pattern1[1425] = 0xe88;
		pattern1[1426] = 0xe86;
		pattern1[1427] = 0xe84;
		pattern1[1428] = 0xe82;
		pattern1[1429] = 0xe80;
		pattern1[1430] = 0xe7f;
		pattern1[1431] = 0xe7d;
		pattern1[1432] = 0xe7b;
		pattern1[1433] = 0xe79;
		pattern1[1434] = 0xe77;
		pattern1[1435] = 0xe75;
		pattern1[1436] = 0xe74;
		pattern1[1437] = 0xe72;
		pattern1[1438] = 0xe70;
		pattern1[1439] = 0xe6e;
		pattern1[1440] = 0xe6c;
		pattern1[1441] = 0xe6a;
		pattern1[1442] = 0xe68;
		pattern1[1443] = 0xe66;
		pattern1[1444] = 0xe65;
		pattern1[1445] = 0xe63;
		pattern1[1446] = 0xe61;
		pattern1[1447] = 0xe5f;
		pattern1[1448] = 0xe5d;
		pattern1[1449] = 0xe5b;
		pattern1[1450] = 0xe59;
		pattern1[1451] = 0xe57;
		pattern1[1452] = 0xe55;
		pattern1[1453] = 0xe53;
		pattern1[1454] = 0xe51;
		pattern1[1455] = 0xe50;
		pattern1[1456] = 0xe4e;
		pattern1[1457] = 0xe4c;
		pattern1[1458] = 0xe4a;
		pattern1[1459] = 0xe48;
		pattern1[1460] = 0xe46;
		pattern1[1461] = 0xe44;
		pattern1[1462] = 0xe42;
		pattern1[1463] = 0xe40;
		pattern1[1464] = 0xe3e;
		pattern1[1465] = 0xe3c;
		pattern1[1466] = 0xe3a;
		pattern1[1467] = 0xe38;
		pattern1[1468] = 0xe36;
		pattern1[1469] = 0xe34;
		pattern1[1470] = 0xe32;
		pattern1[1471] = 0xe30;
		pattern1[1472] = 0xe2e;
		pattern1[1473] = 0xe2c;
		pattern1[1474] = 0xe2a;
		pattern1[1475] = 0xe28;
		pattern1[1476] = 0xe26;
		pattern1[1477] = 0xe24;
		pattern1[1478] = 0xe22;
		pattern1[1479] = 0xe20;
		pattern1[1480] = 0xe1e;
		pattern1[1481] = 0xe1c;
		pattern1[1482] = 0xe1a;
		pattern1[1483] = 0xe18;
		pattern1[1484] = 0xe16;
		pattern1[1485] = 0xe14;
		pattern1[1486] = 0xe12;
		pattern1[1487] = 0xe10;
		pattern1[1488] = 0xe0e;
		pattern1[1489] = 0xe0c;
		pattern1[1490] = 0xe0a;
		pattern1[1491] = 0xe08;
		pattern1[1492] = 0xe06;
		pattern1[1493] = 0xe04;
		pattern1[1494] = 0xe02;
		pattern1[1495] = 0xdff;
		pattern1[1496] = 0xdfd;
		pattern1[1497] = 0xdfb;
		pattern1[1498] = 0xdf9;
		pattern1[1499] = 0xdf7;
		pattern1[1500] = 0xdf5;
		pattern1[1501] = 0xdf3;
		pattern1[1502] = 0xdf1;
		pattern1[1503] = 0xdef;
		pattern1[1504] = 0xded;
		pattern1[1505] = 0xdea;
		pattern1[1506] = 0xde8;
		pattern1[1507] = 0xde6;
		pattern1[1508] = 0xde4;
		pattern1[1509] = 0xde2;
		pattern1[1510] = 0xde0;
		pattern1[1511] = 0xdde;
		pattern1[1512] = 0xddc;
		pattern1[1513] = 0xdd9;
		pattern1[1514] = 0xdd7;
		pattern1[1515] = 0xdd5;
		pattern1[1516] = 0xdd3;
		pattern1[1517] = 0xdd1;
		pattern1[1518] = 0xdcf;
		pattern1[1519] = 0xdcd;
		pattern1[1520] = 0xdca;
		pattern1[1521] = 0xdc8;
		pattern1[1522] = 0xdc6;
		pattern1[1523] = 0xdc4;
		pattern1[1524] = 0xdc2;
		pattern1[1525] = 0xdc0;
		pattern1[1526] = 0xdbd;
		pattern1[1527] = 0xdbb;
		pattern1[1528] = 0xdb9;
		pattern1[1529] = 0xdb7;
		pattern1[1530] = 0xdb5;
		pattern1[1531] = 0xdb2;
		pattern1[1532] = 0xdb0;
		pattern1[1533] = 0xdae;
		pattern1[1534] = 0xdac;
		pattern1[1535] = 0xdaa;
		pattern1[1536] = 0xda7;
		pattern1[1537] = 0xda5;
		pattern1[1538] = 0xda3;
		pattern1[1539] = 0xda1;
		pattern1[1540] = 0xd9e;
		pattern1[1541] = 0xd9c;
		pattern1[1542] = 0xd9a;
		pattern1[1543] = 0xd98;
		pattern1[1544] = 0xd95;
		pattern1[1545] = 0xd93;
		pattern1[1546] = 0xd91;
		pattern1[1547] = 0xd8f;
		pattern1[1548] = 0xd8c;
		pattern1[1549] = 0xd8a;
		pattern1[1550] = 0xd88;
		pattern1[1551] = 0xd86;
		pattern1[1552] = 0xd83;
		pattern1[1553] = 0xd81;
		pattern1[1554] = 0xd7f;
		pattern1[1555] = 0xd7c;
		pattern1[1556] = 0xd7a;
		pattern1[1557] = 0xd78;
		pattern1[1558] = 0xd76;
		pattern1[1559] = 0xd73;
		pattern1[1560] = 0xd71;
		pattern1[1561] = 0xd6f;
		pattern1[1562] = 0xd6c;
		pattern1[1563] = 0xd6a;
		pattern1[1564] = 0xd68;
		pattern1[1565] = 0xd65;
		pattern1[1566] = 0xd63;
		pattern1[1567] = 0xd61;
		pattern1[1568] = 0xd5f;
		pattern1[1569] = 0xd5c;
		pattern1[1570] = 0xd5a;
		pattern1[1571] = 0xd58;
		pattern1[1572] = 0xd55;
		pattern1[1573] = 0xd53;
		pattern1[1574] = 0xd50;
		pattern1[1575] = 0xd4e;
		pattern1[1576] = 0xd4c;
		pattern1[1577] = 0xd49;
		pattern1[1578] = 0xd47;
		pattern1[1579] = 0xd45;
		pattern1[1580] = 0xd42;
		pattern1[1581] = 0xd40;
		pattern1[1582] = 0xd3e;
		pattern1[1583] = 0xd3b;
		pattern1[1584] = 0xd39;
		pattern1[1585] = 0xd36;
		pattern1[1586] = 0xd34;
		pattern1[1587] = 0xd32;
		pattern1[1588] = 0xd2f;
		pattern1[1589] = 0xd2d;
		pattern1[1590] = 0xd2b;
		pattern1[1591] = 0xd28;
		pattern1[1592] = 0xd26;
		pattern1[1593] = 0xd23;
		pattern1[1594] = 0xd21;
		pattern1[1595] = 0xd1f;
		pattern1[1596] = 0xd1c;
		pattern1[1597] = 0xd1a;
		pattern1[1598] = 0xd17;
		pattern1[1599] = 0xd15;
		pattern1[1600] = 0xd12;
		pattern1[1601] = 0xd10;
		pattern1[1602] = 0xd0e;
		pattern1[1603] = 0xd0b;
		pattern1[1604] = 0xd09;
		pattern1[1605] = 0xd06;
		pattern1[1606] = 0xd04;
		pattern1[1607] = 0xd01;
		pattern1[1608] = 0xcff;
		pattern1[1609] = 0xcfc;
		pattern1[1610] = 0xcfa;
		pattern1[1611] = 0xcf8;
		pattern1[1612] = 0xcf5;
		pattern1[1613] = 0xcf3;
		pattern1[1614] = 0xcf0;
		pattern1[1615] = 0xcee;
		pattern1[1616] = 0xceb;
		pattern1[1617] = 0xce9;
		pattern1[1618] = 0xce6;
		pattern1[1619] = 0xce4;
		pattern1[1620] = 0xce1;
		pattern1[1621] = 0xcdf;
		pattern1[1622] = 0xcdc;
		pattern1[1623] = 0xcda;
		pattern1[1624] = 0xcd7;
		pattern1[1625] = 0xcd5;
		pattern1[1626] = 0xcd2;
		pattern1[1627] = 0xcd0;
		pattern1[1628] = 0xccd;
		pattern1[1629] = 0xccb;
		pattern1[1630] = 0xcc8;
		pattern1[1631] = 0xcc6;
		pattern1[1632] = 0xcc3;
		pattern1[1633] = 0xcc1;
		pattern1[1634] = 0xcbe;
		pattern1[1635] = 0xcbc;
		pattern1[1636] = 0xcb9;
		pattern1[1637] = 0xcb7;
		pattern1[1638] = 0xcb4;
		pattern1[1639] = 0xcb1;
		pattern1[1640] = 0xcaf;
		pattern1[1641] = 0xcac;
		pattern1[1642] = 0xcaa;
		pattern1[1643] = 0xca7;
		pattern1[1644] = 0xca5;
		pattern1[1645] = 0xca2;
		pattern1[1646] = 0xca0;
		pattern1[1647] = 0xc9d;
		pattern1[1648] = 0xc9a;
		pattern1[1649] = 0xc98;
		pattern1[1650] = 0xc95;
		pattern1[1651] = 0xc93;
		pattern1[1652] = 0xc90;
		pattern1[1653] = 0xc8e;
		pattern1[1654] = 0xc8b;
		pattern1[1655] = 0xc88;
		pattern1[1656] = 0xc86;
		pattern1[1657] = 0xc83;
		pattern1[1658] = 0xc81;
		pattern1[1659] = 0xc7e;
		pattern1[1660] = 0xc7b;
		pattern1[1661] = 0xc79;
		pattern1[1662] = 0xc76;
		pattern1[1663] = 0xc74;
		pattern1[1664] = 0xc71;
		pattern1[1665] = 0xc6e;
		pattern1[1666] = 0xc6c;
		pattern1[1667] = 0xc69;
		pattern1[1668] = 0xc67;
		pattern1[1669] = 0xc64;
		pattern1[1670] = 0xc61;
		pattern1[1671] = 0xc5f;
		pattern1[1672] = 0xc5c;
		pattern1[1673] = 0xc59;
		pattern1[1674] = 0xc57;
		pattern1[1675] = 0xc54;
		pattern1[1676] = 0xc52;
		pattern1[1677] = 0xc4f;
		pattern1[1678] = 0xc4c;
		pattern1[1679] = 0xc4a;
		pattern1[1680] = 0xc47;
		pattern1[1681] = 0xc44;
		pattern1[1682] = 0xc42;
		pattern1[1683] = 0xc3f;
		pattern1[1684] = 0xc3c;
		pattern1[1685] = 0xc3a;
		pattern1[1686] = 0xc37;
		pattern1[1687] = 0xc34;
		pattern1[1688] = 0xc32;
		pattern1[1689] = 0xc2f;
		pattern1[1690] = 0xc2c;
		pattern1[1691] = 0xc2a;
		pattern1[1692] = 0xc27;
		pattern1[1693] = 0xc24;
		pattern1[1694] = 0xc22;
		pattern1[1695] = 0xc1f;
		pattern1[1696] = 0xc1c;
		pattern1[1697] = 0xc19;
		pattern1[1698] = 0xc17;
		pattern1[1699] = 0xc14;
		pattern1[1700] = 0xc11;
		pattern1[1701] = 0xc0f;
		pattern1[1702] = 0xc0c;
		pattern1[1703] = 0xc09;
		pattern1[1704] = 0xc06;
		pattern1[1705] = 0xc04;
		pattern1[1706] = 0xc01;
		pattern1[1707] = 0xbfe;
		pattern1[1708] = 0xbfc;
		pattern1[1709] = 0xbf9;
		pattern1[1710] = 0xbf6;
		pattern1[1711] = 0xbf3;
		pattern1[1712] = 0xbf1;
		pattern1[1713] = 0xbee;
		pattern1[1714] = 0xbeb;
		pattern1[1715] = 0xbe9;
		pattern1[1716] = 0xbe6;
		pattern1[1717] = 0xbe3;
		pattern1[1718] = 0xbe0;
		pattern1[1719] = 0xbde;
		pattern1[1720] = 0xbdb;
		pattern1[1721] = 0xbd8;
		pattern1[1722] = 0xbd5;
		pattern1[1723] = 0xbd3;
		pattern1[1724] = 0xbd0;
		pattern1[1725] = 0xbcd;
		pattern1[1726] = 0xbca;
		pattern1[1727] = 0xbc7;
		pattern1[1728] = 0xbc5;
		pattern1[1729] = 0xbc2;
		pattern1[1730] = 0xbbf;
		pattern1[1731] = 0xbbc;
		pattern1[1732] = 0xbba;
		pattern1[1733] = 0xbb7;
		pattern1[1734] = 0xbb4;
		pattern1[1735] = 0xbb1;
		pattern1[1736] = 0xbae;
		pattern1[1737] = 0xbac;
		pattern1[1738] = 0xba9;
		pattern1[1739] = 0xba6;
		pattern1[1740] = 0xba3;
		pattern1[1741] = 0xba0;
		pattern1[1742] = 0xb9e;
		pattern1[1743] = 0xb9b;
		pattern1[1744] = 0xb98;
		pattern1[1745] = 0xb95;
		pattern1[1746] = 0xb92;
		pattern1[1747] = 0xb90;
		pattern1[1748] = 0xb8d;
		pattern1[1749] = 0xb8a;
		pattern1[1750] = 0xb87;
		pattern1[1751] = 0xb84;
		pattern1[1752] = 0xb82;
		pattern1[1753] = 0xb7f;
		pattern1[1754] = 0xb7c;
		pattern1[1755] = 0xb79;
		pattern1[1756] = 0xb76;
		pattern1[1757] = 0xb73;
		pattern1[1758] = 0xb71;
		pattern1[1759] = 0xb6e;
		pattern1[1760] = 0xb6b;
		pattern1[1761] = 0xb68;
		pattern1[1762] = 0xb65;
		pattern1[1763] = 0xb62;
		pattern1[1764] = 0xb60;
		pattern1[1765] = 0xb5d;
		pattern1[1766] = 0xb5a;
		pattern1[1767] = 0xb57;
		pattern1[1768] = 0xb54;
		pattern1[1769] = 0xb51;
		pattern1[1770] = 0xb4e;
		pattern1[1771] = 0xb4c;
		pattern1[1772] = 0xb49;
		pattern1[1773] = 0xb46;
		pattern1[1774] = 0xb43;
		pattern1[1775] = 0xb40;
		pattern1[1776] = 0xb3d;
		pattern1[1777] = 0xb3a;
		pattern1[1778] = 0xb37;
		pattern1[1779] = 0xb35;
		pattern1[1780] = 0xb32;
		pattern1[1781] = 0xb2f;
		pattern1[1782] = 0xb2c;
		pattern1[1783] = 0xb29;
		pattern1[1784] = 0xb26;
		pattern1[1785] = 0xb23;
		pattern1[1786] = 0xb20;
		pattern1[1787] = 0xb1e;
		pattern1[1788] = 0xb1b;
		pattern1[1789] = 0xb18;
		pattern1[1790] = 0xb15;
		pattern1[1791] = 0xb12;
		pattern1[1792] = 0xb0f;
		pattern1[1793] = 0xb0c;
		pattern1[1794] = 0xb09;
		pattern1[1795] = 0xb06;
		pattern1[1796] = 0xb03;
		pattern1[1797] = 0xb01;
		pattern1[1798] = 0xafe;
		pattern1[1799] = 0xafb;
		pattern1[1800] = 0xaf8;
		pattern1[1801] = 0xaf5;
		pattern1[1802] = 0xaf2;
		pattern1[1803] = 0xaef;
		pattern1[1804] = 0xaec;
		pattern1[1805] = 0xae9;
		pattern1[1806] = 0xae6;
		pattern1[1807] = 0xae3;
		pattern1[1808] = 0xae0;
		pattern1[1809] = 0xadd;
		pattern1[1810] = 0xadb;
		pattern1[1811] = 0xad8;
		pattern1[1812] = 0xad5;
		pattern1[1813] = 0xad2;
		pattern1[1814] = 0xacf;
		pattern1[1815] = 0xacc;
		pattern1[1816] = 0xac9;
		pattern1[1817] = 0xac6;
		pattern1[1818] = 0xac3;
		pattern1[1819] = 0xac0;
		pattern1[1820] = 0xabd;
		pattern1[1821] = 0xaba;
		pattern1[1822] = 0xab7;
		pattern1[1823] = 0xab4;
		pattern1[1824] = 0xab1;
		pattern1[1825] = 0xaae;
		pattern1[1826] = 0xaab;
		pattern1[1827] = 0xaa8;
		pattern1[1828] = 0xaa5;
		pattern1[1829] = 0xaa2;
		pattern1[1830] = 0xaa0;
		pattern1[1831] = 0xa9d;
		pattern1[1832] = 0xa9a;
		pattern1[1833] = 0xa97;
		pattern1[1834] = 0xa94;
		pattern1[1835] = 0xa91;
		pattern1[1836] = 0xa8e;
		pattern1[1837] = 0xa8b;
		pattern1[1838] = 0xa88;
		pattern1[1839] = 0xa85;
		pattern1[1840] = 0xa82;
		pattern1[1841] = 0xa7f;
		pattern1[1842] = 0xa7c;
		pattern1[1843] = 0xa79;
		pattern1[1844] = 0xa76;
		pattern1[1845] = 0xa73;
		pattern1[1846] = 0xa70;
		pattern1[1847] = 0xa6d;
		pattern1[1848] = 0xa6a;
		pattern1[1849] = 0xa67;
		pattern1[1850] = 0xa64;
		pattern1[1851] = 0xa61;
		pattern1[1852] = 0xa5e;
		pattern1[1853] = 0xa5b;
		pattern1[1854] = 0xa58;
		pattern1[1855] = 0xa55;
		pattern1[1856] = 0xa52;
		pattern1[1857] = 0xa4f;
		pattern1[1858] = 0xa4c;
		pattern1[1859] = 0xa49;
		pattern1[1860] = 0xa46;
		pattern1[1861] = 0xa43;
		pattern1[1862] = 0xa40;
		pattern1[1863] = 0xa3d;
		pattern1[1864] = 0xa3a;
		pattern1[1865] = 0xa37;
		pattern1[1866] = 0xa34;
		pattern1[1867] = 0xa31;
		pattern1[1868] = 0xa2e;
		pattern1[1869] = 0xa2b;
		pattern1[1870] = 0xa28;
		pattern1[1871] = 0xa25;
		pattern1[1872] = 0xa22;
		pattern1[1873] = 0xa1f;
		pattern1[1874] = 0xa1c;
		pattern1[1875] = 0xa19;
		pattern1[1876] = 0xa15;
		pattern1[1877] = 0xa12;
		pattern1[1878] = 0xa0f;
		pattern1[1879] = 0xa0c;
		pattern1[1880] = 0xa09;
		pattern1[1881] = 0xa06;
		pattern1[1882] = 0xa03;
		pattern1[1883] = 0xa00;
		pattern1[1884] = 0x9fd;
		pattern1[1885] = 0x9fa;
		pattern1[1886] = 0x9f7;
		pattern1[1887] = 0x9f4;
		pattern1[1888] = 0x9f1;
		pattern1[1889] = 0x9ee;
		pattern1[1890] = 0x9eb;
		pattern1[1891] = 0x9e8;
		pattern1[1892] = 0x9e5;
		pattern1[1893] = 0x9e2;
		pattern1[1894] = 0x9df;
		pattern1[1895] = 0x9dc;
		pattern1[1896] = 0x9d9;
		pattern1[1897] = 0x9d6;
		pattern1[1898] = 0x9d2;
		pattern1[1899] = 0x9cf;
		pattern1[1900] = 0x9cc;
		pattern1[1901] = 0x9c9;
		pattern1[1902] = 0x9c6;
		pattern1[1903] = 0x9c3;
		pattern1[1904] = 0x9c0;
		pattern1[1905] = 0x9bd;
		pattern1[1906] = 0x9ba;
		pattern1[1907] = 0x9b7;
		pattern1[1908] = 0x9b4;
		pattern1[1909] = 0x9b1;
		pattern1[1910] = 0x9ae;
		pattern1[1911] = 0x9ab;
		pattern1[1912] = 0x9a8;
		pattern1[1913] = 0x9a4;
		pattern1[1914] = 0x9a1;
		pattern1[1915] = 0x99e;
		pattern1[1916] = 0x99b;
		pattern1[1917] = 0x998;
		pattern1[1918] = 0x995;
		pattern1[1919] = 0x992;
		pattern1[1920] = 0x98f;
		pattern1[1921] = 0x98c;
		pattern1[1922] = 0x989;
		pattern1[1923] = 0x986;
		pattern1[1924] = 0x983;
		pattern1[1925] = 0x980;
		pattern1[1926] = 0x97c;
		pattern1[1927] = 0x979;
		pattern1[1928] = 0x976;
		pattern1[1929] = 0x973;
		pattern1[1930] = 0x970;
		pattern1[1931] = 0x96d;
		pattern1[1932] = 0x96a;
		pattern1[1933] = 0x967;
		pattern1[1934] = 0x964;
		pattern1[1935] = 0x961;
		pattern1[1936] = 0x95e;
		pattern1[1937] = 0x95a;
		pattern1[1938] = 0x957;
		pattern1[1939] = 0x954;
		pattern1[1940] = 0x951;
		pattern1[1941] = 0x94e;
		pattern1[1942] = 0x94b;
		pattern1[1943] = 0x948;
		pattern1[1944] = 0x945;
		pattern1[1945] = 0x942;
		pattern1[1946] = 0x93f;
		pattern1[1947] = 0x93b;
		pattern1[1948] = 0x938;
		pattern1[1949] = 0x935;
		pattern1[1950] = 0x932;
		pattern1[1951] = 0x92f;
		pattern1[1952] = 0x92c;
		pattern1[1953] = 0x929;
		pattern1[1954] = 0x926;
		pattern1[1955] = 0x923;
		pattern1[1956] = 0x91f;
		pattern1[1957] = 0x91c;
		pattern1[1958] = 0x919;
		pattern1[1959] = 0x916;
		pattern1[1960] = 0x913;
		pattern1[1961] = 0x910;
		pattern1[1962] = 0x90d;
		pattern1[1963] = 0x90a;
		pattern1[1964] = 0x907;
		pattern1[1965] = 0x903;
		pattern1[1966] = 0x900;
		pattern1[1967] = 0x8fd;
		pattern1[1968] = 0x8fa;
		pattern1[1969] = 0x8f7;
		pattern1[1970] = 0x8f4;
		pattern1[1971] = 0x8f1;
		pattern1[1972] = 0x8ee;
		pattern1[1973] = 0x8eb;
		pattern1[1974] = 0x8e7;
		pattern1[1975] = 0x8e4;
		pattern1[1976] = 0x8e1;
		pattern1[1977] = 0x8de;
		pattern1[1978] = 0x8db;
		pattern1[1979] = 0x8d8;
		pattern1[1980] = 0x8d5;
		pattern1[1981] = 0x8d2;
		pattern1[1982] = 0x8ce;
		pattern1[1983] = 0x8cb;
		pattern1[1984] = 0x8c8;
		pattern1[1985] = 0x8c5;
		pattern1[1986] = 0x8c2;
		pattern1[1987] = 0x8bf;
		pattern1[1988] = 0x8bc;
		pattern1[1989] = 0x8b9;
		pattern1[1990] = 0x8b5;
		pattern1[1991] = 0x8b2;
		pattern1[1992] = 0x8af;
		pattern1[1993] = 0x8ac;
		pattern1[1994] = 0x8a9;
		pattern1[1995] = 0x8a6;
		pattern1[1996] = 0x8a3;
		pattern1[1997] = 0x8a0;
		pattern1[1998] = 0x89c;
		pattern1[1999] = 0x899;
		pattern1[2000] = 0x896;
		pattern1[2001] = 0x893;
		pattern1[2002] = 0x890;
		pattern1[2003] = 0x88d;
		pattern1[2004] = 0x88a;
		pattern1[2005] = 0x886;
		pattern1[2006] = 0x883;
		pattern1[2007] = 0x880;
		pattern1[2008] = 0x87d;
		pattern1[2009] = 0x87a;
		pattern1[2010] = 0x877;
		pattern1[2011] = 0x874;
		pattern1[2012] = 0x871;
		pattern1[2013] = 0x86d;
		pattern1[2014] = 0x86a;
		pattern1[2015] = 0x867;
		pattern1[2016] = 0x864;
		pattern1[2017] = 0x861;
		pattern1[2018] = 0x85e;
		pattern1[2019] = 0x85b;
		pattern1[2020] = 0x857;
		pattern1[2021] = 0x854;
		pattern1[2022] = 0x851;
		pattern1[2023] = 0x84e;
		pattern1[2024] = 0x84b;
		pattern1[2025] = 0x848;
		pattern1[2026] = 0x845;
		pattern1[2027] = 0x841;
		pattern1[2028] = 0x83e;
		pattern1[2029] = 0x83b;
		pattern1[2030] = 0x838;
		pattern1[2031] = 0x835;
		pattern1[2032] = 0x832;
		pattern1[2033] = 0x82f;
		pattern1[2034] = 0x82b;
		pattern1[2035] = 0x828;
		pattern1[2036] = 0x825;
		pattern1[2037] = 0x822;
		pattern1[2038] = 0x81f;
		pattern1[2039] = 0x81c;
		pattern1[2040] = 0x819;
		pattern1[2041] = 0x815;
		pattern1[2042] = 0x812;
		pattern1[2043] = 0x80f;
		pattern1[2044] = 0x80c;
		pattern1[2045] = 0x809;
		pattern1[2046] = 0x806;
		pattern1[2047] = 0x803;
		pattern1[2048] = 0x800;
		pattern1[2049] = 0x7fc;
		pattern1[2050] = 0x7f9;
		pattern1[2051] = 0x7f6;
		pattern1[2052] = 0x7f3;
		pattern1[2053] = 0x7f0;
		pattern1[2054] = 0x7ed;
		pattern1[2055] = 0x7ea;
		pattern1[2056] = 0x7e6;
		pattern1[2057] = 0x7e3;
		pattern1[2058] = 0x7e0;
		pattern1[2059] = 0x7dd;
		pattern1[2060] = 0x7da;
		pattern1[2061] = 0x7d7;
		pattern1[2062] = 0x7d4;
		pattern1[2063] = 0x7d0;
		pattern1[2064] = 0x7cd;
		pattern1[2065] = 0x7ca;
		pattern1[2066] = 0x7c7;
		pattern1[2067] = 0x7c4;
		pattern1[2068] = 0x7c1;
		pattern1[2069] = 0x7be;
		pattern1[2070] = 0x7ba;
		pattern1[2071] = 0x7b7;
		pattern1[2072] = 0x7b4;
		pattern1[2073] = 0x7b1;
		pattern1[2074] = 0x7ae;
		pattern1[2075] = 0x7ab;
		pattern1[2076] = 0x7a8;
		pattern1[2077] = 0x7a4;
		pattern1[2078] = 0x7a1;
		pattern1[2079] = 0x79e;
		pattern1[2080] = 0x79b;
		pattern1[2081] = 0x798;
		pattern1[2082] = 0x795;
		pattern1[2083] = 0x792;
		pattern1[2084] = 0x78e;
		pattern1[2085] = 0x78b;
		pattern1[2086] = 0x788;
		pattern1[2087] = 0x785;
		pattern1[2088] = 0x782;
		pattern1[2089] = 0x77f;
		pattern1[2090] = 0x77c;
		pattern1[2091] = 0x779;
		pattern1[2092] = 0x775;
		pattern1[2093] = 0x772;
		pattern1[2094] = 0x76f;
		pattern1[2095] = 0x76c;
		pattern1[2096] = 0x769;
		pattern1[2097] = 0x766;
		pattern1[2098] = 0x763;
		pattern1[2099] = 0x75f;
		pattern1[2100] = 0x75c;
		pattern1[2101] = 0x759;
		pattern1[2102] = 0x756;
		pattern1[2103] = 0x753;
		pattern1[2104] = 0x750;
		pattern1[2105] = 0x74d;
		pattern1[2106] = 0x74a;
		pattern1[2107] = 0x746;
		pattern1[2108] = 0x743;
		pattern1[2109] = 0x740;
		pattern1[2110] = 0x73d;
		pattern1[2111] = 0x73a;
		pattern1[2112] = 0x737;
		pattern1[2113] = 0x734;
		pattern1[2114] = 0x731;
		pattern1[2115] = 0x72d;
		pattern1[2116] = 0x72a;
		pattern1[2117] = 0x727;
		pattern1[2118] = 0x724;
		pattern1[2119] = 0x721;
		pattern1[2120] = 0x71e;
		pattern1[2121] = 0x71b;
		pattern1[2122] = 0x718;
		pattern1[2123] = 0x714;
		pattern1[2124] = 0x711;
		pattern1[2125] = 0x70e;
		pattern1[2126] = 0x70b;
		pattern1[2127] = 0x708;
		pattern1[2128] = 0x705;
		pattern1[2129] = 0x702;
		pattern1[2130] = 0x6ff;
		pattern1[2131] = 0x6fc;
		pattern1[2132] = 0x6f8;
		pattern1[2133] = 0x6f5;
		pattern1[2134] = 0x6f2;
		pattern1[2135] = 0x6ef;
		pattern1[2136] = 0x6ec;
		pattern1[2137] = 0x6e9;
		pattern1[2138] = 0x6e6;
		pattern1[2139] = 0x6e3;
		pattern1[2140] = 0x6e0;
		pattern1[2141] = 0x6dc;
		pattern1[2142] = 0x6d9;
		pattern1[2143] = 0x6d6;
		pattern1[2144] = 0x6d3;
		pattern1[2145] = 0x6d0;
		pattern1[2146] = 0x6cd;
		pattern1[2147] = 0x6ca;
		pattern1[2148] = 0x6c7;
		pattern1[2149] = 0x6c4;
		pattern1[2150] = 0x6c0;
		pattern1[2151] = 0x6bd;
		pattern1[2152] = 0x6ba;
		pattern1[2153] = 0x6b7;
		pattern1[2154] = 0x6b4;
		pattern1[2155] = 0x6b1;
		pattern1[2156] = 0x6ae;
		pattern1[2157] = 0x6ab;
		pattern1[2158] = 0x6a8;
		pattern1[2159] = 0x6a5;
		pattern1[2160] = 0x6a1;
		pattern1[2161] = 0x69e;
		pattern1[2162] = 0x69b;
		pattern1[2163] = 0x698;
		pattern1[2164] = 0x695;
		pattern1[2165] = 0x692;
		pattern1[2166] = 0x68f;
		pattern1[2167] = 0x68c;
		pattern1[2168] = 0x689;
		pattern1[2169] = 0x686;
		pattern1[2170] = 0x683;
		pattern1[2171] = 0x67f;
		pattern1[2172] = 0x67c;
		pattern1[2173] = 0x679;
		pattern1[2174] = 0x676;
		pattern1[2175] = 0x673;
		pattern1[2176] = 0x670;
		pattern1[2177] = 0x66d;
		pattern1[2178] = 0x66a;
		pattern1[2179] = 0x667;
		pattern1[2180] = 0x664;
		pattern1[2181] = 0x661;
		pattern1[2182] = 0x65e;
		pattern1[2183] = 0x65b;
		pattern1[2184] = 0x657;
		pattern1[2185] = 0x654;
		pattern1[2186] = 0x651;
		pattern1[2187] = 0x64e;
		pattern1[2188] = 0x64b;
		pattern1[2189] = 0x648;
		pattern1[2190] = 0x645;
		pattern1[2191] = 0x642;
		pattern1[2192] = 0x63f;
		pattern1[2193] = 0x63c;
		pattern1[2194] = 0x639;
		pattern1[2195] = 0x636;
		pattern1[2196] = 0x633;
		pattern1[2197] = 0x630;
		pattern1[2198] = 0x62d;
		pattern1[2199] = 0x629;
		pattern1[2200] = 0x626;
		pattern1[2201] = 0x623;
		pattern1[2202] = 0x620;
		pattern1[2203] = 0x61d;
		pattern1[2204] = 0x61a;
		pattern1[2205] = 0x617;
		pattern1[2206] = 0x614;
		pattern1[2207] = 0x611;
		pattern1[2208] = 0x60e;
		pattern1[2209] = 0x60b;
		pattern1[2210] = 0x608;
		pattern1[2211] = 0x605;
		pattern1[2212] = 0x602;
		pattern1[2213] = 0x5ff;
		pattern1[2214] = 0x5fc;
		pattern1[2215] = 0x5f9;
		pattern1[2216] = 0x5f6;
		pattern1[2217] = 0x5f3;
		pattern1[2218] = 0x5f0;
		pattern1[2219] = 0x5ed;
		pattern1[2220] = 0x5ea;
		pattern1[2221] = 0x5e6;
		pattern1[2222] = 0x5e3;
		pattern1[2223] = 0x5e0;
		pattern1[2224] = 0x5dd;
		pattern1[2225] = 0x5da;
		pattern1[2226] = 0x5d7;
		pattern1[2227] = 0x5d4;
		pattern1[2228] = 0x5d1;
		pattern1[2229] = 0x5ce;
		pattern1[2230] = 0x5cb;
		pattern1[2231] = 0x5c8;
		pattern1[2232] = 0x5c5;
		pattern1[2233] = 0x5c2;
		pattern1[2234] = 0x5bf;
		pattern1[2235] = 0x5bc;
		pattern1[2236] = 0x5b9;
		pattern1[2237] = 0x5b6;
		pattern1[2238] = 0x5b3;
		pattern1[2239] = 0x5b0;
		pattern1[2240] = 0x5ad;
		pattern1[2241] = 0x5aa;
		pattern1[2242] = 0x5a7;
		pattern1[2243] = 0x5a4;
		pattern1[2244] = 0x5a1;
		pattern1[2245] = 0x59e;
		pattern1[2246] = 0x59b;
		pattern1[2247] = 0x598;
		pattern1[2248] = 0x595;
		pattern1[2249] = 0x592;
		pattern1[2250] = 0x58f;
		pattern1[2251] = 0x58c;
		pattern1[2252] = 0x589;
		pattern1[2253] = 0x586;
		pattern1[2254] = 0x583;
		pattern1[2255] = 0x580;
		pattern1[2256] = 0x57d;
		pattern1[2257] = 0x57a;
		pattern1[2258] = 0x577;
		pattern1[2259] = 0x574;
		pattern1[2260] = 0x571;
		pattern1[2261] = 0x56e;
		pattern1[2262] = 0x56b;
		pattern1[2263] = 0x568;
		pattern1[2264] = 0x565;
		pattern1[2265] = 0x562;
		pattern1[2266] = 0x55f;
		pattern1[2267] = 0x55d;
		pattern1[2268] = 0x55a;
		pattern1[2269] = 0x557;
		pattern1[2270] = 0x554;
		pattern1[2271] = 0x551;
		pattern1[2272] = 0x54e;
		pattern1[2273] = 0x54b;
		pattern1[2274] = 0x548;
		pattern1[2275] = 0x545;
		pattern1[2276] = 0x542;
		pattern1[2277] = 0x53f;
		pattern1[2278] = 0x53c;
		pattern1[2279] = 0x539;
		pattern1[2280] = 0x536;
		pattern1[2281] = 0x533;
		pattern1[2282] = 0x530;
		pattern1[2283] = 0x52d;
		pattern1[2284] = 0x52a;
		pattern1[2285] = 0x527;
		pattern1[2286] = 0x524;
		pattern1[2287] = 0x522;
		pattern1[2288] = 0x51f;
		pattern1[2289] = 0x51c;
		pattern1[2290] = 0x519;
		pattern1[2291] = 0x516;
		pattern1[2292] = 0x513;
		pattern1[2293] = 0x510;
		pattern1[2294] = 0x50d;
		pattern1[2295] = 0x50a;
		pattern1[2296] = 0x507;
		pattern1[2297] = 0x504;
		pattern1[2298] = 0x501;
		pattern1[2299] = 0x4fe;
		pattern1[2300] = 0x4fc;
		pattern1[2301] = 0x4f9;
		pattern1[2302] = 0x4f6;
		pattern1[2303] = 0x4f3;
		pattern1[2304] = 0x4f0;
		pattern1[2305] = 0x4ed;
		pattern1[2306] = 0x4ea;
		pattern1[2307] = 0x4e7;
		pattern1[2308] = 0x4e4;
		pattern1[2309] = 0x4e1;
		pattern1[2310] = 0x4df;
		pattern1[2311] = 0x4dc;
		pattern1[2312] = 0x4d9;
		pattern1[2313] = 0x4d6;
		pattern1[2314] = 0x4d3;
		pattern1[2315] = 0x4d0;
		pattern1[2316] = 0x4cd;
		pattern1[2317] = 0x4ca;
		pattern1[2318] = 0x4c8;
		pattern1[2319] = 0x4c5;
		pattern1[2320] = 0x4c2;
		pattern1[2321] = 0x4bf;
		pattern1[2322] = 0x4bc;
		pattern1[2323] = 0x4b9;
		pattern1[2324] = 0x4b6;
		pattern1[2325] = 0x4b3;
		pattern1[2326] = 0x4b1;
		pattern1[2327] = 0x4ae;
		pattern1[2328] = 0x4ab;
		pattern1[2329] = 0x4a8;
		pattern1[2330] = 0x4a5;
		pattern1[2331] = 0x4a2;
		pattern1[2332] = 0x49f;
		pattern1[2333] = 0x49d;
		pattern1[2334] = 0x49a;
		pattern1[2335] = 0x497;
		pattern1[2336] = 0x494;
		pattern1[2337] = 0x491;
		pattern1[2338] = 0x48e;
		pattern1[2339] = 0x48c;
		pattern1[2340] = 0x489;
		pattern1[2341] = 0x486;
		pattern1[2342] = 0x483;
		pattern1[2343] = 0x480;
		pattern1[2344] = 0x47d;
		pattern1[2345] = 0x47b;
		pattern1[2346] = 0x478;
		pattern1[2347] = 0x475;
		pattern1[2348] = 0x472;
		pattern1[2349] = 0x46f;
		pattern1[2350] = 0x46d;
		pattern1[2351] = 0x46a;
		pattern1[2352] = 0x467;
		pattern1[2353] = 0x464;
		pattern1[2354] = 0x461;
		pattern1[2355] = 0x45f;
		pattern1[2356] = 0x45c;
		pattern1[2357] = 0x459;
		pattern1[2358] = 0x456;
		pattern1[2359] = 0x453;
		pattern1[2360] = 0x451;
		pattern1[2361] = 0x44e;
		pattern1[2362] = 0x44b;
		pattern1[2363] = 0x448;
		pattern1[2364] = 0x445;
		pattern1[2365] = 0x443;
		pattern1[2366] = 0x440;
		pattern1[2367] = 0x43d;
		pattern1[2368] = 0x43a;
		pattern1[2369] = 0x438;
		pattern1[2370] = 0x435;
		pattern1[2371] = 0x432;
		pattern1[2372] = 0x42f;
		pattern1[2373] = 0x42c;
		pattern1[2374] = 0x42a;
		pattern1[2375] = 0x427;
		pattern1[2376] = 0x424;
		pattern1[2377] = 0x421;
		pattern1[2378] = 0x41f;
		pattern1[2379] = 0x41c;
		pattern1[2380] = 0x419;
		pattern1[2381] = 0x416;
		pattern1[2382] = 0x414;
		pattern1[2383] = 0x411;
		pattern1[2384] = 0x40e;
		pattern1[2385] = 0x40c;
		pattern1[2386] = 0x409;
		pattern1[2387] = 0x406;
		pattern1[2388] = 0x403;
		pattern1[2389] = 0x401;
		pattern1[2390] = 0x3fe;
		pattern1[2391] = 0x3fb;
		pattern1[2392] = 0x3f9;
		pattern1[2393] = 0x3f6;
		pattern1[2394] = 0x3f3;
		pattern1[2395] = 0x3f0;
		pattern1[2396] = 0x3ee;
		pattern1[2397] = 0x3eb;
		pattern1[2398] = 0x3e8;
		pattern1[2399] = 0x3e6;
		pattern1[2400] = 0x3e3;
		pattern1[2401] = 0x3e0;
		pattern1[2402] = 0x3dd;
		pattern1[2403] = 0x3db;
		pattern1[2404] = 0x3d8;
		pattern1[2405] = 0x3d5;
		pattern1[2406] = 0x3d3;
		pattern1[2407] = 0x3d0;
		pattern1[2408] = 0x3cd;
		pattern1[2409] = 0x3cb;
		pattern1[2410] = 0x3c8;
		pattern1[2411] = 0x3c5;
		pattern1[2412] = 0x3c3;
		pattern1[2413] = 0x3c0;
		pattern1[2414] = 0x3bd;
		pattern1[2415] = 0x3bb;
		pattern1[2416] = 0x3b8;
		pattern1[2417] = 0x3b5;
		pattern1[2418] = 0x3b3;
		pattern1[2419] = 0x3b0;
		pattern1[2420] = 0x3ad;
		pattern1[2421] = 0x3ab;
		pattern1[2422] = 0x3a8;
		pattern1[2423] = 0x3a6;
		pattern1[2424] = 0x3a3;
		pattern1[2425] = 0x3a0;
		pattern1[2426] = 0x39e;
		pattern1[2427] = 0x39b;
		pattern1[2428] = 0x398;
		pattern1[2429] = 0x396;
		pattern1[2430] = 0x393;
		pattern1[2431] = 0x391;
		pattern1[2432] = 0x38e;
		pattern1[2433] = 0x38b;
		pattern1[2434] = 0x389;
		pattern1[2435] = 0x386;
		pattern1[2436] = 0x384;
		pattern1[2437] = 0x381;
		pattern1[2438] = 0x37e;
		pattern1[2439] = 0x37c;
		pattern1[2440] = 0x379;
		pattern1[2441] = 0x377;
		pattern1[2442] = 0x374;
		pattern1[2443] = 0x371;
		pattern1[2444] = 0x36f;
		pattern1[2445] = 0x36c;
		pattern1[2446] = 0x36a;
		pattern1[2447] = 0x367;
		pattern1[2448] = 0x365;
		pattern1[2449] = 0x362;
		pattern1[2450] = 0x35f;
		pattern1[2451] = 0x35d;
		pattern1[2452] = 0x35a;
		pattern1[2453] = 0x358;
		pattern1[2454] = 0x355;
		pattern1[2455] = 0x353;
		pattern1[2456] = 0x350;
		pattern1[2457] = 0x34e;
		pattern1[2458] = 0x34b;
		pattern1[2459] = 0x348;
		pattern1[2460] = 0x346;
		pattern1[2461] = 0x343;
		pattern1[2462] = 0x341;
		pattern1[2463] = 0x33e;
		pattern1[2464] = 0x33c;
		pattern1[2465] = 0x339;
		pattern1[2466] = 0x337;
		pattern1[2467] = 0x334;
		pattern1[2468] = 0x332;
		pattern1[2469] = 0x32f;
		pattern1[2470] = 0x32d;
		pattern1[2471] = 0x32a;
		pattern1[2472] = 0x328;
		pattern1[2473] = 0x325;
		pattern1[2474] = 0x323;
		pattern1[2475] = 0x320;
		pattern1[2476] = 0x31e;
		pattern1[2477] = 0x31b;
		pattern1[2478] = 0x319;
		pattern1[2479] = 0x316;
		pattern1[2480] = 0x314;
		pattern1[2481] = 0x311;
		pattern1[2482] = 0x30f;
		pattern1[2483] = 0x30c;
		pattern1[2484] = 0x30a;
		pattern1[2485] = 0x307;
		pattern1[2486] = 0x305;
		pattern1[2487] = 0x303;
		pattern1[2488] = 0x300;
		pattern1[2489] = 0x2fe;
		pattern1[2490] = 0x2fb;
		pattern1[2491] = 0x2f9;
		pattern1[2492] = 0x2f6;
		pattern1[2493] = 0x2f4;
		pattern1[2494] = 0x2f1;
		pattern1[2495] = 0x2ef;
		pattern1[2496] = 0x2ed;
		pattern1[2497] = 0x2ea;
		pattern1[2498] = 0x2e8;
		pattern1[2499] = 0x2e5;
		pattern1[2500] = 0x2e3;
		pattern1[2501] = 0x2e0;
		pattern1[2502] = 0x2de;
		pattern1[2503] = 0x2dc;
		pattern1[2504] = 0x2d9;
		pattern1[2505] = 0x2d7;
		pattern1[2506] = 0x2d4;
		pattern1[2507] = 0x2d2;
		pattern1[2508] = 0x2d0;
		pattern1[2509] = 0x2cd;
		pattern1[2510] = 0x2cb;
		pattern1[2511] = 0x2c9;
		pattern1[2512] = 0x2c6;
		pattern1[2513] = 0x2c4;
		pattern1[2514] = 0x2c1;
		pattern1[2515] = 0x2bf;
		pattern1[2516] = 0x2bd;
		pattern1[2517] = 0x2ba;
		pattern1[2518] = 0x2b8;
		pattern1[2519] = 0x2b6;
		pattern1[2520] = 0x2b3;
		pattern1[2521] = 0x2b1;
		pattern1[2522] = 0x2af;
		pattern1[2523] = 0x2ac;
		pattern1[2524] = 0x2aa;
		pattern1[2525] = 0x2a7;
		pattern1[2526] = 0x2a5;
		pattern1[2527] = 0x2a3;
		pattern1[2528] = 0x2a0;
		pattern1[2529] = 0x29e;
		pattern1[2530] = 0x29c;
		pattern1[2531] = 0x29a;
		pattern1[2532] = 0x297;
		pattern1[2533] = 0x295;
		pattern1[2534] = 0x293;
		pattern1[2535] = 0x290;
		pattern1[2536] = 0x28e;
		pattern1[2537] = 0x28c;
		pattern1[2538] = 0x289;
		pattern1[2539] = 0x287;
		pattern1[2540] = 0x285;
		pattern1[2541] = 0x283;
		pattern1[2542] = 0x280;
		pattern1[2543] = 0x27e;
		pattern1[2544] = 0x27c;
		pattern1[2545] = 0x279;
		pattern1[2546] = 0x277;
		pattern1[2547] = 0x275;
		pattern1[2548] = 0x273;
		pattern1[2549] = 0x270;
		pattern1[2550] = 0x26e;
		pattern1[2551] = 0x26c;
		pattern1[2552] = 0x26a;
		pattern1[2553] = 0x267;
		pattern1[2554] = 0x265;
		pattern1[2555] = 0x263;
		pattern1[2556] = 0x261;
		pattern1[2557] = 0x25e;
		pattern1[2558] = 0x25c;
		pattern1[2559] = 0x25a;
		pattern1[2560] = 0x258;
		pattern1[2561] = 0x255;
		pattern1[2562] = 0x253;
		pattern1[2563] = 0x251;
		pattern1[2564] = 0x24f;
		pattern1[2565] = 0x24d;
		pattern1[2566] = 0x24a;
		pattern1[2567] = 0x248;
		pattern1[2568] = 0x246;
		pattern1[2569] = 0x244;
		pattern1[2570] = 0x242;
		pattern1[2571] = 0x23f;
		pattern1[2572] = 0x23d;
		pattern1[2573] = 0x23b;
		pattern1[2574] = 0x239;
		pattern1[2575] = 0x237;
		pattern1[2576] = 0x235;
		pattern1[2577] = 0x232;
		pattern1[2578] = 0x230;
		pattern1[2579] = 0x22e;
		pattern1[2580] = 0x22c;
		pattern1[2581] = 0x22a;
		pattern1[2582] = 0x228;
		pattern1[2583] = 0x226;
		pattern1[2584] = 0x223;
		pattern1[2585] = 0x221;
		pattern1[2586] = 0x21f;
		pattern1[2587] = 0x21d;
		pattern1[2588] = 0x21b;
		pattern1[2589] = 0x219;
		pattern1[2590] = 0x217;
		pattern1[2591] = 0x215;
		pattern1[2592] = 0x212;
		pattern1[2593] = 0x210;
		pattern1[2594] = 0x20e;
		pattern1[2595] = 0x20c;
		pattern1[2596] = 0x20a;
		pattern1[2597] = 0x208;
		pattern1[2598] = 0x206;
		pattern1[2599] = 0x204;
		pattern1[2600] = 0x202;
		pattern1[2601] = 0x200;
		pattern1[2602] = 0x1fd;
		pattern1[2603] = 0x1fb;
		pattern1[2604] = 0x1f9;
		pattern1[2605] = 0x1f7;
		pattern1[2606] = 0x1f5;
		pattern1[2607] = 0x1f3;
		pattern1[2608] = 0x1f1;
		pattern1[2609] = 0x1ef;
		pattern1[2610] = 0x1ed;
		pattern1[2611] = 0x1eb;
		pattern1[2612] = 0x1e9;
		pattern1[2613] = 0x1e7;
		pattern1[2614] = 0x1e5;
		pattern1[2615] = 0x1e3;
		pattern1[2616] = 0x1e1;
		pattern1[2617] = 0x1df;
		pattern1[2618] = 0x1dd;
		pattern1[2619] = 0x1db;
		pattern1[2620] = 0x1d9;
		pattern1[2621] = 0x1d7;
		pattern1[2622] = 0x1d5;
		pattern1[2623] = 0x1d3;
		pattern1[2624] = 0x1d1;
		pattern1[2625] = 0x1cf;
		pattern1[2626] = 0x1cd;
		pattern1[2627] = 0x1cb;
		pattern1[2628] = 0x1c9;
		pattern1[2629] = 0x1c7;
		pattern1[2630] = 0x1c5;
		pattern1[2631] = 0x1c3;
		pattern1[2632] = 0x1c1;
		pattern1[2633] = 0x1bf;
		pattern1[2634] = 0x1bd;
		pattern1[2635] = 0x1bb;
		pattern1[2636] = 0x1b9;
		pattern1[2637] = 0x1b7;
		pattern1[2638] = 0x1b5;
		pattern1[2639] = 0x1b3;
		pattern1[2640] = 0x1b1;
		pattern1[2641] = 0x1af;
		pattern1[2642] = 0x1ae;
		pattern1[2643] = 0x1ac;
		pattern1[2644] = 0x1aa;
		pattern1[2645] = 0x1a8;
		pattern1[2646] = 0x1a6;
		pattern1[2647] = 0x1a4;
		pattern1[2648] = 0x1a2;
		pattern1[2649] = 0x1a0;
		pattern1[2650] = 0x19e;
		pattern1[2651] = 0x19c;
		pattern1[2652] = 0x19a;
		pattern1[2653] = 0x199;
		pattern1[2654] = 0x197;
		pattern1[2655] = 0x195;
		pattern1[2656] = 0x193;
		pattern1[2657] = 0x191;
		pattern1[2658] = 0x18f;
		pattern1[2659] = 0x18d;
		pattern1[2660] = 0x18b;
		pattern1[2661] = 0x18a;
		pattern1[2662] = 0x188;
		pattern1[2663] = 0x186;
		pattern1[2664] = 0x184;
		pattern1[2665] = 0x182;
		pattern1[2666] = 0x180;
		pattern1[2667] = 0x17f;
		pattern1[2668] = 0x17d;
		pattern1[2669] = 0x17b;
		pattern1[2670] = 0x179;
		pattern1[2671] = 0x177;
		pattern1[2672] = 0x175;
		pattern1[2673] = 0x174;
		pattern1[2674] = 0x172;
		pattern1[2675] = 0x170;
		pattern1[2676] = 0x16e;
		pattern1[2677] = 0x16d;
		pattern1[2678] = 0x16b;
		pattern1[2679] = 0x169;
		pattern1[2680] = 0x167;
		pattern1[2681] = 0x165;
		pattern1[2682] = 0x164;
		pattern1[2683] = 0x162;
		pattern1[2684] = 0x160;
		pattern1[2685] = 0x15e;
		pattern1[2686] = 0x15d;
		pattern1[2687] = 0x15b;
		pattern1[2688] = 0x159;
		pattern1[2689] = 0x157;
		pattern1[2690] = 0x156;
		pattern1[2691] = 0x154;
		pattern1[2692] = 0x152;
		pattern1[2693] = 0x150;
		pattern1[2694] = 0x14f;
		pattern1[2695] = 0x14d;
		pattern1[2696] = 0x14b;
		pattern1[2697] = 0x14a;
		pattern1[2698] = 0x148;
		pattern1[2699] = 0x146;
		pattern1[2700] = 0x144;
		pattern1[2701] = 0x143;
		pattern1[2702] = 0x141;
		pattern1[2703] = 0x13f;
		pattern1[2704] = 0x13e;
		pattern1[2705] = 0x13c;
		pattern1[2706] = 0x13a;
		pattern1[2707] = 0x139;
		pattern1[2708] = 0x137;
		pattern1[2709] = 0x135;
		pattern1[2710] = 0x134;
		pattern1[2711] = 0x132;
		pattern1[2712] = 0x130;
		pattern1[2713] = 0x12f;
		pattern1[2714] = 0x12d;
		pattern1[2715] = 0x12b;
		pattern1[2716] = 0x12a;
		pattern1[2717] = 0x128;
		pattern1[2718] = 0x127;
		pattern1[2719] = 0x125;
		pattern1[2720] = 0x123;
		pattern1[2721] = 0x122;
		pattern1[2722] = 0x120;
		pattern1[2723] = 0x11e;
		pattern1[2724] = 0x11d;
		pattern1[2725] = 0x11b;
		pattern1[2726] = 0x11a;
		pattern1[2727] = 0x118;
		pattern1[2728] = 0x117;
		pattern1[2729] = 0x115;
		pattern1[2730] = 0x113;
		pattern1[2731] = 0x112;
		pattern1[2732] = 0x110;
		pattern1[2733] = 0x10f;
		pattern1[2734] = 0x10d;
		pattern1[2735] = 0x10c;
		pattern1[2736] = 0x10a;
		pattern1[2737] = 0x108;
		pattern1[2738] = 0x107;
		pattern1[2739] = 0x105;
		pattern1[2740] = 0x104;
		pattern1[2741] = 0x102;
		pattern1[2742] = 0x101;
		pattern1[2743] = 0xff;
		pattern1[2744] = 0xfe;
		pattern1[2745] = 0xfc;
		pattern1[2746] = 0xfb;
		pattern1[2747] = 0xf9;
		pattern1[2748] = 0xf8;
		pattern1[2749] = 0xf6;
		pattern1[2750] = 0xf5;
		pattern1[2751] = 0xf3;
		pattern1[2752] = 0xf2;
		pattern1[2753] = 0xf0;
		pattern1[2754] = 0xef;
		pattern1[2755] = 0xed;
		pattern1[2756] = 0xec;
		pattern1[2757] = 0xea;
		pattern1[2758] = 0xe9;
		pattern1[2759] = 0xe8;
		pattern1[2760] = 0xe6;
		pattern1[2761] = 0xe5;
		pattern1[2762] = 0xe3;
		pattern1[2763] = 0xe2;
		pattern1[2764] = 0xe0;
		pattern1[2765] = 0xdf;
		pattern1[2766] = 0xdd;
		pattern1[2767] = 0xdc;
		pattern1[2768] = 0xdb;
		pattern1[2769] = 0xd9;
		pattern1[2770] = 0xd8;
		pattern1[2771] = 0xd6;
		pattern1[2772] = 0xd5;
		pattern1[2773] = 0xd4;
		pattern1[2774] = 0xd2;
		pattern1[2775] = 0xd1;
		pattern1[2776] = 0xcf;
		pattern1[2777] = 0xce;
		pattern1[2778] = 0xcd;
		pattern1[2779] = 0xcb;
		pattern1[2780] = 0xca;
		pattern1[2781] = 0xc9;
		pattern1[2782] = 0xc7;
		pattern1[2783] = 0xc6;
		pattern1[2784] = 0xc5;
		pattern1[2785] = 0xc3;
		pattern1[2786] = 0xc2;
		pattern1[2787] = 0xc1;
		pattern1[2788] = 0xbf;
		pattern1[2789] = 0xbe;
		pattern1[2790] = 0xbd;
		pattern1[2791] = 0xbb;
		pattern1[2792] = 0xba;
		pattern1[2793] = 0xb9;
		pattern1[2794] = 0xb7;
		pattern1[2795] = 0xb6;
		pattern1[2796] = 0xb5;
		pattern1[2797] = 0xb3;
		pattern1[2798] = 0xb2;
		pattern1[2799] = 0xb1;
		pattern1[2800] = 0xb0;
		pattern1[2801] = 0xae;
		pattern1[2802] = 0xad;
		pattern1[2803] = 0xac;
		pattern1[2804] = 0xab;
		pattern1[2805] = 0xa9;
		pattern1[2806] = 0xa8;
		pattern1[2807] = 0xa7;
		pattern1[2808] = 0xa6;
		pattern1[2809] = 0xa4;
		pattern1[2810] = 0xa3;
		pattern1[2811] = 0xa2;
		pattern1[2812] = 0xa1;
		pattern1[2813] = 0x9f;
		pattern1[2814] = 0x9e;
		pattern1[2815] = 0x9d;
		pattern1[2816] = 0x9c;
		pattern1[2817] = 0x9b;
		pattern1[2818] = 0x99;
		pattern1[2819] = 0x98;
		pattern1[2820] = 0x97;
		pattern1[2821] = 0x96;
		pattern1[2822] = 0x95;
		pattern1[2823] = 0x94;
		pattern1[2824] = 0x92;
		pattern1[2825] = 0x91;
		pattern1[2826] = 0x90;
		pattern1[2827] = 0x8f;
		pattern1[2828] = 0x8e;
		pattern1[2829] = 0x8d;
		pattern1[2830] = 0x8b;
		pattern1[2831] = 0x8a;
		pattern1[2832] = 0x89;
		pattern1[2833] = 0x88;
		pattern1[2834] = 0x87;
		pattern1[2835] = 0x86;
		pattern1[2836] = 0x85;
		pattern1[2837] = 0x84;
		pattern1[2838] = 0x82;
		pattern1[2839] = 0x81;
		pattern1[2840] = 0x80;
		pattern1[2841] = 0x7f;
		pattern1[2842] = 0x7e;
		pattern1[2843] = 0x7d;
		pattern1[2844] = 0x7c;
		pattern1[2845] = 0x7b;
		pattern1[2846] = 0x7a;
		pattern1[2847] = 0x79;
		pattern1[2848] = 0x78;
		pattern1[2849] = 0x77;
		pattern1[2850] = 0x76;
		pattern1[2851] = 0x75;
		pattern1[2852] = 0x73;
		pattern1[2853] = 0x72;
		pattern1[2854] = 0x71;
		pattern1[2855] = 0x70;
		pattern1[2856] = 0x6f;
		pattern1[2857] = 0x6e;
		pattern1[2858] = 0x6d;
		pattern1[2859] = 0x6c;
		pattern1[2860] = 0x6b;
		pattern1[2861] = 0x6a;
		pattern1[2862] = 0x69;
		pattern1[2863] = 0x68;
		pattern1[2864] = 0x67;
		pattern1[2865] = 0x66;
		pattern1[2866] = 0x65;
		pattern1[2867] = 0x64;
		pattern1[2868] = 0x63;
		pattern1[2869] = 0x62;
		pattern1[2870] = 0x62;
		pattern1[2871] = 0x61;
		pattern1[2872] = 0x60;
		pattern1[2873] = 0x5f;
		pattern1[2874] = 0x5e;
		pattern1[2875] = 0x5d;
		pattern1[2876] = 0x5c;
		pattern1[2877] = 0x5b;
		pattern1[2878] = 0x5a;
		pattern1[2879] = 0x59;
		pattern1[2880] = 0x58;
		pattern1[2881] = 0x57;
		pattern1[2882] = 0x56;
		pattern1[2883] = 0x55;
		pattern1[2884] = 0x55;
		pattern1[2885] = 0x54;
		pattern1[2886] = 0x53;
		pattern1[2887] = 0x52;
		pattern1[2888] = 0x51;
		pattern1[2889] = 0x50;
		pattern1[2890] = 0x4f;
		pattern1[2891] = 0x4e;
		pattern1[2892] = 0x4e;
		pattern1[2893] = 0x4d;
		pattern1[2894] = 0x4c;
		pattern1[2895] = 0x4b;
		pattern1[2896] = 0x4a;
		pattern1[2897] = 0x49;
		pattern1[2898] = 0x49;
		pattern1[2899] = 0x48;
		pattern1[2900] = 0x47;
		pattern1[2901] = 0x46;
		pattern1[2902] = 0x45;
		pattern1[2903] = 0x44;
		pattern1[2904] = 0x44;
		pattern1[2905] = 0x43;
		pattern1[2906] = 0x42;
		pattern1[2907] = 0x41;
		pattern1[2908] = 0x40;
		pattern1[2909] = 0x40;
		pattern1[2910] = 0x3f;
		pattern1[2911] = 0x3e;
		pattern1[2912] = 0x3d;
		pattern1[2913] = 0x3d;
		pattern1[2914] = 0x3c;
		pattern1[2915] = 0x3b;
		pattern1[2916] = 0x3a;
		pattern1[2917] = 0x3a;
		pattern1[2918] = 0x39;
		pattern1[2919] = 0x38;
		pattern1[2920] = 0x37;
		pattern1[2921] = 0x37;
		pattern1[2922] = 0x36;
		pattern1[2923] = 0x35;
		pattern1[2924] = 0x35;
		pattern1[2925] = 0x34;
		pattern1[2926] = 0x33;
		pattern1[2927] = 0x32;
		pattern1[2928] = 0x32;
		pattern1[2929] = 0x31;
		pattern1[2930] = 0x30;
		pattern1[2931] = 0x30;
		pattern1[2932] = 0x2f;
		pattern1[2933] = 0x2e;
		pattern1[2934] = 0x2e;
		pattern1[2935] = 0x2d;
		pattern1[2936] = 0x2c;
		pattern1[2937] = 0x2c;
		pattern1[2938] = 0x2b;
		pattern1[2939] = 0x2a;
		pattern1[2940] = 0x2a;
		pattern1[2941] = 0x29;
		pattern1[2942] = 0x29;
		pattern1[2943] = 0x28;
		pattern1[2944] = 0x27;
		pattern1[2945] = 0x27;
		pattern1[2946] = 0x26;
		pattern1[2947] = 0x26;
		pattern1[2948] = 0x25;
		pattern1[2949] = 0x24;
		pattern1[2950] = 0x24;
		pattern1[2951] = 0x23;
		pattern1[2952] = 0x23;
		pattern1[2953] = 0x22;
		pattern1[2954] = 0x21;
		pattern1[2955] = 0x21;
		pattern1[2956] = 0x20;
		pattern1[2957] = 0x20;
		pattern1[2958] = 0x1f;
		pattern1[2959] = 0x1f;
		pattern1[2960] = 0x1e;
		pattern1[2961] = 0x1e;
		pattern1[2962] = 0x1d;
		pattern1[2963] = 0x1d;
		pattern1[2964] = 0x1c;
		pattern1[2965] = 0x1c;
		pattern1[2966] = 0x1b;
		pattern1[2967] = 0x1b;
		pattern1[2968] = 0x1a;
		pattern1[2969] = 0x1a;
		pattern1[2970] = 0x19;
		pattern1[2971] = 0x19;
		pattern1[2972] = 0x18;
		pattern1[2973] = 0x18;
		pattern1[2974] = 0x17;
		pattern1[2975] = 0x17;
		pattern1[2976] = 0x16;
		pattern1[2977] = 0x16;
		pattern1[2978] = 0x15;
		pattern1[2979] = 0x15;
		pattern1[2980] = 0x14;
		pattern1[2981] = 0x14;
		pattern1[2982] = 0x13;
		pattern1[2983] = 0x13;
		pattern1[2984] = 0x13;
		pattern1[2985] = 0x12;
		pattern1[2986] = 0x12;
		pattern1[2987] = 0x11;
		pattern1[2988] = 0x11;
		pattern1[2989] = 0x11;
		pattern1[2990] = 0x10;
		pattern1[2991] = 0x10;
		pattern1[2992] = 0xf;
		pattern1[2993] = 0xf;
		pattern1[2994] = 0xf;
		pattern1[2995] = 0xe;
		pattern1[2996] = 0xe;
		pattern1[2997] = 0xe;
		pattern1[2998] = 0xd;
		pattern1[2999] = 0xd;
		pattern1[3000] = 0xc;
		pattern1[3001] = 0xc;
		pattern1[3002] = 0xc;
		pattern1[3003] = 0xb;
		pattern1[3004] = 0xb;
		pattern1[3005] = 0xb;
		pattern1[3006] = 0xa;
		pattern1[3007] = 0xa;
		pattern1[3008] = 0xa;
		pattern1[3009] = 0xa;
		pattern1[3010] = 0x9;
		pattern1[3011] = 0x9;
		pattern1[3012] = 0x9;
		pattern1[3013] = 0x8;
		pattern1[3014] = 0x8;
		pattern1[3015] = 0x8;
		pattern1[3016] = 0x8;
		pattern1[3017] = 0x7;
		pattern1[3018] = 0x7;
		pattern1[3019] = 0x7;
		pattern1[3020] = 0x7;
		pattern1[3021] = 0x6;
		pattern1[3022] = 0x6;
		pattern1[3023] = 0x6;
		pattern1[3024] = 0x6;
		pattern1[3025] = 0x5;
		pattern1[3026] = 0x5;
		pattern1[3027] = 0x5;
		pattern1[3028] = 0x5;
		pattern1[3029] = 0x4;
		pattern1[3030] = 0x4;
		pattern1[3031] = 0x4;
		pattern1[3032] = 0x4;
		pattern1[3033] = 0x4;
		pattern1[3034] = 0x3;
		pattern1[3035] = 0x3;
		pattern1[3036] = 0x3;
		pattern1[3037] = 0x3;
		pattern1[3038] = 0x3;
		pattern1[3039] = 0x3;
		pattern1[3040] = 0x2;
		pattern1[3041] = 0x2;
		pattern1[3042] = 0x2;
		pattern1[3043] = 0x2;
		pattern1[3044] = 0x2;
		pattern1[3045] = 0x2;
		pattern1[3046] = 0x2;
		pattern1[3047] = 0x2;
		pattern1[3048] = 0x1;
		pattern1[3049] = 0x1;
		pattern1[3050] = 0x1;
		pattern1[3051] = 0x1;
		pattern1[3052] = 0x1;
		pattern1[3053] = 0x1;
		pattern1[3054] = 0x1;
		pattern1[3055] = 0x1;
		pattern1[3056] = 0x1;
		pattern1[3057] = 0x1;
		pattern1[3058] = 0x0;
		pattern1[3059] = 0x0;
		pattern1[3060] = 0x0;
		pattern1[3061] = 0x0;
		pattern1[3062] = 0x0;
		pattern1[3063] = 0x0;
		pattern1[3064] = 0x0;
		pattern1[3065] = 0x0;
		pattern1[3066] = 0x0;
		pattern1[3067] = 0x0;
		pattern1[3068] = 0x0;
		pattern1[3069] = 0x0;
		pattern1[3070] = 0x0;
		pattern1[3071] = 0x0;
		pattern1[3072] = 0x0;
		pattern1[3073] = 0x0;
		pattern1[3074] = 0x0;
		pattern1[3075] = 0x0;
		pattern1[3076] = 0x0;
		pattern1[3077] = 0x0;
		pattern1[3078] = 0x0;
		pattern1[3079] = 0x0;
		pattern1[3080] = 0x0;
		pattern1[3081] = 0x0;
		pattern1[3082] = 0x0;
		pattern1[3083] = 0x0;
		pattern1[3084] = 0x0;
		pattern1[3085] = 0x0;
		pattern1[3086] = 0x0;
		pattern1[3087] = 0x1;
		pattern1[3088] = 0x1;
		pattern1[3089] = 0x1;
		pattern1[3090] = 0x1;
		pattern1[3091] = 0x1;
		pattern1[3092] = 0x1;
		pattern1[3093] = 0x1;
		pattern1[3094] = 0x1;
		pattern1[3095] = 0x1;
		pattern1[3096] = 0x1;
		pattern1[3097] = 0x2;
		pattern1[3098] = 0x2;
		pattern1[3099] = 0x2;
		pattern1[3100] = 0x2;
		pattern1[3101] = 0x2;
		pattern1[3102] = 0x2;
		pattern1[3103] = 0x2;
		pattern1[3104] = 0x2;
		pattern1[3105] = 0x3;
		pattern1[3106] = 0x3;
		pattern1[3107] = 0x3;
		pattern1[3108] = 0x3;
		pattern1[3109] = 0x3;
		pattern1[3110] = 0x3;
		pattern1[3111] = 0x4;
		pattern1[3112] = 0x4;
		pattern1[3113] = 0x4;
		pattern1[3114] = 0x4;
		pattern1[3115] = 0x4;
		pattern1[3116] = 0x5;
		pattern1[3117] = 0x5;
		pattern1[3118] = 0x5;
		pattern1[3119] = 0x5;
		pattern1[3120] = 0x6;
		pattern1[3121] = 0x6;
		pattern1[3122] = 0x6;
		pattern1[3123] = 0x6;
		pattern1[3124] = 0x7;
		pattern1[3125] = 0x7;
		pattern1[3126] = 0x7;
		pattern1[3127] = 0x7;
		pattern1[3128] = 0x8;
		pattern1[3129] = 0x8;
		pattern1[3130] = 0x8;
		pattern1[3131] = 0x8;
		pattern1[3132] = 0x9;
		pattern1[3133] = 0x9;
		pattern1[3134] = 0x9;
		pattern1[3135] = 0xa;
		pattern1[3136] = 0xa;
		pattern1[3137] = 0xa;
		pattern1[3138] = 0xa;
		pattern1[3139] = 0xb;
		pattern1[3140] = 0xb;
		pattern1[3141] = 0xb;
		pattern1[3142] = 0xc;
		pattern1[3143] = 0xc;
		pattern1[3144] = 0xc;
		pattern1[3145] = 0xd;
		pattern1[3146] = 0xd;
		pattern1[3147] = 0xe;
		pattern1[3148] = 0xe;
		pattern1[3149] = 0xe;
		pattern1[3150] = 0xf;
		pattern1[3151] = 0xf;
		pattern1[3152] = 0xf;
		pattern1[3153] = 0x10;
		pattern1[3154] = 0x10;
		pattern1[3155] = 0x11;
		pattern1[3156] = 0x11;
		pattern1[3157] = 0x11;
		pattern1[3158] = 0x12;
		pattern1[3159] = 0x12;
		pattern1[3160] = 0x13;
		pattern1[3161] = 0x13;
		pattern1[3162] = 0x13;
		pattern1[3163] = 0x14;
		pattern1[3164] = 0x14;
		pattern1[3165] = 0x15;
		pattern1[3166] = 0x15;
		pattern1[3167] = 0x16;
		pattern1[3168] = 0x16;
		pattern1[3169] = 0x17;
		pattern1[3170] = 0x17;
		pattern1[3171] = 0x18;
		pattern1[3172] = 0x18;
		pattern1[3173] = 0x19;
		pattern1[3174] = 0x19;
		pattern1[3175] = 0x1a;
		pattern1[3176] = 0x1a;
		pattern1[3177] = 0x1b;
		pattern1[3178] = 0x1b;
		pattern1[3179] = 0x1c;
		pattern1[3180] = 0x1c;
		pattern1[3181] = 0x1d;
		pattern1[3182] = 0x1d;
		pattern1[3183] = 0x1e;
		pattern1[3184] = 0x1e;
		pattern1[3185] = 0x1f;
		pattern1[3186] = 0x1f;
		pattern1[3187] = 0x20;
		pattern1[3188] = 0x20;
		pattern1[3189] = 0x21;
		pattern1[3190] = 0x21;
		pattern1[3191] = 0x22;
		pattern1[3192] = 0x23;
		pattern1[3193] = 0x23;
		pattern1[3194] = 0x24;
		pattern1[3195] = 0x24;
		pattern1[3196] = 0x25;
		pattern1[3197] = 0x26;
		pattern1[3198] = 0x26;
		pattern1[3199] = 0x27;
		pattern1[3200] = 0x27;
		pattern1[3201] = 0x28;
		pattern1[3202] = 0x29;
		pattern1[3203] = 0x29;
		pattern1[3204] = 0x2a;
		pattern1[3205] = 0x2a;
		pattern1[3206] = 0x2b;
		pattern1[3207] = 0x2c;
		pattern1[3208] = 0x2c;
		pattern1[3209] = 0x2d;
		pattern1[3210] = 0x2e;
		pattern1[3211] = 0x2e;
		pattern1[3212] = 0x2f;
		pattern1[3213] = 0x30;
		pattern1[3214] = 0x30;
		pattern1[3215] = 0x31;
		pattern1[3216] = 0x32;
		pattern1[3217] = 0x32;
		pattern1[3218] = 0x33;
		pattern1[3219] = 0x34;
		pattern1[3220] = 0x35;
		pattern1[3221] = 0x35;
		pattern1[3222] = 0x36;
		pattern1[3223] = 0x37;
		pattern1[3224] = 0x37;
		pattern1[3225] = 0x38;
		pattern1[3226] = 0x39;
		pattern1[3227] = 0x3a;
		pattern1[3228] = 0x3a;
		pattern1[3229] = 0x3b;
		pattern1[3230] = 0x3c;
		pattern1[3231] = 0x3d;
		pattern1[3232] = 0x3d;
		pattern1[3233] = 0x3e;
		pattern1[3234] = 0x3f;
		pattern1[3235] = 0x40;
		pattern1[3236] = 0x40;
		pattern1[3237] = 0x41;
		pattern1[3238] = 0x42;
		pattern1[3239] = 0x43;
		pattern1[3240] = 0x44;
		pattern1[3241] = 0x44;
		pattern1[3242] = 0x45;
		pattern1[3243] = 0x46;
		pattern1[3244] = 0x47;
		pattern1[3245] = 0x48;
		pattern1[3246] = 0x49;
		pattern1[3247] = 0x49;
		pattern1[3248] = 0x4a;
		pattern1[3249] = 0x4b;
		pattern1[3250] = 0x4c;
		pattern1[3251] = 0x4d;
		pattern1[3252] = 0x4e;
		pattern1[3253] = 0x4e;
		pattern1[3254] = 0x4f;
		pattern1[3255] = 0x50;
		pattern1[3256] = 0x51;
		pattern1[3257] = 0x52;
		pattern1[3258] = 0x53;
		pattern1[3259] = 0x54;
		pattern1[3260] = 0x55;
		pattern1[3261] = 0x55;
		pattern1[3262] = 0x56;
		pattern1[3263] = 0x57;
		pattern1[3264] = 0x58;
		pattern1[3265] = 0x59;
		pattern1[3266] = 0x5a;
		pattern1[3267] = 0x5b;
		pattern1[3268] = 0x5c;
		pattern1[3269] = 0x5d;
		pattern1[3270] = 0x5e;
		pattern1[3271] = 0x5f;
		pattern1[3272] = 0x60;
		pattern1[3273] = 0x61;
		pattern1[3274] = 0x62;
		pattern1[3275] = 0x62;
		pattern1[3276] = 0x63;
		pattern1[3277] = 0x64;
		pattern1[3278] = 0x65;
		pattern1[3279] = 0x66;
		pattern1[3280] = 0x67;
		pattern1[3281] = 0x68;
		pattern1[3282] = 0x69;
		pattern1[3283] = 0x6a;
		pattern1[3284] = 0x6b;
		pattern1[3285] = 0x6c;
		pattern1[3286] = 0x6d;
		pattern1[3287] = 0x6e;
		pattern1[3288] = 0x6f;
		pattern1[3289] = 0x70;
		pattern1[3290] = 0x71;
		pattern1[3291] = 0x72;
		pattern1[3292] = 0x73;
		pattern1[3293] = 0x75;
		pattern1[3294] = 0x76;
		pattern1[3295] = 0x77;
		pattern1[3296] = 0x78;
		pattern1[3297] = 0x79;
		pattern1[3298] = 0x7a;
		pattern1[3299] = 0x7b;
		pattern1[3300] = 0x7c;
		pattern1[3301] = 0x7d;
		pattern1[3302] = 0x7e;
		pattern1[3303] = 0x7f;
		pattern1[3304] = 0x80;
		pattern1[3305] = 0x81;
		pattern1[3306] = 0x82;
		pattern1[3307] = 0x84;
		pattern1[3308] = 0x85;
		pattern1[3309] = 0x86;
		pattern1[3310] = 0x87;
		pattern1[3311] = 0x88;
		pattern1[3312] = 0x89;
		pattern1[3313] = 0x8a;
		pattern1[3314] = 0x8b;
		pattern1[3315] = 0x8d;
		pattern1[3316] = 0x8e;
		pattern1[3317] = 0x8f;
		pattern1[3318] = 0x90;
		pattern1[3319] = 0x91;
		pattern1[3320] = 0x92;
		pattern1[3321] = 0x94;
		pattern1[3322] = 0x95;
		pattern1[3323] = 0x96;
		pattern1[3324] = 0x97;
		pattern1[3325] = 0x98;
		pattern1[3326] = 0x99;
		pattern1[3327] = 0x9b;
		pattern1[3328] = 0x9c;
		pattern1[3329] = 0x9d;
		pattern1[3330] = 0x9e;
		pattern1[3331] = 0x9f;
		pattern1[3332] = 0xa1;
		pattern1[3333] = 0xa2;
		pattern1[3334] = 0xa3;
		pattern1[3335] = 0xa4;
		pattern1[3336] = 0xa6;
		pattern1[3337] = 0xa7;
		pattern1[3338] = 0xa8;
		pattern1[3339] = 0xa9;
		pattern1[3340] = 0xab;
		pattern1[3341] = 0xac;
		pattern1[3342] = 0xad;
		pattern1[3343] = 0xae;
		pattern1[3344] = 0xb0;
		pattern1[3345] = 0xb1;
		pattern1[3346] = 0xb2;
		pattern1[3347] = 0xb3;
		pattern1[3348] = 0xb5;
		pattern1[3349] = 0xb6;
		pattern1[3350] = 0xb7;
		pattern1[3351] = 0xb9;
		pattern1[3352] = 0xba;
		pattern1[3353] = 0xbb;
		pattern1[3354] = 0xbd;
		pattern1[3355] = 0xbe;
		pattern1[3356] = 0xbf;
		pattern1[3357] = 0xc1;
		pattern1[3358] = 0xc2;
		pattern1[3359] = 0xc3;
		pattern1[3360] = 0xc5;
		pattern1[3361] = 0xc6;
		pattern1[3362] = 0xc7;
		pattern1[3363] = 0xc9;
		pattern1[3364] = 0xca;
		pattern1[3365] = 0xcb;
		pattern1[3366] = 0xcd;
		pattern1[3367] = 0xce;
		pattern1[3368] = 0xcf;
		pattern1[3369] = 0xd1;
		pattern1[3370] = 0xd2;
		pattern1[3371] = 0xd4;
		pattern1[3372] = 0xd5;
		pattern1[3373] = 0xd6;
		pattern1[3374] = 0xd8;
		pattern1[3375] = 0xd9;
		pattern1[3376] = 0xdb;
		pattern1[3377] = 0xdc;
		pattern1[3378] = 0xdd;
		pattern1[3379] = 0xdf;
		pattern1[3380] = 0xe0;
		pattern1[3381] = 0xe2;
		pattern1[3382] = 0xe3;
		pattern1[3383] = 0xe5;
		pattern1[3384] = 0xe6;
		pattern1[3385] = 0xe8;
		pattern1[3386] = 0xe9;
		pattern1[3387] = 0xea;
		pattern1[3388] = 0xec;
		pattern1[3389] = 0xed;
		pattern1[3390] = 0xef;
		pattern1[3391] = 0xf0;
		pattern1[3392] = 0xf2;
		pattern1[3393] = 0xf3;
		pattern1[3394] = 0xf5;
		pattern1[3395] = 0xf6;
		pattern1[3396] = 0xf8;
		pattern1[3397] = 0xf9;
		pattern1[3398] = 0xfb;
		pattern1[3399] = 0xfc;
		pattern1[3400] = 0xfe;
		pattern1[3401] = 0xff;
		pattern1[3402] = 0x101;
		pattern1[3403] = 0x102;
		pattern1[3404] = 0x104;
		pattern1[3405] = 0x105;
		pattern1[3406] = 0x107;
		pattern1[3407] = 0x108;
		pattern1[3408] = 0x10a;
		pattern1[3409] = 0x10c;
		pattern1[3410] = 0x10d;
		pattern1[3411] = 0x10f;
		pattern1[3412] = 0x110;
		pattern1[3413] = 0x112;
		pattern1[3414] = 0x113;
		pattern1[3415] = 0x115;
		pattern1[3416] = 0x117;
		pattern1[3417] = 0x118;
		pattern1[3418] = 0x11a;
		pattern1[3419] = 0x11b;
		pattern1[3420] = 0x11d;
		pattern1[3421] = 0x11e;
		pattern1[3422] = 0x120;
		pattern1[3423] = 0x122;
		pattern1[3424] = 0x123;
		pattern1[3425] = 0x125;
		pattern1[3426] = 0x127;
		pattern1[3427] = 0x128;
		pattern1[3428] = 0x12a;
		pattern1[3429] = 0x12b;
		pattern1[3430] = 0x12d;
		pattern1[3431] = 0x12f;
		pattern1[3432] = 0x130;
		pattern1[3433] = 0x132;
		pattern1[3434] = 0x134;
		pattern1[3435] = 0x135;
		pattern1[3436] = 0x137;
		pattern1[3437] = 0x139;
		pattern1[3438] = 0x13a;
		pattern1[3439] = 0x13c;
		pattern1[3440] = 0x13e;
		pattern1[3441] = 0x13f;
		pattern1[3442] = 0x141;
		pattern1[3443] = 0x143;
		pattern1[3444] = 0x144;
		pattern1[3445] = 0x146;
		pattern1[3446] = 0x148;
		pattern1[3447] = 0x14a;
		pattern1[3448] = 0x14b;
		pattern1[3449] = 0x14d;
		pattern1[3450] = 0x14f;
		pattern1[3451] = 0x150;
		pattern1[3452] = 0x152;
		pattern1[3453] = 0x154;
		pattern1[3454] = 0x156;
		pattern1[3455] = 0x157;
		pattern1[3456] = 0x159;
		pattern1[3457] = 0x15b;
		pattern1[3458] = 0x15d;
		pattern1[3459] = 0x15e;
		pattern1[3460] = 0x160;
		pattern1[3461] = 0x162;
		pattern1[3462] = 0x164;
		pattern1[3463] = 0x165;
		pattern1[3464] = 0x167;
		pattern1[3465] = 0x169;
		pattern1[3466] = 0x16b;
		pattern1[3467] = 0x16d;
		pattern1[3468] = 0x16e;
		pattern1[3469] = 0x170;
		pattern1[3470] = 0x172;
		pattern1[3471] = 0x174;
		pattern1[3472] = 0x175;
		pattern1[3473] = 0x177;
		pattern1[3474] = 0x179;
		pattern1[3475] = 0x17b;
		pattern1[3476] = 0x17d;
		pattern1[3477] = 0x17f;
		pattern1[3478] = 0x180;
		pattern1[3479] = 0x182;
		pattern1[3480] = 0x184;
		pattern1[3481] = 0x186;
		pattern1[3482] = 0x188;
		pattern1[3483] = 0x18a;
		pattern1[3484] = 0x18b;
		pattern1[3485] = 0x18d;
		pattern1[3486] = 0x18f;
		pattern1[3487] = 0x191;
		pattern1[3488] = 0x193;
		pattern1[3489] = 0x195;
		pattern1[3490] = 0x197;
		pattern1[3491] = 0x199;
		pattern1[3492] = 0x19a;
		pattern1[3493] = 0x19c;
		pattern1[3494] = 0x19e;
		pattern1[3495] = 0x1a0;
		pattern1[3496] = 0x1a2;
		pattern1[3497] = 0x1a4;
		pattern1[3498] = 0x1a6;
		pattern1[3499] = 0x1a8;
		pattern1[3500] = 0x1aa;
		pattern1[3501] = 0x1ac;
		pattern1[3502] = 0x1ae;
		pattern1[3503] = 0x1af;
		pattern1[3504] = 0x1b1;
		pattern1[3505] = 0x1b3;
		pattern1[3506] = 0x1b5;
		pattern1[3507] = 0x1b7;
		pattern1[3508] = 0x1b9;
		pattern1[3509] = 0x1bb;
		pattern1[3510] = 0x1bd;
		pattern1[3511] = 0x1bf;
		pattern1[3512] = 0x1c1;
		pattern1[3513] = 0x1c3;
		pattern1[3514] = 0x1c5;
		pattern1[3515] = 0x1c7;
		pattern1[3516] = 0x1c9;
		pattern1[3517] = 0x1cb;
		pattern1[3518] = 0x1cd;
		pattern1[3519] = 0x1cf;
		pattern1[3520] = 0x1d1;
		pattern1[3521] = 0x1d3;
		pattern1[3522] = 0x1d5;
		pattern1[3523] = 0x1d7;
		pattern1[3524] = 0x1d9;
		pattern1[3525] = 0x1db;
		pattern1[3526] = 0x1dd;
		pattern1[3527] = 0x1df;
		pattern1[3528] = 0x1e1;
		pattern1[3529] = 0x1e3;
		pattern1[3530] = 0x1e5;
		pattern1[3531] = 0x1e7;
		pattern1[3532] = 0x1e9;
		pattern1[3533] = 0x1eb;
		pattern1[3534] = 0x1ed;
		pattern1[3535] = 0x1ef;
		pattern1[3536] = 0x1f1;
		pattern1[3537] = 0x1f3;
		pattern1[3538] = 0x1f5;
		pattern1[3539] = 0x1f7;
		pattern1[3540] = 0x1f9;
		pattern1[3541] = 0x1fb;
		pattern1[3542] = 0x1fd;
		pattern1[3543] = 0x200;
		pattern1[3544] = 0x202;
		pattern1[3545] = 0x204;
		pattern1[3546] = 0x206;
		pattern1[3547] = 0x208;
		pattern1[3548] = 0x20a;
		pattern1[3549] = 0x20c;
		pattern1[3550] = 0x20e;
		pattern1[3551] = 0x210;
		pattern1[3552] = 0x212;
		pattern1[3553] = 0x215;
		pattern1[3554] = 0x217;
		pattern1[3555] = 0x219;
		pattern1[3556] = 0x21b;
		pattern1[3557] = 0x21d;
		pattern1[3558] = 0x21f;
		pattern1[3559] = 0x221;
		pattern1[3560] = 0x223;
		pattern1[3561] = 0x226;
		pattern1[3562] = 0x228;
		pattern1[3563] = 0x22a;
		pattern1[3564] = 0x22c;
		pattern1[3565] = 0x22e;
		pattern1[3566] = 0x230;
		pattern1[3567] = 0x232;
		pattern1[3568] = 0x235;
		pattern1[3569] = 0x237;
		pattern1[3570] = 0x239;
		pattern1[3571] = 0x23b;
		pattern1[3572] = 0x23d;
		pattern1[3573] = 0x23f;
		pattern1[3574] = 0x242;
		pattern1[3575] = 0x244;
		pattern1[3576] = 0x246;
		pattern1[3577] = 0x248;
		pattern1[3578] = 0x24a;
		pattern1[3579] = 0x24d;
		pattern1[3580] = 0x24f;
		pattern1[3581] = 0x251;
		pattern1[3582] = 0x253;
		pattern1[3583] = 0x255;
		pattern1[3584] = 0x258;
		pattern1[3585] = 0x25a;
		pattern1[3586] = 0x25c;
		pattern1[3587] = 0x25e;
		pattern1[3588] = 0x261;
		pattern1[3589] = 0x263;
		pattern1[3590] = 0x265;
		pattern1[3591] = 0x267;
		pattern1[3592] = 0x26a;
		pattern1[3593] = 0x26c;
		pattern1[3594] = 0x26e;
		pattern1[3595] = 0x270;
		pattern1[3596] = 0x273;
		pattern1[3597] = 0x275;
		pattern1[3598] = 0x277;
		pattern1[3599] = 0x279;
		pattern1[3600] = 0x27c;
		pattern1[3601] = 0x27e;
		pattern1[3602] = 0x280;
		pattern1[3603] = 0x283;
		pattern1[3604] = 0x285;
		pattern1[3605] = 0x287;
		pattern1[3606] = 0x289;
		pattern1[3607] = 0x28c;
		pattern1[3608] = 0x28e;
		pattern1[3609] = 0x290;
		pattern1[3610] = 0x293;
		pattern1[3611] = 0x295;
		pattern1[3612] = 0x297;
		pattern1[3613] = 0x29a;
		pattern1[3614] = 0x29c;
		pattern1[3615] = 0x29e;
		pattern1[3616] = 0x2a0;
		pattern1[3617] = 0x2a3;
		pattern1[3618] = 0x2a5;
		pattern1[3619] = 0x2a7;
		pattern1[3620] = 0x2aa;
		pattern1[3621] = 0x2ac;
		pattern1[3622] = 0x2af;
		pattern1[3623] = 0x2b1;
		pattern1[3624] = 0x2b3;
		pattern1[3625] = 0x2b6;
		pattern1[3626] = 0x2b8;
		pattern1[3627] = 0x2ba;
		pattern1[3628] = 0x2bd;
		pattern1[3629] = 0x2bf;
		pattern1[3630] = 0x2c1;
		pattern1[3631] = 0x2c4;
		pattern1[3632] = 0x2c6;
		pattern1[3633] = 0x2c9;
		pattern1[3634] = 0x2cb;
		pattern1[3635] = 0x2cd;
		pattern1[3636] = 0x2d0;
		pattern1[3637] = 0x2d2;
		pattern1[3638] = 0x2d4;
		pattern1[3639] = 0x2d7;
		pattern1[3640] = 0x2d9;
		pattern1[3641] = 0x2dc;
		pattern1[3642] = 0x2de;
		pattern1[3643] = 0x2e0;
		pattern1[3644] = 0x2e3;
		pattern1[3645] = 0x2e5;
		pattern1[3646] = 0x2e8;
		pattern1[3647] = 0x2ea;
		pattern1[3648] = 0x2ed;
		pattern1[3649] = 0x2ef;
		pattern1[3650] = 0x2f1;
		pattern1[3651] = 0x2f4;
		pattern1[3652] = 0x2f6;
		pattern1[3653] = 0x2f9;
		pattern1[3654] = 0x2fb;
		pattern1[3655] = 0x2fe;
		pattern1[3656] = 0x300;
		pattern1[3657] = 0x303;
		pattern1[3658] = 0x305;
		pattern1[3659] = 0x307;
		pattern1[3660] = 0x30a;
		pattern1[3661] = 0x30c;
		pattern1[3662] = 0x30f;
		pattern1[3663] = 0x311;
		pattern1[3664] = 0x314;
		pattern1[3665] = 0x316;
		pattern1[3666] = 0x319;
		pattern1[3667] = 0x31b;
		pattern1[3668] = 0x31e;
		pattern1[3669] = 0x320;
		pattern1[3670] = 0x323;
		pattern1[3671] = 0x325;
		pattern1[3672] = 0x328;
		pattern1[3673] = 0x32a;
		pattern1[3674] = 0x32d;
		pattern1[3675] = 0x32f;
		pattern1[3676] = 0x332;
		pattern1[3677] = 0x334;
		pattern1[3678] = 0x337;
		pattern1[3679] = 0x339;
		pattern1[3680] = 0x33c;
		pattern1[3681] = 0x33e;
		pattern1[3682] = 0x341;
		pattern1[3683] = 0x343;
		pattern1[3684] = 0x346;
		pattern1[3685] = 0x348;
		pattern1[3686] = 0x34b;
		pattern1[3687] = 0x34e;
		pattern1[3688] = 0x350;
		pattern1[3689] = 0x353;
		pattern1[3690] = 0x355;
		pattern1[3691] = 0x358;
		pattern1[3692] = 0x35a;
		pattern1[3693] = 0x35d;
		pattern1[3694] = 0x35f;
		pattern1[3695] = 0x362;
		pattern1[3696] = 0x365;
		pattern1[3697] = 0x367;
		pattern1[3698] = 0x36a;
		pattern1[3699] = 0x36c;
		pattern1[3700] = 0x36f;
		pattern1[3701] = 0x371;
		pattern1[3702] = 0x374;
		pattern1[3703] = 0x377;
		pattern1[3704] = 0x379;
		pattern1[3705] = 0x37c;
		pattern1[3706] = 0x37e;
		pattern1[3707] = 0x381;
		pattern1[3708] = 0x384;
		pattern1[3709] = 0x386;
		pattern1[3710] = 0x389;
		pattern1[3711] = 0x38b;
		pattern1[3712] = 0x38e;
		pattern1[3713] = 0x391;
		pattern1[3714] = 0x393;
		pattern1[3715] = 0x396;
		pattern1[3716] = 0x398;
		pattern1[3717] = 0x39b;
		pattern1[3718] = 0x39e;
		pattern1[3719] = 0x3a0;
		pattern1[3720] = 0x3a3;
		pattern1[3721] = 0x3a6;
		pattern1[3722] = 0x3a8;
		pattern1[3723] = 0x3ab;
		pattern1[3724] = 0x3ad;
		pattern1[3725] = 0x3b0;
		pattern1[3726] = 0x3b3;
		pattern1[3727] = 0x3b5;
		pattern1[3728] = 0x3b8;
		pattern1[3729] = 0x3bb;
		pattern1[3730] = 0x3bd;
		pattern1[3731] = 0x3c0;
		pattern1[3732] = 0x3c3;
		pattern1[3733] = 0x3c5;
		pattern1[3734] = 0x3c8;
		pattern1[3735] = 0x3cb;
		pattern1[3736] = 0x3cd;
		pattern1[3737] = 0x3d0;
		pattern1[3738] = 0x3d3;
		pattern1[3739] = 0x3d5;
		pattern1[3740] = 0x3d8;
		pattern1[3741] = 0x3db;
		pattern1[3742] = 0x3dd;
		pattern1[3743] = 0x3e0;
		pattern1[3744] = 0x3e3;
		pattern1[3745] = 0x3e6;
		pattern1[3746] = 0x3e8;
		pattern1[3747] = 0x3eb;
		pattern1[3748] = 0x3ee;
		pattern1[3749] = 0x3f0;
		pattern1[3750] = 0x3f3;
		pattern1[3751] = 0x3f6;
		pattern1[3752] = 0x3f9;
		pattern1[3753] = 0x3fb;
		pattern1[3754] = 0x3fe;
		pattern1[3755] = 0x401;
		pattern1[3756] = 0x403;
		pattern1[3757] = 0x406;
		pattern1[3758] = 0x409;
		pattern1[3759] = 0x40c;
		pattern1[3760] = 0x40e;
		pattern1[3761] = 0x411;
		pattern1[3762] = 0x414;
		pattern1[3763] = 0x416;
		pattern1[3764] = 0x419;
		pattern1[3765] = 0x41c;
		pattern1[3766] = 0x41f;
		pattern1[3767] = 0x421;
		pattern1[3768] = 0x424;
		pattern1[3769] = 0x427;
		pattern1[3770] = 0x42a;
		pattern1[3771] = 0x42c;
		pattern1[3772] = 0x42f;
		pattern1[3773] = 0x432;
		pattern1[3774] = 0x435;
		pattern1[3775] = 0x438;
		pattern1[3776] = 0x43a;
		pattern1[3777] = 0x43d;
		pattern1[3778] = 0x440;
		pattern1[3779] = 0x443;
		pattern1[3780] = 0x445;
		pattern1[3781] = 0x448;
		pattern1[3782] = 0x44b;
		pattern1[3783] = 0x44e;
		pattern1[3784] = 0x451;
		pattern1[3785] = 0x453;
		pattern1[3786] = 0x456;
		pattern1[3787] = 0x459;
		pattern1[3788] = 0x45c;
		pattern1[3789] = 0x45f;
		pattern1[3790] = 0x461;
		pattern1[3791] = 0x464;
		pattern1[3792] = 0x467;
		pattern1[3793] = 0x46a;
		pattern1[3794] = 0x46d;
		pattern1[3795] = 0x46f;
		pattern1[3796] = 0x472;
		pattern1[3797] = 0x475;
		pattern1[3798] = 0x478;
		pattern1[3799] = 0x47b;
		pattern1[3800] = 0x47d;
		pattern1[3801] = 0x480;
		pattern1[3802] = 0x483;
		pattern1[3803] = 0x486;
		pattern1[3804] = 0x489;
		pattern1[3805] = 0x48c;
		pattern1[3806] = 0x48e;
		pattern1[3807] = 0x491;
		pattern1[3808] = 0x494;
		pattern1[3809] = 0x497;
		pattern1[3810] = 0x49a;
		pattern1[3811] = 0x49d;
		pattern1[3812] = 0x49f;
		pattern1[3813] = 0x4a2;
		pattern1[3814] = 0x4a5;
		pattern1[3815] = 0x4a8;
		pattern1[3816] = 0x4ab;
		pattern1[3817] = 0x4ae;
		pattern1[3818] = 0x4b1;
		pattern1[3819] = 0x4b3;
		pattern1[3820] = 0x4b6;
		pattern1[3821] = 0x4b9;
		pattern1[3822] = 0x4bc;
		pattern1[3823] = 0x4bf;
		pattern1[3824] = 0x4c2;
		pattern1[3825] = 0x4c5;
		pattern1[3826] = 0x4c8;
		pattern1[3827] = 0x4ca;
		pattern1[3828] = 0x4cd;
		pattern1[3829] = 0x4d0;
		pattern1[3830] = 0x4d3;
		pattern1[3831] = 0x4d6;
		pattern1[3832] = 0x4d9;
		pattern1[3833] = 0x4dc;
		pattern1[3834] = 0x4df;
		pattern1[3835] = 0x4e1;
		pattern1[3836] = 0x4e4;
		pattern1[3837] = 0x4e7;
		pattern1[3838] = 0x4ea;
		pattern1[3839] = 0x4ed;
		pattern1[3840] = 0x4f0;
		pattern1[3841] = 0x4f3;
		pattern1[3842] = 0x4f6;
		pattern1[3843] = 0x4f9;
		pattern1[3844] = 0x4fc;
		pattern1[3845] = 0x4fe;
		pattern1[3846] = 0x501;
		pattern1[3847] = 0x504;
		pattern1[3848] = 0x507;
		pattern1[3849] = 0x50a;
		pattern1[3850] = 0x50d;
		pattern1[3851] = 0x510;
		pattern1[3852] = 0x513;
		pattern1[3853] = 0x516;
		pattern1[3854] = 0x519;
		pattern1[3855] = 0x51c;
		pattern1[3856] = 0x51f;
		pattern1[3857] = 0x522;
		pattern1[3858] = 0x524;
		pattern1[3859] = 0x527;
		pattern1[3860] = 0x52a;
		pattern1[3861] = 0x52d;
		pattern1[3862] = 0x530;
		pattern1[3863] = 0x533;
		pattern1[3864] = 0x536;
		pattern1[3865] = 0x539;
		pattern1[3866] = 0x53c;
		pattern1[3867] = 0x53f;
		pattern1[3868] = 0x542;
		pattern1[3869] = 0x545;
		pattern1[3870] = 0x548;
		pattern1[3871] = 0x54b;
		pattern1[3872] = 0x54e;
		pattern1[3873] = 0x551;
		pattern1[3874] = 0x554;
		pattern1[3875] = 0x557;
		pattern1[3876] = 0x55a;
		pattern1[3877] = 0x55d;
		pattern1[3878] = 0x55f;
		pattern1[3879] = 0x562;
		pattern1[3880] = 0x565;
		pattern1[3881] = 0x568;
		pattern1[3882] = 0x56b;
		pattern1[3883] = 0x56e;
		pattern1[3884] = 0x571;
		pattern1[3885] = 0x574;
		pattern1[3886] = 0x577;
		pattern1[3887] = 0x57a;
		pattern1[3888] = 0x57d;
		pattern1[3889] = 0x580;
		pattern1[3890] = 0x583;
		pattern1[3891] = 0x586;
		pattern1[3892] = 0x589;
		pattern1[3893] = 0x58c;
		pattern1[3894] = 0x58f;
		pattern1[3895] = 0x592;
		pattern1[3896] = 0x595;
		pattern1[3897] = 0x598;
		pattern1[3898] = 0x59b;
		pattern1[3899] = 0x59e;
		pattern1[3900] = 0x5a1;
		pattern1[3901] = 0x5a4;
		pattern1[3902] = 0x5a7;
		pattern1[3903] = 0x5aa;
		pattern1[3904] = 0x5ad;
		pattern1[3905] = 0x5b0;
		pattern1[3906] = 0x5b3;
		pattern1[3907] = 0x5b6;
		pattern1[3908] = 0x5b9;
		pattern1[3909] = 0x5bc;
		pattern1[3910] = 0x5bf;
		pattern1[3911] = 0x5c2;
		pattern1[3912] = 0x5c5;
		pattern1[3913] = 0x5c8;
		pattern1[3914] = 0x5cb;
		pattern1[3915] = 0x5ce;
		pattern1[3916] = 0x5d1;
		pattern1[3917] = 0x5d4;
		pattern1[3918] = 0x5d7;
		pattern1[3919] = 0x5da;
		pattern1[3920] = 0x5dd;
		pattern1[3921] = 0x5e0;
		pattern1[3922] = 0x5e3;
		pattern1[3923] = 0x5e6;
		pattern1[3924] = 0x5ea;
		pattern1[3925] = 0x5ed;
		pattern1[3926] = 0x5f0;
		pattern1[3927] = 0x5f3;
		pattern1[3928] = 0x5f6;
		pattern1[3929] = 0x5f9;
		pattern1[3930] = 0x5fc;
		pattern1[3931] = 0x5ff;
		pattern1[3932] = 0x602;
		pattern1[3933] = 0x605;
		pattern1[3934] = 0x608;
		pattern1[3935] = 0x60b;
		pattern1[3936] = 0x60e;
		pattern1[3937] = 0x611;
		pattern1[3938] = 0x614;
		pattern1[3939] = 0x617;
		pattern1[3940] = 0x61a;
		pattern1[3941] = 0x61d;
		pattern1[3942] = 0x620;
		pattern1[3943] = 0x623;
		pattern1[3944] = 0x626;
		pattern1[3945] = 0x629;
		pattern1[3946] = 0x62d;
		pattern1[3947] = 0x630;
		pattern1[3948] = 0x633;
		pattern1[3949] = 0x636;
		pattern1[3950] = 0x639;
		pattern1[3951] = 0x63c;
		pattern1[3952] = 0x63f;
		pattern1[3953] = 0x642;
		pattern1[3954] = 0x645;
		pattern1[3955] = 0x648;
		pattern1[3956] = 0x64b;
		pattern1[3957] = 0x64e;
		pattern1[3958] = 0x651;
		pattern1[3959] = 0x654;
		pattern1[3960] = 0x657;
		pattern1[3961] = 0x65b;
		pattern1[3962] = 0x65e;
		pattern1[3963] = 0x661;
		pattern1[3964] = 0x664;
		pattern1[3965] = 0x667;
		pattern1[3966] = 0x66a;
		pattern1[3967] = 0x66d;
		pattern1[3968] = 0x670;
		pattern1[3969] = 0x673;
		pattern1[3970] = 0x676;
		pattern1[3971] = 0x679;
		pattern1[3972] = 0x67c;
		pattern1[3973] = 0x67f;
		pattern1[3974] = 0x683;
		pattern1[3975] = 0x686;
		pattern1[3976] = 0x689;
		pattern1[3977] = 0x68c;
		pattern1[3978] = 0x68f;
		pattern1[3979] = 0x692;
		pattern1[3980] = 0x695;
		pattern1[3981] = 0x698;
		pattern1[3982] = 0x69b;
		pattern1[3983] = 0x69e;
		pattern1[3984] = 0x6a1;
		pattern1[3985] = 0x6a5;
		pattern1[3986] = 0x6a8;
		pattern1[3987] = 0x6ab;
		pattern1[3988] = 0x6ae;
		pattern1[3989] = 0x6b1;
		pattern1[3990] = 0x6b4;
		pattern1[3991] = 0x6b7;
		pattern1[3992] = 0x6ba;
		pattern1[3993] = 0x6bd;
		pattern1[3994] = 0x6c0;
		pattern1[3995] = 0x6c4;
		pattern1[3996] = 0x6c7;
		pattern1[3997] = 0x6ca;
		pattern1[3998] = 0x6cd;
		pattern1[3999] = 0x6d0;
		pattern1[4000] = 0x6d3;
		pattern1[4001] = 0x6d6;
		pattern1[4002] = 0x6d9;
		pattern1[4003] = 0x6dc;
		pattern1[4004] = 0x6e0;
		pattern1[4005] = 0x6e3;
		pattern1[4006] = 0x6e6;
		pattern1[4007] = 0x6e9;
		pattern1[4008] = 0x6ec;
		pattern1[4009] = 0x6ef;
		pattern1[4010] = 0x6f2;
		pattern1[4011] = 0x6f5;
		pattern1[4012] = 0x6f8;
		pattern1[4013] = 0x6fc;
		pattern1[4014] = 0x6ff;
		pattern1[4015] = 0x702;
		pattern1[4016] = 0x705;
		pattern1[4017] = 0x708;
		pattern1[4018] = 0x70b;
		pattern1[4019] = 0x70e;
		pattern1[4020] = 0x711;
		pattern1[4021] = 0x714;
		pattern1[4022] = 0x718;
		pattern1[4023] = 0x71b;
		pattern1[4024] = 0x71e;
		pattern1[4025] = 0x721;
		pattern1[4026] = 0x724;
		pattern1[4027] = 0x727;
		pattern1[4028] = 0x72a;
		pattern1[4029] = 0x72d;
		pattern1[4030] = 0x731;
		pattern1[4031] = 0x734;
		pattern1[4032] = 0x737;
		pattern1[4033] = 0x73a;
		pattern1[4034] = 0x73d;
		pattern1[4035] = 0x740;
		pattern1[4036] = 0x743;
		pattern1[4037] = 0x746;
		pattern1[4038] = 0x74a;
		pattern1[4039] = 0x74d;
		pattern1[4040] = 0x750;
		pattern1[4041] = 0x753;
		pattern1[4042] = 0x756;
		pattern1[4043] = 0x759;
		pattern1[4044] = 0x75c;
		pattern1[4045] = 0x75f;
		pattern1[4046] = 0x763;
		pattern1[4047] = 0x766;
		pattern1[4048] = 0x769;
		pattern1[4049] = 0x76c;
		pattern1[4050] = 0x76f;
		pattern1[4051] = 0x772;
		pattern1[4052] = 0x775;
		pattern1[4053] = 0x779;
		pattern1[4054] = 0x77c;
		pattern1[4055] = 0x77f;
		pattern1[4056] = 0x782;
		pattern1[4057] = 0x785;
		pattern1[4058] = 0x788;
		pattern1[4059] = 0x78b;
		pattern1[4060] = 0x78e;
		pattern1[4061] = 0x792;
		pattern1[4062] = 0x795;
		pattern1[4063] = 0x798;
		pattern1[4064] = 0x79b;
		pattern1[4065] = 0x79e;
		pattern1[4066] = 0x7a1;
		pattern1[4067] = 0x7a4;
		pattern1[4068] = 0x7a8;
		pattern1[4069] = 0x7ab;
		pattern1[4070] = 0x7ae;
		pattern1[4071] = 0x7b1;
		pattern1[4072] = 0x7b4;
		pattern1[4073] = 0x7b7;
		pattern1[4074] = 0x7ba;
		pattern1[4075] = 0x7be;
		pattern1[4076] = 0x7c1;
		pattern1[4077] = 0x7c4;
		pattern1[4078] = 0x7c7;
		pattern1[4079] = 0x7ca;
		pattern1[4080] = 0x7cd;
		pattern1[4081] = 0x7d0;
		pattern1[4082] = 0x7d4;
		pattern1[4083] = 0x7d7;
		pattern1[4084] = 0x7da;
		pattern1[4085] = 0x7dd;
		pattern1[4086] = 0x7e0;
		pattern1[4087] = 0x7e3;
		pattern1[4088] = 0x7e6;
		pattern1[4089] = 0x7ea;
		pattern1[4090] = 0x7ed;
		pattern1[4091] = 0x7f0;
		pattern1[4092] = 0x7f3;
		pattern1[4093] = 0x7f6;
		pattern1[4094] = 0x7f9;
		pattern1[4095] = 0x7fc;



/*		// 16kHz samples
		pattern2[0]=2198;
		pattern2[1]=2370;
		pattern2[2]=2539;
		pattern2[3]=2706;
		pattern2[4]=2868;
		pattern2[5]=3023;
		pattern2[6]=3170;
		pattern2[7]=3308;
		pattern2[8]=3435;
		pattern2[9]=3551;
		pattern2[10]=3653;
		pattern2[11]=3741;
		pattern2[12]=3815;
		pattern2[13]=3873;
		pattern2[14]=3914;
		pattern2[15]=3940;
		pattern2[16]=3948;
		pattern2[17]=3940;
		pattern2[18]=3914;
		pattern2[19]=3873;
		pattern2[20]=3815;
		pattern2[21]=3741;
		pattern2[22]=3653;
		pattern2[23]=3551;
		pattern2[24]=3435;
		pattern2[25]=3308;
		pattern2[26]=3170;
		pattern2[27]=3023;
		pattern2[28]=2868;
		pattern2[29]=2706;
		pattern2[30]=2539;
		pattern2[31]=2370;
		pattern2[32]=2198;
		pattern2[33]=2026;
		pattern2[34]=1857;
		pattern2[35]=1690;
		pattern2[36]=1528;
		pattern2[37]=1373;
		pattern2[38]=1226;
		pattern2[39]=1088;
		pattern2[40]=961;
		pattern2[41]=845;
		pattern2[42]=743;
		pattern2[43]=655;
		pattern2[44]=581;
		pattern2[45]=523;
		pattern2[46]=482;
		pattern2[47]=456;
		pattern2[48]=448;
		pattern2[49]=456;
		pattern2[50]=482;
		pattern2[51]=523;
		pattern2[52]=581;
		pattern2[53]=655;
		pattern2[54]=743;
		pattern2[55]=845;
		pattern2[56]=961;
		pattern2[57]=1088;
		pattern2[58]=1226;
		pattern2[59]=1373;
		pattern2[60]=1528;
		pattern2[61]=1690;
		pattern2[62]=1857;
		pattern2[63]=2026;
		pattern2[64]=2198;
		pattern2[65]=2370;
		pattern2[66]=2539;
		pattern2[67]=2706;
		pattern2[68]=2868;
		pattern2[69]=3023;
		pattern2[70]=3170;
		pattern2[71]=3308;
		pattern2[72]=3435;
		pattern2[73]=3551;
		pattern2[74]=3653;
		pattern2[75]=3741;
		pattern2[76]=3815;
		pattern2[77]=3873;
		pattern2[78]=3914;
		pattern2[79]=3940;
		pattern2[80]=3948;
		pattern2[81]=3940;
		pattern2[82]=3914;
		pattern2[83]=3873;
		pattern2[84]=3815;
		pattern2[85]=3741;
		pattern2[86]=3653;
		pattern2[87]=3551;
		pattern2[88]=3435;
		pattern2[89]=3308;
		pattern2[90]=3170;
		pattern2[91]=3023;
		pattern2[92]=2868;
		pattern2[93]=2706;
		pattern2[94]=2539;
		pattern2[95]=2370;
		pattern2[96]=2198;
		pattern2[97]=2026;
		pattern2[98]=1857;
		pattern2[99]=1690;
		pattern2[100]=1528;
		pattern2[101]=1373;
		pattern2[102]=1226;
		pattern2[103]=1088;
		pattern2[104]=961;
		pattern2[105]=845;
		pattern2[106]=743;
		pattern2[107]=655;
		pattern2[108]=581;
		pattern2[109]=523;
		pattern2[110]=482;
		pattern2[111]=456;
		pattern2[112]=448;
		pattern2[113]=456;
		pattern2[114]=482;
		pattern2[115]=523;
		pattern2[116]=581;
		pattern2[117]=655;
		pattern2[118]=743;
		pattern2[119]=845;
		pattern2[120]=961;
		pattern2[121]=1088;
		pattern2[122]=1226;
		pattern2[123]=1373;
		pattern2[124]=1528;
		pattern2[125]=1690;
		pattern2[126]=1857;
		pattern2[127]=2026;
		pattern2[128]=2198;
		pattern2[129]=2370;
		pattern2[130]=2539;
		pattern2[131]=2706;
		pattern2[132]=2868;
		pattern2[133]=3023;
		pattern2[134]=3170;
		pattern2[135]=3308;
		pattern2[136]=3435;
		pattern2[137]=3551;
		pattern2[138]=3653;
		pattern2[139]=3741;
		pattern2[140]=3815;
		pattern2[141]=3873;
		pattern2[142]=3914;
		pattern2[143]=3940;
		pattern2[144]=3948;
		pattern2[145]=3940;
		pattern2[146]=3914;
		pattern2[147]=3873;
		pattern2[148]=3815;
		pattern2[149]=3741;
		pattern2[150]=3653;
		pattern2[151]=3551;
		pattern2[152]=3435;
		pattern2[153]=3308;
		pattern2[154]=3170;
		pattern2[155]=3023;
		pattern2[156]=2868;
		pattern2[157]=2706;
		pattern2[158]=2539;
		pattern2[159]=2370;
		pattern2[160]=2198;
		pattern2[161]=2026;
		pattern2[162]=1857;
		pattern2[163]=1690;
		pattern2[164]=1528;
		pattern2[165]=1373;
		pattern2[166]=1226;
		pattern2[167]=1088;
		pattern2[168]=961;
		pattern2[169]=845;
		pattern2[170]=743;
		pattern2[171]=655;
		pattern2[172]=581;
		pattern2[173]=523;
		pattern2[174]=482;
		pattern2[175]=456;
		pattern2[176]=448;
		pattern2[177]=456;
		pattern2[178]=482;
		pattern2[179]=523;
		pattern2[180]=581;
		pattern2[181]=655;
		pattern2[182]=743;
		pattern2[183]=845;
		pattern2[184]=961;
		pattern2[185]=1088;
		pattern2[186]=1226;
		pattern2[187]=1373;
		pattern2[188]=1528;
		pattern2[189]=1690;
		pattern2[190]=1857;
		pattern2[191]=2026;
		pattern2[192]=2198;
		pattern2[193]=2370;
		pattern2[194]=2539;
		pattern2[195]=2706;
		pattern2[196]=2868;
		pattern2[197]=3023;
		pattern2[198]=3170;
		pattern2[199]=3308;
		pattern2[200]=3435;
		pattern2[201]=3551;
		pattern2[202]=3653;
		pattern2[203]=3741;
		pattern2[204]=3815;
		pattern2[205]=3873;
		pattern2[206]=3914;
		pattern2[207]=3940;
		pattern2[208]=3948;
		pattern2[209]=3940;
		pattern2[210]=3914;
		pattern2[211]=3873;
		pattern2[212]=3815;
		pattern2[213]=3741;
		pattern2[214]=3653;
		pattern2[215]=3551;
		pattern2[216]=3435;
		pattern2[217]=3308;
		pattern2[218]=3170;
		pattern2[219]=3023;
		pattern2[220]=2868;
		pattern2[221]=2706;
		pattern2[222]=2539;
		pattern2[223]=2370;
		pattern2[224]=2198;
		pattern2[225]=2026;
		pattern2[226]=1857;
		pattern2[227]=1690;
		pattern2[228]=1528;
		pattern2[229]=1373;
		pattern2[230]=1226;
		pattern2[231]=1088;
		pattern2[232]=961;
		pattern2[233]=845;
		pattern2[234]=743;
		pattern2[235]=655;
		pattern2[236]=581;
		pattern2[237]=523;
		pattern2[238]=482;
		pattern2[239]=456;
		pattern2[240]=448;
		pattern2[241]=456;
		pattern2[242]=482;
		pattern2[243]=523;
		pattern2[244]=581;
		pattern2[245]=655;
		pattern2[246]=743;
		pattern2[247]=845;
		pattern2[248]=961;
		pattern2[249]=1088;
		pattern2[250]=1226;
		pattern2[251]=1373;
		pattern2[252]=1528;
		pattern2[253]=1690;
		pattern2[254]=1857;
		pattern2[255]=2026;
		pattern2[256]=2198;
		pattern2[257]=2370;
		pattern2[258]=2539;
		pattern2[259]=2706;
		pattern2[260]=2868;
		pattern2[261]=3023;
		pattern2[262]=3170;
		pattern2[263]=3308;
		pattern2[264]=3435;
		pattern2[265]=3551;
		pattern2[266]=3653;
		pattern2[267]=3741;
		pattern2[268]=3815;
		pattern2[269]=3873;
		pattern2[270]=3914;
		pattern2[271]=3940;
		pattern2[272]=3948;
		pattern2[273]=3940;
		pattern2[274]=3914;
		pattern2[275]=3873;
		pattern2[276]=3815;
		pattern2[277]=3741;
		pattern2[278]=3653;
		pattern2[279]=3551;
		pattern2[280]=3435;
		pattern2[281]=3308;
		pattern2[282]=3170;
		pattern2[283]=3023;
		pattern2[284]=2868;
		pattern2[285]=2706;
		pattern2[286]=2539;
		pattern2[287]=2370;
		pattern2[288]=2198;
		pattern2[289]=2026;
		pattern2[290]=1857;
		pattern2[291]=1690;
		pattern2[292]=1528;
		pattern2[293]=1373;
		pattern2[294]=1226;
		pattern2[295]=1088;
		pattern2[296]=961;
		pattern2[297]=845;
		pattern2[298]=743;
		pattern2[299]=655;
		pattern2[300]=581;
		pattern2[301]=523;
		pattern2[302]=482;
		pattern2[303]=456;
		pattern2[304]=448;
		pattern2[305]=456;
		pattern2[306]=482;
		pattern2[307]=523;
		pattern2[308]=581;
		pattern2[309]=655;
		pattern2[310]=743;
		pattern2[311]=845;
		pattern2[312]=961;
		pattern2[313]=1088;
		pattern2[314]=1226;
		pattern2[315]=1373;
		pattern2[316]=1528;
		pattern2[317]=1690;
		pattern2[318]=1857;
		pattern2[319]=2026;
		pattern2[320]=2198;
		pattern2[321]=2370;
		pattern2[322]=2539;
		pattern2[323]=2706;
		pattern2[324]=2868;
		pattern2[325]=3023;
		pattern2[326]=3170;
		pattern2[327]=3308;
		pattern2[328]=3435;
		pattern2[329]=3551;
		pattern2[330]=3653;
		pattern2[331]=3741;
		pattern2[332]=3815;
		pattern2[333]=3873;
		pattern2[334]=3914;
		pattern2[335]=3940;
		pattern2[336]=3948;
		pattern2[337]=3940;
		pattern2[338]=3914;
		pattern2[339]=3873;
		pattern2[340]=3815;
		pattern2[341]=3741;
		pattern2[342]=3653;
		pattern2[343]=3551;
		pattern2[344]=3435;
		pattern2[345]=3308;
		pattern2[346]=3170;
		pattern2[347]=3023;
		pattern2[348]=2868;
		pattern2[349]=2706;
		pattern2[350]=2539;
		pattern2[351]=2370;
		pattern2[352]=2198;
		pattern2[353]=2026;
		pattern2[354]=1857;
		pattern2[355]=1690;
		pattern2[356]=1528;
		pattern2[357]=1373;
		pattern2[358]=1226;
		pattern2[359]=1088;
		pattern2[360]=961;
		pattern2[361]=845;
		pattern2[362]=743;
		pattern2[363]=655;
		pattern2[364]=581;
		pattern2[365]=523;
		pattern2[366]=482;
		pattern2[367]=456;
		pattern2[368]=448;
		pattern2[369]=456;
		pattern2[370]=482;
		pattern2[371]=523;
		pattern2[372]=581;
		pattern2[373]=655;
		pattern2[374]=743;
		pattern2[375]=845;
		pattern2[376]=961;
		pattern2[377]=1088;
		pattern2[378]=1226;
		pattern2[379]=1373;
		pattern2[380]=1528;
		pattern2[381]=1690;
		pattern2[382]=1857;
		pattern2[383]=2026;
		pattern2[384]=2198;
		pattern2[385]=2370;
		pattern2[386]=2539;
		pattern2[387]=2706;
		pattern2[388]=2868;
		pattern2[389]=3023;
		pattern2[390]=3170;
		pattern2[391]=3308;
		pattern2[392]=3435;
		pattern2[393]=3551;
		pattern2[394]=3653;
		pattern2[395]=3741;
		pattern2[396]=3815;
		pattern2[397]=3873;
		pattern2[398]=3914;
		pattern2[399]=3940;
		pattern2[400]=3948;
		pattern2[401]=3940;
		pattern2[402]=3914;
		pattern2[403]=3873;
		pattern2[404]=3815;
		pattern2[405]=3741;
		pattern2[406]=3653;
		pattern2[407]=3551;
		pattern2[408]=3435;
		pattern2[409]=3308;
		pattern2[410]=3170;
		pattern2[411]=3023;
		pattern2[412]=2868;
		pattern2[413]=2706;
		pattern2[414]=2539;
		pattern2[415]=2370;
		pattern2[416]=2198;
		pattern2[417]=2026;
		pattern2[418]=1857;
		pattern2[419]=1690;
		pattern2[420]=1528;
		pattern2[421]=1373;
		pattern2[422]=1226;
		pattern2[423]=1088;
		pattern2[424]=961;
		pattern2[425]=845;
		pattern2[426]=743;
		pattern2[427]=655;
		pattern2[428]=581;
		pattern2[429]=523;
		pattern2[430]=482;
		pattern2[431]=456;
		pattern2[432]=448;
		pattern2[433]=456;
		pattern2[434]=482;
		pattern2[435]=523;
		pattern2[436]=581;
		pattern2[437]=655;
		pattern2[438]=743;
		pattern2[439]=845;
		pattern2[440]=961;
		pattern2[441]=1088;
		pattern2[442]=1226;
		pattern2[443]=1373;
		pattern2[444]=1528;
		pattern2[445]=1690;
		pattern2[446]=1857;
		pattern2[447]=2026;
		pattern2[448]=2198;
		pattern2[449]=2370;
		pattern2[450]=2539;
		pattern2[451]=2706;
		pattern2[452]=2868;
		pattern2[453]=3023;
		pattern2[454]=3170;
		pattern2[455]=3308;
		pattern2[456]=3435;
		pattern2[457]=3551;
		pattern2[458]=3653;
		pattern2[459]=3741;
		pattern2[460]=3815;
		pattern2[461]=3873;
		pattern2[462]=3914;
		pattern2[463]=3940;
		pattern2[464]=3948;
		pattern2[465]=3940;
		pattern2[466]=3914;
		pattern2[467]=3873;
		pattern2[468]=3815;
		pattern2[469]=3741;
		pattern2[470]=3653;
		pattern2[471]=3551;
		pattern2[472]=3435;
		pattern2[473]=3308;
		pattern2[474]=3170;
		pattern2[475]=3023;
		pattern2[476]=2868;
		pattern2[477]=2706;
		pattern2[478]=2539;
		pattern2[479]=2370;
		pattern2[480]=2198;
		pattern2[481]=2026;
		pattern2[482]=1857;
		pattern2[483]=1690;
		pattern2[484]=1528;
		pattern2[485]=1373;
		pattern2[486]=1226;
		pattern2[487]=1088;
		pattern2[488]=961;
		pattern2[489]=845;
		pattern2[490]=743;
		pattern2[491]=655;
		pattern2[492]=581;
		pattern2[493]=523;
		pattern2[494]=482;
		pattern2[495]=456;
		pattern2[496]=448;
		pattern2[497]=456;
		pattern2[498]=482;
		pattern2[499]=523;
		pattern2[500]=581;
		pattern2[501]=655;
		pattern2[502]=743;
		pattern2[503]=845;
		pattern2[504]=961;
		pattern2[505]=1088;
		pattern2[506]=1226;
		pattern2[507]=1373;
		pattern2[508]=1528;
		pattern2[509]=1690;
		pattern2[510]=1857;
		pattern2[511]=2026;
		pattern2[512]=2198;
		pattern2[513]=2370;
		pattern2[514]=2539;
		pattern2[515]=2706;
		pattern2[516]=2868;
		pattern2[517]=3023;
		pattern2[518]=3170;
		pattern2[519]=3308;
		pattern2[520]=3435;
		pattern2[521]=3551;
		pattern2[522]=3653;
		pattern2[523]=3741;
		pattern2[524]=3815;
		pattern2[525]=3873;
		pattern2[526]=3914;
		pattern2[527]=3940;
		pattern2[528]=3948;
		pattern2[529]=3940;
		pattern2[530]=3914;
		pattern2[531]=3873;
		pattern2[532]=3815;
		pattern2[533]=3741;
		pattern2[534]=3653;
		pattern2[535]=3551;
		pattern2[536]=3435;
		pattern2[537]=3308;
		pattern2[538]=3170;
		pattern2[539]=3023;
		pattern2[540]=2868;
		pattern2[541]=2706;
		pattern2[542]=2539;
		pattern2[543]=2370;
		pattern2[544]=2198;
		pattern2[545]=2026;
		pattern2[546]=1857;
		pattern2[547]=1690;
		pattern2[548]=1528;
		pattern2[549]=1373;
		pattern2[550]=1226;
		pattern2[551]=1088;
		pattern2[552]=961;
		pattern2[553]=845;
		pattern2[554]=743;
		pattern2[555]=655;
		pattern2[556]=581;
		pattern2[557]=523;
		pattern2[558]=482;
		pattern2[559]=456;
		pattern2[560]=448;
		pattern2[561]=456;
		pattern2[562]=482;
		pattern2[563]=523;
		pattern2[564]=581;
		pattern2[565]=655;
		pattern2[566]=743;
		pattern2[567]=845;
		pattern2[568]=961;
		pattern2[569]=1088;
		pattern2[570]=1226;
		pattern2[571]=1373;
		pattern2[572]=1528;
		pattern2[573]=1690;
		pattern2[574]=1857;
		pattern2[575]=2026;
		pattern2[576]=2198;
		pattern2[577]=2370;
		pattern2[578]=2539;
		pattern2[579]=2706;
		pattern2[580]=2868;
		pattern2[581]=3023;
		pattern2[582]=3170;
		pattern2[583]=3308;
		pattern2[584]=3435;
		pattern2[585]=3551;
		pattern2[586]=3653;
		pattern2[587]=3741;
		pattern2[588]=3815;
		pattern2[589]=3873;
		pattern2[590]=3914;
		pattern2[591]=3940;
		pattern2[592]=3948;
		pattern2[593]=3940;
		pattern2[594]=3914;
		pattern2[595]=3873;
		pattern2[596]=3815;
		pattern2[597]=3741;
		pattern2[598]=3653;
		pattern2[599]=3551;
		pattern2[600]=3435;
		pattern2[601]=3308;
		pattern2[602]=3170;
		pattern2[603]=3023;
		pattern2[604]=2868;
		pattern2[605]=2706;
		pattern2[606]=2539;
		pattern2[607]=2370;
		pattern2[608]=2198;
		pattern2[609]=2026;
		pattern2[610]=1857;
		pattern2[611]=1690;
		pattern2[612]=1528;
		pattern2[613]=1373;
		pattern2[614]=1226;
		pattern2[615]=1088;
		pattern2[616]=961;
		pattern2[617]=845;
		pattern2[618]=743;
		pattern2[619]=655;
		pattern2[620]=581;
		pattern2[621]=523;
		pattern2[622]=482;
		pattern2[623]=456;
		pattern2[624]=448;
		pattern2[625]=456;
		pattern2[626]=482;
		pattern2[627]=523;
		pattern2[628]=581;
		pattern2[629]=655;
		pattern2[630]=743;
		pattern2[631]=845;
		pattern2[632]=961;
		pattern2[633]=1088;
		pattern2[634]=1226;
		pattern2[635]=1373;
		pattern2[636]=1528;
		pattern2[637]=1690;
		pattern2[638]=1857;
		pattern2[639]=2026;
		pattern2[640]=2198;
		pattern2[641]=2370;
		pattern2[642]=2539;
		pattern2[643]=2706;
		pattern2[644]=2868;
		pattern2[645]=3023;
		pattern2[646]=3170;
		pattern2[647]=3308;
		pattern2[648]=3435;
		pattern2[649]=3551;
		pattern2[650]=3653;
		pattern2[651]=3741;
		pattern2[652]=3815;
		pattern2[653]=3873;
		pattern2[654]=3914;
		pattern2[655]=3940;
		pattern2[656]=3948;
		pattern2[657]=3940;
		pattern2[658]=3914;
		pattern2[659]=3873;
		pattern2[660]=3815;
		pattern2[661]=3741;
		pattern2[662]=3653;
		pattern2[663]=3551;
		pattern2[664]=3435;
		pattern2[665]=3308;
		pattern2[666]=3170;
		pattern2[667]=3023;
		pattern2[668]=2868;
		pattern2[669]=2706;
		pattern2[670]=2539;
		pattern2[671]=2370;
		pattern2[672]=2198;
		pattern2[673]=2026;
		pattern2[674]=1857;
		pattern2[675]=1690;
		pattern2[676]=1528;
		pattern2[677]=1373;
		pattern2[678]=1226;
		pattern2[679]=1088;
		pattern2[680]=961;
		pattern2[681]=845;
		pattern2[682]=743;
		pattern2[683]=655;
		pattern2[684]=581;
		pattern2[685]=523;
		pattern2[686]=482;
		pattern2[687]=456;
		pattern2[688]=448;
		pattern2[689]=456;
		pattern2[690]=482;
		pattern2[691]=523;
		pattern2[692]=581;
		pattern2[693]=655;
		pattern2[694]=743;
		pattern2[695]=845;
		pattern2[696]=961;
		pattern2[697]=1088;
		pattern2[698]=1226;
		pattern2[699]=1373;
		pattern2[700]=1528;
		pattern2[701]=1690;
		pattern2[702]=1857;
		pattern2[703]=2026;
		pattern2[704]=2198;
		pattern2[705]=2370;
		pattern2[706]=2539;
		pattern2[707]=2706;
		pattern2[708]=2868;
		pattern2[709]=3023;
		pattern2[710]=3170;
		pattern2[711]=3308;
		pattern2[712]=3435;
		pattern2[713]=3551;
		pattern2[714]=3653;
		pattern2[715]=3741;
		pattern2[716]=3815;
		pattern2[717]=3873;
		pattern2[718]=3914;
		pattern2[719]=3940;
		pattern2[720]=3948;
		pattern2[721]=3940;
		pattern2[722]=3914;
		pattern2[723]=3873;
		pattern2[724]=3815;
		pattern2[725]=3741;
		pattern2[726]=3653;
		pattern2[727]=3551;
		pattern2[728]=3435;
		pattern2[729]=3308;
		pattern2[730]=3170;
		pattern2[731]=3023;
		pattern2[732]=2868;
		pattern2[733]=2706;
		pattern2[734]=2539;
		pattern2[735]=2370;
		pattern2[736]=2198;
		pattern2[737]=2026;
		pattern2[738]=1857;
		pattern2[739]=1690;
		pattern2[740]=1528;
		pattern2[741]=1373;
		pattern2[742]=1226;
		pattern2[743]=1088;
		pattern2[744]=961;
		pattern2[745]=845;
		pattern2[746]=743;
		pattern2[747]=655;
		pattern2[748]=581;
		pattern2[749]=523;
		pattern2[750]=482;
		pattern2[751]=456;
		pattern2[752]=448;
		pattern2[753]=456;
		pattern2[754]=482;
		pattern2[755]=523;
		pattern2[756]=581;
		pattern2[757]=655;
		pattern2[758]=743;
		pattern2[759]=845;
		pattern2[760]=961;
		pattern2[761]=1088;
		pattern2[762]=1226;
		pattern2[763]=1373;
		pattern2[764]=1528;
		pattern2[765]=1690;
		pattern2[766]=1857;
		pattern2[767]=2026;
		pattern2[768]=2198;
		pattern2[769]=2370;
		pattern2[770]=2539;
		pattern2[771]=2706;
		pattern2[772]=2868;
		pattern2[773]=3023;
		pattern2[774]=3170;
		pattern2[775]=3308;
		pattern2[776]=3435;
		pattern2[777]=3551;
		pattern2[778]=3653;
		pattern2[779]=3741;
		pattern2[780]=3815;
		pattern2[781]=3873;
		pattern2[782]=3914;
		pattern2[783]=3940;
		pattern2[784]=3948;
		pattern2[785]=3940;
		pattern2[786]=3914;
		pattern2[787]=3873;
		pattern2[788]=3815;
		pattern2[789]=3741;
		pattern2[790]=3653;
		pattern2[791]=3551;
		pattern2[792]=3435;
		pattern2[793]=3308;
		pattern2[794]=3170;
		pattern2[795]=3023;
		pattern2[796]=2868;
		pattern2[797]=2706;
		pattern2[798]=2539;
		pattern2[799]=2370;
		pattern2[800]=2198;
		pattern2[801]=2026;
		pattern2[802]=1857;
		pattern2[803]=1690;
		pattern2[804]=1528;
		pattern2[805]=1373;
		pattern2[806]=1226;
		pattern2[807]=1088;
		pattern2[808]=961;
		pattern2[809]=845;
		pattern2[810]=743;
		pattern2[811]=655;
		pattern2[812]=581;
		pattern2[813]=523;
		pattern2[814]=482;
		pattern2[815]=456;
		pattern2[816]=448;
		pattern2[817]=456;
		pattern2[818]=482;
		pattern2[819]=523;
		pattern2[820]=581;
		pattern2[821]=655;
		pattern2[822]=743;
		pattern2[823]=845;
		pattern2[824]=961;
		pattern2[825]=1088;
		pattern2[826]=1226;
		pattern2[827]=1373;
		pattern2[828]=1528;
		pattern2[829]=1690;
		pattern2[830]=1857;
		pattern2[831]=2026;
		pattern2[832]=2198;
		pattern2[833]=2370;
		pattern2[834]=2539;
		pattern2[835]=2706;
		pattern2[836]=2868;
		pattern2[837]=3023;
		pattern2[838]=3170;
		pattern2[839]=3308;
		pattern2[840]=3435;
		pattern2[841]=3551;
		pattern2[842]=3653;
		pattern2[843]=3741;
		pattern2[844]=3815;
		pattern2[845]=3873;
		pattern2[846]=3914;
		pattern2[847]=3940;
		pattern2[848]=3948;
		pattern2[849]=3940;
		pattern2[850]=3914;
		pattern2[851]=3873;
		pattern2[852]=3815;
		pattern2[853]=3741;
		pattern2[854]=3653;
		pattern2[855]=3551;
		pattern2[856]=3435;
		pattern2[857]=3308;
		pattern2[858]=3170;
		pattern2[859]=3023;
		pattern2[860]=2868;
		pattern2[861]=2706;
		pattern2[862]=2539;
		pattern2[863]=2370;
		pattern2[864]=2198;
		pattern2[865]=2026;
		pattern2[866]=1857;
		pattern2[867]=1690;
		pattern2[868]=1528;
		pattern2[869]=1373;
		pattern2[870]=1226;
		pattern2[871]=1088;
		pattern2[872]=961;
		pattern2[873]=845;
		pattern2[874]=743;
		pattern2[875]=655;
		pattern2[876]=581;
		pattern2[877]=523;
		pattern2[878]=482;
		pattern2[879]=456;
		pattern2[880]=448;
		pattern2[881]=456;
		pattern2[882]=482;
		pattern2[883]=523;
		pattern2[884]=581;
		pattern2[885]=655;
		pattern2[886]=743;
		pattern2[887]=845;
		pattern2[888]=961;
		pattern2[889]=1088;
		pattern2[890]=1226;
		pattern2[891]=1373;
		pattern2[892]=1528;
		pattern2[893]=1690;
		pattern2[894]=1857;
		pattern2[895]=2026;
		pattern2[896]=2198;
		pattern2[897]=2370;
		pattern2[898]=2539;
		pattern2[899]=2706;
		pattern2[900]=2868;
		pattern2[901]=3023;
		pattern2[902]=3170;
		pattern2[903]=3308;
		pattern2[904]=3435;
		pattern2[905]=3551;
		pattern2[906]=3653;
		pattern2[907]=3741;
		pattern2[908]=3815;
		pattern2[909]=3873;
		pattern2[910]=3914;
		pattern2[911]=3940;
		pattern2[912]=3948;
		pattern2[913]=3940;
		pattern2[914]=3914;
		pattern2[915]=3873;
		pattern2[916]=3815;
		pattern2[917]=3741;
		pattern2[918]=3653;
		pattern2[919]=3551;
		pattern2[920]=3435;
		pattern2[921]=3308;
		pattern2[922]=3170;
		pattern2[923]=3023;
		pattern2[924]=2868;
		pattern2[925]=2706;
		pattern2[926]=2539;
		pattern2[927]=2370;
		pattern2[928]=2198;
		pattern2[929]=2026;
		pattern2[930]=1857;
		pattern2[931]=1690;
		pattern2[932]=1528;
		pattern2[933]=1373;
		pattern2[934]=1226;
		pattern2[935]=1088;
		pattern2[936]=961;
		pattern2[937]=845;
		pattern2[938]=743;
		pattern2[939]=655;
		pattern2[940]=581;
		pattern2[941]=523;
		pattern2[942]=482;
		pattern2[943]=456;
		pattern2[944]=448;
		pattern2[945]=456;
		pattern2[946]=482;
		pattern2[947]=523;
		pattern2[948]=581;
		pattern2[949]=655;
		pattern2[950]=743;
		pattern2[951]=845;
		pattern2[952]=961;
		pattern2[953]=1088;
		pattern2[954]=1226;
		pattern2[955]=1373;
		pattern2[956]=1528;
		pattern2[957]=1690;
		pattern2[958]=1857;
		pattern2[959]=2026;
		pattern2[960]=2198;
		pattern2[961]=2370;
		pattern2[962]=2539;
		pattern2[963]=2706;
		pattern2[964]=2868;
		pattern2[965]=3023;
		pattern2[966]=3170;
		pattern2[967]=3308;
		pattern2[968]=3435;
		pattern2[969]=3551;
		pattern2[970]=3653;
		pattern2[971]=3741;
		pattern2[972]=3815;
		pattern2[973]=3873;
		pattern2[974]=3914;
		pattern2[975]=3940;
		pattern2[976]=3948;
		pattern2[977]=3940;
		pattern2[978]=3914;
		pattern2[979]=3873;
		pattern2[980]=3815;
		pattern2[981]=3741;
		pattern2[982]=3653;
		pattern2[983]=3551;
		pattern2[984]=3435;
		pattern2[985]=3308;
		pattern2[986]=3170;
		pattern2[987]=3023;
		pattern2[988]=2868;
		pattern2[989]=2706;
		pattern2[990]=2539;
		pattern2[991]=2370;
		pattern2[992]=2198;
		pattern2[993]=2026;
		pattern2[994]=1857;
		pattern2[995]=1690;
		pattern2[996]=1528;
		pattern2[997]=1373;
		pattern2[998]=1226;
		pattern2[999]=1088;
		pattern2[1000]=961;
		pattern2[1001]=845;
		pattern2[1002]=743;
		pattern2[1003]=655;
		pattern2[1004]=581;
		pattern2[1005]=523;
		pattern2[1006]=482;
		pattern2[1007]=456;
		pattern2[1008]=448;
		pattern2[1009]=456;
		pattern2[1010]=482;
		pattern2[1011]=523;
		pattern2[1012]=581;
		pattern2[1013]=655;
		pattern2[1014]=743;
		pattern2[1015]=845;
		pattern2[1016]=961;
		pattern2[1017]=1088;
		pattern2[1018]=1226;
		pattern2[1019]=1373;
		pattern2[1020]=1528;
		pattern2[1021]=1690;
		pattern2[1022]=1857;
		pattern2[1023]=2026;
		pattern2[1024]=2198;
		pattern2[1025]=2370;
		pattern2[1026]=2539;
		pattern2[1027]=2706;
		pattern2[1028]=2868;
		pattern2[1029]=3023;
		pattern2[1030]=3170;
		pattern2[1031]=3308;
		pattern2[1032]=3435;
		pattern2[1033]=3551;
		pattern2[1034]=3653;
		pattern2[1035]=3741;
		pattern2[1036]=3815;
		pattern2[1037]=3873;
		pattern2[1038]=3914;
		pattern2[1039]=3940;
		pattern2[1040]=3948;
		pattern2[1041]=3940;
		pattern2[1042]=3914;
		pattern2[1043]=3873;
		pattern2[1044]=3815;
		pattern2[1045]=3741;
		pattern2[1046]=3653;
		pattern2[1047]=3551;
		pattern2[1048]=3435;
		pattern2[1049]=3308;
		pattern2[1050]=3170;
		pattern2[1051]=3023;
		pattern2[1052]=2868;
		pattern2[1053]=2706;
		pattern2[1054]=2539;
		pattern2[1055]=2370;
		pattern2[1056]=2198;
		pattern2[1057]=2026;
		pattern2[1058]=1857;
		pattern2[1059]=1690;
		pattern2[1060]=1528;
		pattern2[1061]=1373;
		pattern2[1062]=1226;
		pattern2[1063]=1088;
		pattern2[1064]=961;
		pattern2[1065]=845;
		pattern2[1066]=743;
		pattern2[1067]=655;
		pattern2[1068]=581;
		pattern2[1069]=523;
		pattern2[1070]=482;
		pattern2[1071]=456;
		pattern2[1072]=448;
		pattern2[1073]=456;
		pattern2[1074]=482;
		pattern2[1075]=523;
		pattern2[1076]=581;
		pattern2[1077]=655;
		pattern2[1078]=743;
		pattern2[1079]=845;
		pattern2[1080]=961;
		pattern2[1081]=1088;
		pattern2[1082]=1226;
		pattern2[1083]=1373;
		pattern2[1084]=1528;
		pattern2[1085]=1690;
		pattern2[1086]=1857;
		pattern2[1087]=2026;
		pattern2[1088]=2198;
		pattern2[1089]=2370;
		pattern2[1090]=2539;
		pattern2[1091]=2706;
		pattern2[1092]=2868;
		pattern2[1093]=3023;
		pattern2[1094]=3170;
		pattern2[1095]=3308;
		pattern2[1096]=3435;
		pattern2[1097]=3551;
		pattern2[1098]=3653;
		pattern2[1099]=3741;
		pattern2[1100]=3815;
		pattern2[1101]=3873;
		pattern2[1102]=3914;
		pattern2[1103]=3940;
		pattern2[1104]=3948;
		pattern2[1105]=3940;
		pattern2[1106]=3914;
		pattern2[1107]=3873;
		pattern2[1108]=3815;
		pattern2[1109]=3741;
		pattern2[1110]=3653;
		pattern2[1111]=3551;
		pattern2[1112]=3435;
		pattern2[1113]=3308;
		pattern2[1114]=3170;
		pattern2[1115]=3023;
		pattern2[1116]=2868;
		pattern2[1117]=2706;
		pattern2[1118]=2539;
		pattern2[1119]=2370;
		pattern2[1120]=2198;
		pattern2[1121]=2026;
		pattern2[1122]=1857;
		pattern2[1123]=1690;
		pattern2[1124]=1528;
		pattern2[1125]=1373;
		pattern2[1126]=1226;
		pattern2[1127]=1088;
		pattern2[1128]=961;
		pattern2[1129]=845;
		pattern2[1130]=743;
		pattern2[1131]=655;
		pattern2[1132]=581;
		pattern2[1133]=523;
		pattern2[1134]=482;
		pattern2[1135]=456;
		pattern2[1136]=448;
		pattern2[1137]=456;
		pattern2[1138]=482;
		pattern2[1139]=523;
		pattern2[1140]=581;
		pattern2[1141]=655;
		pattern2[1142]=743;
		pattern2[1143]=845;
		pattern2[1144]=961;
		pattern2[1145]=1088;
		pattern2[1146]=1226;
		pattern2[1147]=1373;
		pattern2[1148]=1528;
		pattern2[1149]=1690;
		pattern2[1150]=1857;
		pattern2[1151]=2026;
		pattern2[1152]=2198;
		pattern2[1153]=2370;
		pattern2[1154]=2539;
		pattern2[1155]=2706;
		pattern2[1156]=2868;
		pattern2[1157]=3023;
		pattern2[1158]=3170;
		pattern2[1159]=3308;
		pattern2[1160]=3435;
		pattern2[1161]=3551;
		pattern2[1162]=3653;
		pattern2[1163]=3741;
		pattern2[1164]=3815;
		pattern2[1165]=3873;
		pattern2[1166]=3914;
		pattern2[1167]=3940;
		pattern2[1168]=3948;
		pattern2[1169]=3940;
		pattern2[1170]=3914;
		pattern2[1171]=3873;
		pattern2[1172]=3815;
		pattern2[1173]=3741;
		pattern2[1174]=3653;
		pattern2[1175]=3551;
		pattern2[1176]=3435;
		pattern2[1177]=3308;
		pattern2[1178]=3170;
		pattern2[1179]=3023;
		pattern2[1180]=2868;
		pattern2[1181]=2706;
		pattern2[1182]=2539;
		pattern2[1183]=2370;
		pattern2[1184]=2198;
		pattern2[1185]=2026;
		pattern2[1186]=1857;
		pattern2[1187]=1690;
		pattern2[1188]=1528;
		pattern2[1189]=1373;
		pattern2[1190]=1226;
		pattern2[1191]=1088;
		pattern2[1192]=961;
		pattern2[1193]=845;
		pattern2[1194]=743;
		pattern2[1195]=655;
		pattern2[1196]=581;
		pattern2[1197]=523;
		pattern2[1198]=482;
		pattern2[1199]=456;
		pattern2[1200]=448;
		pattern2[1201]=456;
		pattern2[1202]=482;
		pattern2[1203]=523;
		pattern2[1204]=581;
		pattern2[1205]=655;
		pattern2[1206]=743;
		pattern2[1207]=845;
		pattern2[1208]=961;
		pattern2[1209]=1088;
		pattern2[1210]=1226;
		pattern2[1211]=1373;
		pattern2[1212]=1528;
		pattern2[1213]=1690;
		pattern2[1214]=1857;
		pattern2[1215]=2026;
		pattern2[1216]=2198;
		pattern2[1217]=2370;
		pattern2[1218]=2539;
		pattern2[1219]=2706;
		pattern2[1220]=2868;
		pattern2[1221]=3023;
		pattern2[1222]=3170;
		pattern2[1223]=3308;
		pattern2[1224]=3435;
		pattern2[1225]=3551;
		pattern2[1226]=3653;
		pattern2[1227]=3741;
		pattern2[1228]=3815;
		pattern2[1229]=3873;
		pattern2[1230]=3914;
		pattern2[1231]=3940;
		pattern2[1232]=3948;
		pattern2[1233]=3940;
		pattern2[1234]=3914;
		pattern2[1235]=3873;
		pattern2[1236]=3815;
		pattern2[1237]=3741;
		pattern2[1238]=3653;
		pattern2[1239]=3551;
		pattern2[1240]=3435;
		pattern2[1241]=3308;
		pattern2[1242]=3170;
		pattern2[1243]=3023;
		pattern2[1244]=2868;
		pattern2[1245]=2706;
		pattern2[1246]=2539;
		pattern2[1247]=2370;
		pattern2[1248]=2198;
		pattern2[1249]=2026;
		pattern2[1250]=1857;
		pattern2[1251]=1690;
		pattern2[1252]=1528;
		pattern2[1253]=1373;
		pattern2[1254]=1226;
		pattern2[1255]=1088;
		pattern2[1256]=961;
		pattern2[1257]=845;
		pattern2[1258]=743;
		pattern2[1259]=655;
		pattern2[1260]=581;
		pattern2[1261]=523;
		pattern2[1262]=482;
		pattern2[1263]=456;
		pattern2[1264]=448;
		pattern2[1265]=456;
		pattern2[1266]=482;
		pattern2[1267]=523;
		pattern2[1268]=581;
		pattern2[1269]=655;
		pattern2[1270]=743;
		pattern2[1271]=845;
		pattern2[1272]=961;
		pattern2[1273]=1088;
		pattern2[1274]=1226;
		pattern2[1275]=1373;
		pattern2[1276]=1528;
		pattern2[1277]=1690;
		pattern2[1278]=1857;
		pattern2[1279]=2026;
		pattern2[1280]=2198;
		pattern2[1281]=2370;
		pattern2[1282]=2539;
		pattern2[1283]=2706;
		pattern2[1284]=2868;
		pattern2[1285]=3023;
		pattern2[1286]=3170;
		pattern2[1287]=3308;
		pattern2[1288]=3435;
		pattern2[1289]=3551;
		pattern2[1290]=3653;
		pattern2[1291]=3741;
		pattern2[1292]=3815;
		pattern2[1293]=3873;
		pattern2[1294]=3914;
		pattern2[1295]=3940;
		pattern2[1296]=3948;
		pattern2[1297]=3940;
		pattern2[1298]=3914;
		pattern2[1299]=3873;
		pattern2[1300]=3815;
		pattern2[1301]=3741;
		pattern2[1302]=3653;
		pattern2[1303]=3551;
		pattern2[1304]=3435;
		pattern2[1305]=3308;
		pattern2[1306]=3170;
		pattern2[1307]=3023;
		pattern2[1308]=2868;
		pattern2[1309]=2706;
		pattern2[1310]=2539;
		pattern2[1311]=2370;
		pattern2[1312]=2198;
		pattern2[1313]=2026;
		pattern2[1314]=1857;
		pattern2[1315]=1690;
		pattern2[1316]=1528;
		pattern2[1317]=1373;
		pattern2[1318]=1226;
		pattern2[1319]=1088;
		pattern2[1320]=961;
		pattern2[1321]=845;
		pattern2[1322]=743;
		pattern2[1323]=655;
		pattern2[1324]=581;
		pattern2[1325]=523;
		pattern2[1326]=482;
		pattern2[1327]=456;
		pattern2[1328]=448;
		pattern2[1329]=456;
		pattern2[1330]=482;
		pattern2[1331]=523;
		pattern2[1332]=581;
		pattern2[1333]=655;
		pattern2[1334]=743;
		pattern2[1335]=845;
		pattern2[1336]=961;
		pattern2[1337]=1088;
		pattern2[1338]=1226;
		pattern2[1339]=1373;
		pattern2[1340]=1528;
		pattern2[1341]=1690;
		pattern2[1342]=1857;
		pattern2[1343]=2026;
		pattern2[1344]=2198;
		pattern2[1345]=2370;
		pattern2[1346]=2539;
		pattern2[1347]=2706;
		pattern2[1348]=2868;
		pattern2[1349]=3023;
		pattern2[1350]=3170;
		pattern2[1351]=3308;
		pattern2[1352]=3435;
		pattern2[1353]=3551;
		pattern2[1354]=3653;
		pattern2[1355]=3741;
		pattern2[1356]=3815;
		pattern2[1357]=3873;
		pattern2[1358]=3914;
		pattern2[1359]=3940;
		pattern2[1360]=3948;
		pattern2[1361]=3940;
		pattern2[1362]=3914;
		pattern2[1363]=3873;
		pattern2[1364]=3815;
		pattern2[1365]=3741;
		pattern2[1366]=3653;
		pattern2[1367]=3551;
		pattern2[1368]=3435;
		pattern2[1369]=3308;
		pattern2[1370]=3170;
		pattern2[1371]=3023;
		pattern2[1372]=2868;
		pattern2[1373]=2706;
		pattern2[1374]=2539;
		pattern2[1375]=2370;
		pattern2[1376]=2198;
		pattern2[1377]=2026;
		pattern2[1378]=1857;
		pattern2[1379]=1690;
		pattern2[1380]=1528;
		pattern2[1381]=1373;
		pattern2[1382]=1226;
		pattern2[1383]=1088;
		pattern2[1384]=961;
		pattern2[1385]=845;
		pattern2[1386]=743;
		pattern2[1387]=655;
		pattern2[1388]=581;
		pattern2[1389]=523;
		pattern2[1390]=482;
		pattern2[1391]=456;
		pattern2[1392]=448;
		pattern2[1393]=456;
		pattern2[1394]=482;
		pattern2[1395]=523;
		pattern2[1396]=581;
		pattern2[1397]=655;
		pattern2[1398]=743;
		pattern2[1399]=845;
		pattern2[1400]=961;
		pattern2[1401]=1088;
		pattern2[1402]=1226;
		pattern2[1403]=1373;
		pattern2[1404]=1528;
		pattern2[1405]=1690;
		pattern2[1406]=1857;
		pattern2[1407]=2026;
		pattern2[1408]=2198;
		pattern2[1409]=2370;
		pattern2[1410]=2539;
		pattern2[1411]=2706;
		pattern2[1412]=2868;
		pattern2[1413]=3023;
		pattern2[1414]=3170;
		pattern2[1415]=3308;
		pattern2[1416]=3435;
		pattern2[1417]=3551;
		pattern2[1418]=3653;
		pattern2[1419]=3741;
		pattern2[1420]=3815;
		pattern2[1421]=3873;
		pattern2[1422]=3914;
		pattern2[1423]=3940;
		pattern2[1424]=3948;
		pattern2[1425]=3940;
		pattern2[1426]=3914;
		pattern2[1427]=3873;
		pattern2[1428]=3815;
		pattern2[1429]=3741;
		pattern2[1430]=3653;
		pattern2[1431]=3551;
		pattern2[1432]=3435;
		pattern2[1433]=3308;
		pattern2[1434]=3170;
		pattern2[1435]=3023;
		pattern2[1436]=2868;
		pattern2[1437]=2706;
		pattern2[1438]=2539;
		pattern2[1439]=2370;
		pattern2[1440]=2198;
		pattern2[1441]=2026;
		pattern2[1442]=1857;
		pattern2[1443]=1690;
		pattern2[1444]=1528;
		pattern2[1445]=1373;
		pattern2[1446]=1226;
		pattern2[1447]=1088;
		pattern2[1448]=961;
		pattern2[1449]=845;
		pattern2[1450]=743;
		pattern2[1451]=655;
		pattern2[1452]=581;
		pattern2[1453]=523;
		pattern2[1454]=482;
		pattern2[1455]=456;
		pattern2[1456]=448;
		pattern2[1457]=456;
		pattern2[1458]=482;
		pattern2[1459]=523;
		pattern2[1460]=581;
		pattern2[1461]=655;
		pattern2[1462]=743;
		pattern2[1463]=845;
		pattern2[1464]=961;
		pattern2[1465]=1088;
		pattern2[1466]=1226;
		pattern2[1467]=1373;
		pattern2[1468]=1528;
		pattern2[1469]=1690;
		pattern2[1470]=1857;
		pattern2[1471]=2026;
		pattern2[1472]=2198;
		pattern2[1473]=2370;
		pattern2[1474]=2539;
		pattern2[1475]=2706;
		pattern2[1476]=2868;
		pattern2[1477]=3023;
		pattern2[1478]=3170;
		pattern2[1479]=3308;
		pattern2[1480]=3435;
		pattern2[1481]=3551;
		pattern2[1482]=3653;
		pattern2[1483]=3741;
		pattern2[1484]=3815;
		pattern2[1485]=3873;
		pattern2[1486]=3914;
		pattern2[1487]=3940;
		pattern2[1488]=3948;
		pattern2[1489]=3940;
		pattern2[1490]=3914;
		pattern2[1491]=3873;
		pattern2[1492]=3815;
		pattern2[1493]=3741;
		pattern2[1494]=3653;
		pattern2[1495]=3551;
		pattern2[1496]=3435;
		pattern2[1497]=3308;
		pattern2[1498]=3170;
		pattern2[1499]=3023;
		pattern2[1500]=2868;
		pattern2[1501]=2706;
		pattern2[1502]=2539;
		pattern2[1503]=2370;
		pattern2[1504]=2198;
		pattern2[1505]=2026;
		pattern2[1506]=1857;
		pattern2[1507]=1690;
		pattern2[1508]=1528;
		pattern2[1509]=1373;
		pattern2[1510]=1226;
		pattern2[1511]=1088;
		pattern2[1512]=961;
		pattern2[1513]=845;
		pattern2[1514]=743;
		pattern2[1515]=655;
		pattern2[1516]=581;
		pattern2[1517]=523;
		pattern2[1518]=482;
		pattern2[1519]=456;
		pattern2[1520]=448;
		pattern2[1521]=456;
		pattern2[1522]=482;
		pattern2[1523]=523;
		pattern2[1524]=581;
		pattern2[1525]=655;
		pattern2[1526]=743;
		pattern2[1527]=845;
		pattern2[1528]=961;
		pattern2[1529]=1088;
		pattern2[1530]=1226;
		pattern2[1531]=1373;
		pattern2[1532]=1528;
		pattern2[1533]=1690;
		pattern2[1534]=1857;
		pattern2[1535]=2026;
		pattern2[1536]=2198;
		pattern2[1537]=2370;
		pattern2[1538]=2539;
		pattern2[1539]=2706;
		pattern2[1540]=2868;
		pattern2[1541]=3023;
		pattern2[1542]=3170;
		pattern2[1543]=3308;
		pattern2[1544]=3435;
		pattern2[1545]=3551;
		pattern2[1546]=3653;
		pattern2[1547]=3741;
		pattern2[1548]=3815;
		pattern2[1549]=3873;
		pattern2[1550]=3914;
		pattern2[1551]=3940;
		pattern2[1552]=3948;
		pattern2[1553]=3940;
		pattern2[1554]=3914;
		pattern2[1555]=3873;
		pattern2[1556]=3815;
		pattern2[1557]=3741;
		pattern2[1558]=3653;
		pattern2[1559]=3551;
		pattern2[1560]=3435;
		pattern2[1561]=3308;
		pattern2[1562]=3170;
		pattern2[1563]=3023;
		pattern2[1564]=2868;
		pattern2[1565]=2706;
		pattern2[1566]=2539;
		pattern2[1567]=2370;
		pattern2[1568]=2198;
		pattern2[1569]=2026;
		pattern2[1570]=1857;
		pattern2[1571]=1690;
		pattern2[1572]=1528;
		pattern2[1573]=1373;
		pattern2[1574]=1226;
		pattern2[1575]=1088;
		pattern2[1576]=961;
		pattern2[1577]=845;
		pattern2[1578]=743;
		pattern2[1579]=655;
		pattern2[1580]=581;
		pattern2[1581]=523;
		pattern2[1582]=482;
		pattern2[1583]=456;
		pattern2[1584]=448;
		pattern2[1585]=456;
		pattern2[1586]=482;
		pattern2[1587]=523;
		pattern2[1588]=581;
		pattern2[1589]=655;
		pattern2[1590]=743;
		pattern2[1591]=845;
		pattern2[1592]=961;
		pattern2[1593]=1088;
		pattern2[1594]=1226;
		pattern2[1595]=1373;
		pattern2[1596]=1528;
		pattern2[1597]=1690;
		pattern2[1598]=1857;
		pattern2[1599]=2026;
		pattern2[1600]=2198;
		pattern2[1601]=2370;
		pattern2[1602]=2539;
		pattern2[1603]=2706;
		pattern2[1604]=2868;
		pattern2[1605]=3023;
		pattern2[1606]=3170;
		pattern2[1607]=3308;
		pattern2[1608]=3435;
		pattern2[1609]=3551;
		pattern2[1610]=3653;
		pattern2[1611]=3741;
		pattern2[1612]=3815;
		pattern2[1613]=3873;
		pattern2[1614]=3914;
		pattern2[1615]=3940;
		pattern2[1616]=3948;
		pattern2[1617]=3940;
		pattern2[1618]=3914;
		pattern2[1619]=3873;
		pattern2[1620]=3815;
		pattern2[1621]=3741;
		pattern2[1622]=3653;
		pattern2[1623]=3551;
		pattern2[1624]=3435;
		pattern2[1625]=3308;
		pattern2[1626]=3170;
		pattern2[1627]=3023;
		pattern2[1628]=2868;
		pattern2[1629]=2706;
		pattern2[1630]=2539;
		pattern2[1631]=2370;
		pattern2[1632]=2198;
		pattern2[1633]=2026;
		pattern2[1634]=1857;
		pattern2[1635]=1690;
		pattern2[1636]=1528;
		pattern2[1637]=1373;
		pattern2[1638]=1226;
		pattern2[1639]=1088;
		pattern2[1640]=961;
		pattern2[1641]=845;
		pattern2[1642]=743;
		pattern2[1643]=655;
		pattern2[1644]=581;
		pattern2[1645]=523;
		pattern2[1646]=482;
		pattern2[1647]=456;
		pattern2[1648]=448;
		pattern2[1649]=456;
		pattern2[1650]=482;
		pattern2[1651]=523;
		pattern2[1652]=581;
		pattern2[1653]=655;
		pattern2[1654]=743;
		pattern2[1655]=845;
		pattern2[1656]=961;
		pattern2[1657]=1088;
		pattern2[1658]=1226;
		pattern2[1659]=1373;
		pattern2[1660]=1528;
		pattern2[1661]=1690;
		pattern2[1662]=1857;
		pattern2[1663]=2026;
		pattern2[1664]=2198;
		pattern2[1665]=2370;
		pattern2[1666]=2539;
		pattern2[1667]=2706;
		pattern2[1668]=2868;
		pattern2[1669]=3023;
		pattern2[1670]=3170;
		pattern2[1671]=3308;
		pattern2[1672]=3435;
		pattern2[1673]=3551;
		pattern2[1674]=3653;
		pattern2[1675]=3741;
		pattern2[1676]=3815;
		pattern2[1677]=3873;
		pattern2[1678]=3914;
		pattern2[1679]=3940;
		pattern2[1680]=3948;
		pattern2[1681]=3940;
		pattern2[1682]=3914;
		pattern2[1683]=3873;
		pattern2[1684]=3815;
		pattern2[1685]=3741;
		pattern2[1686]=3653;
		pattern2[1687]=3551;
		pattern2[1688]=3435;
		pattern2[1689]=3308;
		pattern2[1690]=3170;
		pattern2[1691]=3023;
		pattern2[1692]=2868;
		pattern2[1693]=2706;
		pattern2[1694]=2539;
		pattern2[1695]=2370;
		pattern2[1696]=2198;
		pattern2[1697]=2026;
		pattern2[1698]=1857;
		pattern2[1699]=1690;
		pattern2[1700]=1528;
		pattern2[1701]=1373;
		pattern2[1702]=1226;
		pattern2[1703]=1088;
		pattern2[1704]=961;
		pattern2[1705]=845;
		pattern2[1706]=743;
		pattern2[1707]=655;
		pattern2[1708]=581;
		pattern2[1709]=523;
		pattern2[1710]=482;
		pattern2[1711]=456;
		pattern2[1712]=448;
		pattern2[1713]=456;
		pattern2[1714]=482;
		pattern2[1715]=523;
		pattern2[1716]=581;
		pattern2[1717]=655;
		pattern2[1718]=743;
		pattern2[1719]=845;
		pattern2[1720]=961;
		pattern2[1721]=1088;
		pattern2[1722]=1226;
		pattern2[1723]=1373;
		pattern2[1724]=1528;
		pattern2[1725]=1690;
		pattern2[1726]=1857;
		pattern2[1727]=2026;
		pattern2[1728]=2198;
		pattern2[1729]=2370;
		pattern2[1730]=2539;
		pattern2[1731]=2706;
		pattern2[1732]=2868;
		pattern2[1733]=3023;
		pattern2[1734]=3170;
		pattern2[1735]=3308;
		pattern2[1736]=3435;
		pattern2[1737]=3551;
		pattern2[1738]=3653;
		pattern2[1739]=3741;
		pattern2[1740]=3815;
		pattern2[1741]=3873;
		pattern2[1742]=3914;
		pattern2[1743]=3940;
		pattern2[1744]=3948;
		pattern2[1745]=3940;
		pattern2[1746]=3914;
		pattern2[1747]=3873;
		pattern2[1748]=3815;
		pattern2[1749]=3741;
		pattern2[1750]=3653;
		pattern2[1751]=3551;
		pattern2[1752]=3435;
		pattern2[1753]=3308;
		pattern2[1754]=3170;
		pattern2[1755]=3023;
		pattern2[1756]=2868;
		pattern2[1757]=2706;
		pattern2[1758]=2539;
		pattern2[1759]=2370;
		pattern2[1760]=2198;
		pattern2[1761]=2026;
		pattern2[1762]=1857;
		pattern2[1763]=1690;
		pattern2[1764]=1528;
		pattern2[1765]=1373;
		pattern2[1766]=1226;
		pattern2[1767]=1088;
		pattern2[1768]=961;
		pattern2[1769]=845;
		pattern2[1770]=743;
		pattern2[1771]=655;
		pattern2[1772]=581;
		pattern2[1773]=523;
		pattern2[1774]=482;
		pattern2[1775]=456;
		pattern2[1776]=448;
		pattern2[1777]=456;
		pattern2[1778]=482;
		pattern2[1779]=523;
		pattern2[1780]=581;
		pattern2[1781]=655;
		pattern2[1782]=743;
		pattern2[1783]=845;
		pattern2[1784]=961;
		pattern2[1785]=1088;
		pattern2[1786]=1226;
		pattern2[1787]=1373;
		pattern2[1788]=1528;
		pattern2[1789]=1690;
		pattern2[1790]=1857;
		pattern2[1791]=2026;
		pattern2[1792]=2198;
		pattern2[1793]=2370;
		pattern2[1794]=2539;
		pattern2[1795]=2706;
		pattern2[1796]=2868;
		pattern2[1797]=3023;
		pattern2[1798]=3170;
		pattern2[1799]=3308;
		pattern2[1800]=3435;
		pattern2[1801]=3551;
		pattern2[1802]=3653;
		pattern2[1803]=3741;
		pattern2[1804]=3815;
		pattern2[1805]=3873;
		pattern2[1806]=3914;
		pattern2[1807]=3940;
		pattern2[1808]=3948;
		pattern2[1809]=3940;
		pattern2[1810]=3914;
		pattern2[1811]=3873;
		pattern2[1812]=3815;
		pattern2[1813]=3741;
		pattern2[1814]=3653;
		pattern2[1815]=3551;
		pattern2[1816]=3435;
		pattern2[1817]=3308;
		pattern2[1818]=3170;
		pattern2[1819]=3023;
		pattern2[1820]=2868;
		pattern2[1821]=2706;
		pattern2[1822]=2539;
		pattern2[1823]=2370;
		pattern2[1824]=2198;
		pattern2[1825]=2026;
		pattern2[1826]=1857;
		pattern2[1827]=1690;
		pattern2[1828]=1528;
		pattern2[1829]=1373;
		pattern2[1830]=1226;
		pattern2[1831]=1088;
		pattern2[1832]=961;
		pattern2[1833]=845;
		pattern2[1834]=743;
		pattern2[1835]=655;
		pattern2[1836]=581;
		pattern2[1837]=523;
		pattern2[1838]=482;
		pattern2[1839]=456;
		pattern2[1840]=448;
		pattern2[1841]=456;
		pattern2[1842]=482;
		pattern2[1843]=523;
		pattern2[1844]=581;
		pattern2[1845]=655;
		pattern2[1846]=743;
		pattern2[1847]=845;
		pattern2[1848]=961;
		pattern2[1849]=1088;
		pattern2[1850]=1226;
		pattern2[1851]=1373;
		pattern2[1852]=1528;
		pattern2[1853]=1690;
		pattern2[1854]=1857;
		pattern2[1855]=2026;
		pattern2[1856]=2198;
		pattern2[1857]=2370;
		pattern2[1858]=2539;
		pattern2[1859]=2706;
		pattern2[1860]=2868;
		pattern2[1861]=3023;
		pattern2[1862]=3170;
		pattern2[1863]=3308;
		pattern2[1864]=3435;
		pattern2[1865]=3551;
		pattern2[1866]=3653;
		pattern2[1867]=3741;
		pattern2[1868]=3815;
		pattern2[1869]=3873;
		pattern2[1870]=3914;
		pattern2[1871]=3940;
		pattern2[1872]=3948;
		pattern2[1873]=3940;
		pattern2[1874]=3914;
		pattern2[1875]=3873;
		pattern2[1876]=3815;
		pattern2[1877]=3741;
		pattern2[1878]=3653;
		pattern2[1879]=3551;
		pattern2[1880]=3435;
		pattern2[1881]=3308;
		pattern2[1882]=3170;
		pattern2[1883]=3023;
		pattern2[1884]=2868;
		pattern2[1885]=2706;
		pattern2[1886]=2539;
		pattern2[1887]=2370;
		pattern2[1888]=2198;
		pattern2[1889]=2026;
		pattern2[1890]=1857;
		pattern2[1891]=1690;
		pattern2[1892]=1528;
		pattern2[1893]=1373;
		pattern2[1894]=1226;
		pattern2[1895]=1088;
		pattern2[1896]=961;
		pattern2[1897]=845;
		pattern2[1898]=743;
		pattern2[1899]=655;
		pattern2[1900]=581;
		pattern2[1901]=523;
		pattern2[1902]=482;
		pattern2[1903]=456;
		pattern2[1904]=448;
		pattern2[1905]=456;
		pattern2[1906]=482;
		pattern2[1907]=523;
		pattern2[1908]=581;
		pattern2[1909]=655;
		pattern2[1910]=743;
		pattern2[1911]=845;
		pattern2[1912]=961;
		pattern2[1913]=1088;
		pattern2[1914]=1226;
		pattern2[1915]=1373;
		pattern2[1916]=1528;
		pattern2[1917]=1690;
		pattern2[1918]=1857;
		pattern2[1919]=2026;
		pattern2[1920]=2198;
		pattern2[1921]=2370;
		pattern2[1922]=2539;
		pattern2[1923]=2706;
		pattern2[1924]=2868;
		pattern2[1925]=3023;
		pattern2[1926]=3170;
		pattern2[1927]=3308;
		pattern2[1928]=3435;
		pattern2[1929]=3551;
		pattern2[1930]=3653;
		pattern2[1931]=3741;
		pattern2[1932]=3815;
		pattern2[1933]=3873;
		pattern2[1934]=3914;
		pattern2[1935]=3940;
		pattern2[1936]=3948;
		pattern2[1937]=3940;
		pattern2[1938]=3914;
		pattern2[1939]=3873;
		pattern2[1940]=3815;
		pattern2[1941]=3741;
		pattern2[1942]=3653;
		pattern2[1943]=3551;
		pattern2[1944]=3435;
		pattern2[1945]=3308;
		pattern2[1946]=3170;
		pattern2[1947]=3023;
		pattern2[1948]=2868;
		pattern2[1949]=2706;
		pattern2[1950]=2539;
		pattern2[1951]=2370;
		pattern2[1952]=2198;
		pattern2[1953]=2026;
		pattern2[1954]=1857;
		pattern2[1955]=1690;
		pattern2[1956]=1528;
		pattern2[1957]=1373;
		pattern2[1958]=1226;
		pattern2[1959]=1088;
		pattern2[1960]=961;
		pattern2[1961]=845;
		pattern2[1962]=743;
		pattern2[1963]=655;
		pattern2[1964]=581;
		pattern2[1965]=523;
		pattern2[1966]=482;
		pattern2[1967]=456;
		pattern2[1968]=448;
		pattern2[1969]=456;
		pattern2[1970]=482;
		pattern2[1971]=523;
		pattern2[1972]=581;
		pattern2[1973]=655;
		pattern2[1974]=743;
		pattern2[1975]=845;
		pattern2[1976]=961;
		pattern2[1977]=1088;
		pattern2[1978]=1226;
		pattern2[1979]=1373;
		pattern2[1980]=1528;
		pattern2[1981]=1690;
		pattern2[1982]=1857;
		pattern2[1983]=2026;
		pattern2[1984]=2198;
		pattern2[1985]=2370;
		pattern2[1986]=2539;
		pattern2[1987]=2706;
		pattern2[1988]=2868;
		pattern2[1989]=3023;
		pattern2[1990]=3170;
		pattern2[1991]=3308;
		pattern2[1992]=3435;
		pattern2[1993]=3551;
		pattern2[1994]=3653;
		pattern2[1995]=3741;
		pattern2[1996]=3815;
		pattern2[1997]=3873;
		pattern2[1998]=3914;
		pattern2[1999]=3940;
		pattern2[2000]=3948;
		pattern2[2001]=3940;
		pattern2[2002]=3914;
		pattern2[2003]=3873;
		pattern2[2004]=3815;
		pattern2[2005]=3741;
		pattern2[2006]=3653;
		pattern2[2007]=3551;
		pattern2[2008]=3435;
		pattern2[2009]=3308;
		pattern2[2010]=3170;
		pattern2[2011]=3023;
		pattern2[2012]=2868;
		pattern2[2013]=2706;
		pattern2[2014]=2539;
		pattern2[2015]=2370;
		pattern2[2016]=2198;
		pattern2[2017]=2026;
		pattern2[2018]=1857;
		pattern2[2019]=1690;
		pattern2[2020]=1528;
		pattern2[2021]=1373;
		pattern2[2022]=1226;
		pattern2[2023]=1088;
		pattern2[2024]=961;
		pattern2[2025]=845;
		pattern2[2026]=743;
		pattern2[2027]=655;
		pattern2[2028]=581;
		pattern2[2029]=523;
		pattern2[2030]=482;
		pattern2[2031]=456;
		pattern2[2032]=448;
		pattern2[2033]=456;
		pattern2[2034]=482;
		pattern2[2035]=523;
		pattern2[2036]=581;
		pattern2[2037]=655;
		pattern2[2038]=743;
		pattern2[2039]=845;
		pattern2[2040]=961;
		pattern2[2041]=1088;
		pattern2[2042]=1226;
		pattern2[2043]=1373;
		pattern2[2044]=1528;
		pattern2[2045]=1690;
		pattern2[2046]=1857;
		pattern2[2047]=2026;
		pattern2[2048]=2198;
		pattern2[2049]=2370;
		pattern2[2050]=2539;
		pattern2[2051]=2706;
		pattern2[2052]=2868;
		pattern2[2053]=3023;
		pattern2[2054]=3170;
		pattern2[2055]=3308;
		pattern2[2056]=3435;
		pattern2[2057]=3551;
		pattern2[2058]=3653;
		pattern2[2059]=3741;
		pattern2[2060]=3815;
		pattern2[2061]=3873;
		pattern2[2062]=3914;
		pattern2[2063]=3940;
		pattern2[2064]=3948;
		pattern2[2065]=3940;
		pattern2[2066]=3914;
		pattern2[2067]=3873;
		pattern2[2068]=3815;
		pattern2[2069]=3741;
		pattern2[2070]=3653;
		pattern2[2071]=3551;
		pattern2[2072]=3435;
		pattern2[2073]=3308;
		pattern2[2074]=3170;
		pattern2[2075]=3023;
		pattern2[2076]=2868;
		pattern2[2077]=2706;
		pattern2[2078]=2539;
		pattern2[2079]=2370;
		pattern2[2080]=2198;
		pattern2[2081]=2026;
		pattern2[2082]=1857;
		pattern2[2083]=1690;
		pattern2[2084]=1528;
		pattern2[2085]=1373;
		pattern2[2086]=1226;
		pattern2[2087]=1088;
		pattern2[2088]=961;
		pattern2[2089]=845;
		pattern2[2090]=743;
		pattern2[2091]=655;
		pattern2[2092]=581;
		pattern2[2093]=523;
		pattern2[2094]=482;
		pattern2[2095]=456;
		pattern2[2096]=448;
		pattern2[2097]=456;
		pattern2[2098]=482;
		pattern2[2099]=523;
		pattern2[2100]=581;
		pattern2[2101]=655;
		pattern2[2102]=743;
		pattern2[2103]=845;
		pattern2[2104]=961;
		pattern2[2105]=1088;
		pattern2[2106]=1226;
		pattern2[2107]=1373;
		pattern2[2108]=1528;
		pattern2[2109]=1690;
		pattern2[2110]=1857;
		pattern2[2111]=2026;
		pattern2[2112]=2198;
		pattern2[2113]=2370;
		pattern2[2114]=2539;
		pattern2[2115]=2706;
		pattern2[2116]=2868;
		pattern2[2117]=3023;
		pattern2[2118]=3170;
		pattern2[2119]=3308;
		pattern2[2120]=3435;
		pattern2[2121]=3551;
		pattern2[2122]=3653;
		pattern2[2123]=3741;
		pattern2[2124]=3815;
		pattern2[2125]=3873;
		pattern2[2126]=3914;
		pattern2[2127]=3940;
		pattern2[2128]=3948;
		pattern2[2129]=3940;
		pattern2[2130]=3914;
		pattern2[2131]=3873;
		pattern2[2132]=3815;
		pattern2[2133]=3741;
		pattern2[2134]=3653;
		pattern2[2135]=3551;
		pattern2[2136]=3435;
		pattern2[2137]=3308;
		pattern2[2138]=3170;
		pattern2[2139]=3023;
		pattern2[2140]=2868;
		pattern2[2141]=2706;
		pattern2[2142]=2539;
		pattern2[2143]=2370;
		pattern2[2144]=2198;
		pattern2[2145]=2026;
		pattern2[2146]=1857;
		pattern2[2147]=1690;
		pattern2[2148]=1528;
		pattern2[2149]=1373;
		pattern2[2150]=1226;
		pattern2[2151]=1088;
		pattern2[2152]=961;
		pattern2[2153]=845;
		pattern2[2154]=743;
		pattern2[2155]=655;
		pattern2[2156]=581;
		pattern2[2157]=523;
		pattern2[2158]=482;
		pattern2[2159]=456;
		pattern2[2160]=448;
		pattern2[2161]=456;
		pattern2[2162]=482;
		pattern2[2163]=523;
		pattern2[2164]=581;
		pattern2[2165]=655;
		pattern2[2166]=743;
		pattern2[2167]=845;
		pattern2[2168]=961;
		pattern2[2169]=1088;
		pattern2[2170]=1226;
		pattern2[2171]=1373;
		pattern2[2172]=1528;
		pattern2[2173]=1690;
		pattern2[2174]=1857;
		pattern2[2175]=2026;
		pattern2[2176]=2198;
		pattern2[2177]=2370;
		pattern2[2178]=2539;
		pattern2[2179]=2706;
		pattern2[2180]=2868;
		pattern2[2181]=3023;
		pattern2[2182]=3170;
		pattern2[2183]=3308;
		pattern2[2184]=3435;
		pattern2[2185]=3551;
		pattern2[2186]=3653;
		pattern2[2187]=3741;
		pattern2[2188]=3815;
		pattern2[2189]=3873;
		pattern2[2190]=3914;
		pattern2[2191]=3940;
		pattern2[2192]=3948;
		pattern2[2193]=3940;
		pattern2[2194]=3914;
		pattern2[2195]=3873;
		pattern2[2196]=3815;
		pattern2[2197]=3741;
		pattern2[2198]=3653;
		pattern2[2199]=3551;
		pattern2[2200]=3435;
		pattern2[2201]=3308;
		pattern2[2202]=3170;
		pattern2[2203]=3023;
		pattern2[2204]=2868;
		pattern2[2205]=2706;
		pattern2[2206]=2539;
		pattern2[2207]=2370;
		pattern2[2208]=2198;
		pattern2[2209]=2026;
		pattern2[2210]=1857;
		pattern2[2211]=1690;
		pattern2[2212]=1528;
		pattern2[2213]=1373;
		pattern2[2214]=1226;
		pattern2[2215]=1088;
		pattern2[2216]=961;
		pattern2[2217]=845;
		pattern2[2218]=743;
		pattern2[2219]=655;
		pattern2[2220]=581;
		pattern2[2221]=523;
		pattern2[2222]=482;
		pattern2[2223]=456;
		pattern2[2224]=448;
		pattern2[2225]=456;
		pattern2[2226]=482;
		pattern2[2227]=523;
		pattern2[2228]=581;
		pattern2[2229]=655;
		pattern2[2230]=743;
		pattern2[2231]=845;
		pattern2[2232]=961;
		pattern2[2233]=1088;
		pattern2[2234]=1226;
		pattern2[2235]=1373;
		pattern2[2236]=1528;
		pattern2[2237]=1690;
		pattern2[2238]=1857;
		pattern2[2239]=2026;
		pattern2[2240]=2198;
		pattern2[2241]=2370;
		pattern2[2242]=2539;
		pattern2[2243]=2706;
		pattern2[2244]=2868;
		pattern2[2245]=3023;
		pattern2[2246]=3170;
		pattern2[2247]=3308;
		pattern2[2248]=3435;
		pattern2[2249]=3551;
		pattern2[2250]=3653;
		pattern2[2251]=3741;
		pattern2[2252]=3815;
		pattern2[2253]=3873;
		pattern2[2254]=3914;
		pattern2[2255]=3940;
		pattern2[2256]=3948;
		pattern2[2257]=3940;
		pattern2[2258]=3914;
		pattern2[2259]=3873;
		pattern2[2260]=3815;
		pattern2[2261]=3741;
		pattern2[2262]=3653;
		pattern2[2263]=3551;
		pattern2[2264]=3435;
		pattern2[2265]=3308;
		pattern2[2266]=3170;
		pattern2[2267]=3023;
		pattern2[2268]=2868;
		pattern2[2269]=2706;
		pattern2[2270]=2539;
		pattern2[2271]=2370;
		pattern2[2272]=2198;
		pattern2[2273]=2026;
		pattern2[2274]=1857;
		pattern2[2275]=1690;
		pattern2[2276]=1528;
		pattern2[2277]=1373;
		pattern2[2278]=1226;
		pattern2[2279]=1088;
		pattern2[2280]=961;
		pattern2[2281]=845;
		pattern2[2282]=743;
		pattern2[2283]=655;
		pattern2[2284]=581;
		pattern2[2285]=523;
		pattern2[2286]=482;
		pattern2[2287]=456;
		pattern2[2288]=448;
		pattern2[2289]=456;
		pattern2[2290]=482;
		pattern2[2291]=523;
		pattern2[2292]=581;
		pattern2[2293]=655;
		pattern2[2294]=743;
		pattern2[2295]=845;
		pattern2[2296]=961;
		pattern2[2297]=1088;
		pattern2[2298]=1226;
		pattern2[2299]=1373;
		pattern2[2300]=1528;
		pattern2[2301]=1690;
		pattern2[2302]=1857;
		pattern2[2303]=2026;
		pattern2[2304]=2198;
		pattern2[2305]=2370;
		pattern2[2306]=2539;
		pattern2[2307]=2706;
		pattern2[2308]=2868;
		pattern2[2309]=3023;
		pattern2[2310]=3170;
		pattern2[2311]=3308;
		pattern2[2312]=3435;
		pattern2[2313]=3551;
		pattern2[2314]=3653;
		pattern2[2315]=3741;
		pattern2[2316]=3815;
		pattern2[2317]=3873;
		pattern2[2318]=3914;
		pattern2[2319]=3940;
		pattern2[2320]=3948;
		pattern2[2321]=3940;
		pattern2[2322]=3914;
		pattern2[2323]=3873;
		pattern2[2324]=3815;
		pattern2[2325]=3741;
		pattern2[2326]=3653;
		pattern2[2327]=3551;
		pattern2[2328]=3435;
		pattern2[2329]=3308;
		pattern2[2330]=3170;
		pattern2[2331]=3023;
		pattern2[2332]=2868;
		pattern2[2333]=2706;
		pattern2[2334]=2539;
		pattern2[2335]=2370;
		pattern2[2336]=2198;
		pattern2[2337]=2026;
		pattern2[2338]=1857;
		pattern2[2339]=1690;
		pattern2[2340]=1528;
		pattern2[2341]=1373;
		pattern2[2342]=1226;
		pattern2[2343]=1088;
		pattern2[2344]=961;
		pattern2[2345]=845;
		pattern2[2346]=743;
		pattern2[2347]=655;
		pattern2[2348]=581;
		pattern2[2349]=523;
		pattern2[2350]=482;
		pattern2[2351]=456;
		pattern2[2352]=448;
		pattern2[2353]=456;
		pattern2[2354]=482;
		pattern2[2355]=523;
		pattern2[2356]=581;
		pattern2[2357]=655;
		pattern2[2358]=743;
		pattern2[2359]=845;
		pattern2[2360]=961;
		pattern2[2361]=1088;
		pattern2[2362]=1226;
		pattern2[2363]=1373;
		pattern2[2364]=1528;
		pattern2[2365]=1690;
		pattern2[2366]=1857;
		pattern2[2367]=2026;
		pattern2[2368]=2198;
		pattern2[2369]=2370;
		pattern2[2370]=2539;
		pattern2[2371]=2706;
		pattern2[2372]=2868;
		pattern2[2373]=3023;
		pattern2[2374]=3170;
		pattern2[2375]=3308;
		pattern2[2376]=3435;
		pattern2[2377]=3551;
		pattern2[2378]=3653;
		pattern2[2379]=3741;
		pattern2[2380]=3815;
		pattern2[2381]=3873;
		pattern2[2382]=3914;
		pattern2[2383]=3940;
		pattern2[2384]=3948;
		pattern2[2385]=3940;
		pattern2[2386]=3914;
		pattern2[2387]=3873;
		pattern2[2388]=3815;
		pattern2[2389]=3741;
		pattern2[2390]=3653;
		pattern2[2391]=3551;
		pattern2[2392]=3435;
		pattern2[2393]=3308;
		pattern2[2394]=3170;
		pattern2[2395]=3023;
		pattern2[2396]=2868;
		pattern2[2397]=2706;
		pattern2[2398]=2539;
		pattern2[2399]=2370;
		pattern2[2400]=2198;
		pattern2[2401]=2026;
		pattern2[2402]=1857;
		pattern2[2403]=1690;
		pattern2[2404]=1528;
		pattern2[2405]=1373;
		pattern2[2406]=1226;
		pattern2[2407]=1088;
		pattern2[2408]=961;
		pattern2[2409]=845;
		pattern2[2410]=743;
		pattern2[2411]=655;
		pattern2[2412]=581;
		pattern2[2413]=523;
		pattern2[2414]=482;
		pattern2[2415]=456;
		pattern2[2416]=448;
		pattern2[2417]=456;
		pattern2[2418]=482;
		pattern2[2419]=523;
		pattern2[2420]=581;
		pattern2[2421]=655;
		pattern2[2422]=743;
		pattern2[2423]=845;
		pattern2[2424]=961;
		pattern2[2425]=1088;
		pattern2[2426]=1226;
		pattern2[2427]=1373;
		pattern2[2428]=1528;
		pattern2[2429]=1690;
		pattern2[2430]=1857;
		pattern2[2431]=2026;
		pattern2[2432]=2198;
		pattern2[2433]=2370;
		pattern2[2434]=2539;
		pattern2[2435]=2706;
		pattern2[2436]=2868;
		pattern2[2437]=3023;
		pattern2[2438]=3170;
		pattern2[2439]=3308;
		pattern2[2440]=3435;
		pattern2[2441]=3551;
		pattern2[2442]=3653;
		pattern2[2443]=3741;
		pattern2[2444]=3815;
		pattern2[2445]=3873;
		pattern2[2446]=3914;
		pattern2[2447]=3940;
		pattern2[2448]=3948;
		pattern2[2449]=3940;
		pattern2[2450]=3914;
		pattern2[2451]=3873;
		pattern2[2452]=3815;
		pattern2[2453]=3741;
		pattern2[2454]=3653;
		pattern2[2455]=3551;
		pattern2[2456]=3435;
		pattern2[2457]=3308;
		pattern2[2458]=3170;
		pattern2[2459]=3023;
		pattern2[2460]=2868;
		pattern2[2461]=2706;
		pattern2[2462]=2539;
		pattern2[2463]=2370;
		pattern2[2464]=2198;
		pattern2[2465]=2026;
		pattern2[2466]=1857;
		pattern2[2467]=1690;
		pattern2[2468]=1528;
		pattern2[2469]=1373;
		pattern2[2470]=1226;
		pattern2[2471]=1088;
		pattern2[2472]=961;
		pattern2[2473]=845;
		pattern2[2474]=743;
		pattern2[2475]=655;
		pattern2[2476]=581;
		pattern2[2477]=523;
		pattern2[2478]=482;
		pattern2[2479]=456;
		pattern2[2480]=448;
		pattern2[2481]=456;
		pattern2[2482]=482;
		pattern2[2483]=523;
		pattern2[2484]=581;
		pattern2[2485]=655;
		pattern2[2486]=743;
		pattern2[2487]=845;
		pattern2[2488]=961;
		pattern2[2489]=1088;
		pattern2[2490]=1226;
		pattern2[2491]=1373;
		pattern2[2492]=1528;
		pattern2[2493]=1690;
		pattern2[2494]=1857;
		pattern2[2495]=2026;
		pattern2[2496]=2198;
		pattern2[2497]=2370;
		pattern2[2498]=2539;
		pattern2[2499]=2706;
		pattern2[2500]=2868;
		pattern2[2501]=3023;
		pattern2[2502]=3170;
		pattern2[2503]=3308;
		pattern2[2504]=3435;
		pattern2[2505]=3551;
		pattern2[2506]=3653;
		pattern2[2507]=3741;
		pattern2[2508]=3815;
		pattern2[2509]=3873;
		pattern2[2510]=3914;
		pattern2[2511]=3940;
		pattern2[2512]=3948;
		pattern2[2513]=3940;
		pattern2[2514]=3914;
		pattern2[2515]=3873;
		pattern2[2516]=3815;
		pattern2[2517]=3741;
		pattern2[2518]=3653;
		pattern2[2519]=3551;
		pattern2[2520]=3435;
		pattern2[2521]=3308;
		pattern2[2522]=3170;
		pattern2[2523]=3023;
		pattern2[2524]=2868;
		pattern2[2525]=2706;
		pattern2[2526]=2539;
		pattern2[2527]=2370;
		pattern2[2528]=2198;
		pattern2[2529]=2026;
		pattern2[2530]=1857;
		pattern2[2531]=1690;
		pattern2[2532]=1528;
		pattern2[2533]=1373;
		pattern2[2534]=1226;
		pattern2[2535]=1088;
		pattern2[2536]=961;
		pattern2[2537]=845;
		pattern2[2538]=743;
		pattern2[2539]=655;
		pattern2[2540]=581;
		pattern2[2541]=523;
		pattern2[2542]=482;
		pattern2[2543]=456;
		pattern2[2544]=448;
		pattern2[2545]=456;
		pattern2[2546]=482;
		pattern2[2547]=523;
		pattern2[2548]=581;
		pattern2[2549]=655;
		pattern2[2550]=743;
		pattern2[2551]=845;
		pattern2[2552]=961;
		pattern2[2553]=1088;
		pattern2[2554]=1226;
		pattern2[2555]=1373;
		pattern2[2556]=1528;
		pattern2[2557]=1690;
		pattern2[2558]=1857;
		pattern2[2559]=2026;
		pattern2[2560]=2198;
		pattern2[2561]=2370;
		pattern2[2562]=2539;
		pattern2[2563]=2706;
		pattern2[2564]=2868;
		pattern2[2565]=3023;
		pattern2[2566]=3170;
		pattern2[2567]=3308;
		pattern2[2568]=3435;
		pattern2[2569]=3551;
		pattern2[2570]=3653;
		pattern2[2571]=3741;
		pattern2[2572]=3815;
		pattern2[2573]=3873;
		pattern2[2574]=3914;
		pattern2[2575]=3940;
		pattern2[2576]=3948;
		pattern2[2577]=3940;
		pattern2[2578]=3914;
		pattern2[2579]=3873;
		pattern2[2580]=3815;
		pattern2[2581]=3741;
		pattern2[2582]=3653;
		pattern2[2583]=3551;
		pattern2[2584]=3435;
		pattern2[2585]=3308;
		pattern2[2586]=3170;
		pattern2[2587]=3023;
		pattern2[2588]=2868;
		pattern2[2589]=2706;
		pattern2[2590]=2539;
		pattern2[2591]=2370;
		pattern2[2592]=2198;
		pattern2[2593]=2026;
		pattern2[2594]=1857;
		pattern2[2595]=1690;
		pattern2[2596]=1528;
		pattern2[2597]=1373;
		pattern2[2598]=1226;
		pattern2[2599]=1088;
		pattern2[2600]=961;
		pattern2[2601]=845;
		pattern2[2602]=743;
		pattern2[2603]=655;
		pattern2[2604]=581;
		pattern2[2605]=523;
		pattern2[2606]=482;
		pattern2[2607]=456;
		pattern2[2608]=448;
		pattern2[2609]=456;
		pattern2[2610]=482;
		pattern2[2611]=523;
		pattern2[2612]=581;
		pattern2[2613]=655;
		pattern2[2614]=743;
		pattern2[2615]=845;
		pattern2[2616]=961;
		pattern2[2617]=1088;
		pattern2[2618]=1226;
		pattern2[2619]=1373;
		pattern2[2620]=1528;
		pattern2[2621]=1690;
		pattern2[2622]=1857;
		pattern2[2623]=2026;
		pattern2[2624]=2198;
		pattern2[2625]=2370;
		pattern2[2626]=2539;
		pattern2[2627]=2706;
		pattern2[2628]=2868;
		pattern2[2629]=3023;
		pattern2[2630]=3170;
		pattern2[2631]=3308;
		pattern2[2632]=3435;
		pattern2[2633]=3551;
		pattern2[2634]=3653;
		pattern2[2635]=3741;
		pattern2[2636]=3815;
		pattern2[2637]=3873;
		pattern2[2638]=3914;
		pattern2[2639]=3940;
		pattern2[2640]=3948;
		pattern2[2641]=3940;
		pattern2[2642]=3914;
		pattern2[2643]=3873;
		pattern2[2644]=3815;
		pattern2[2645]=3741;
		pattern2[2646]=3653;
		pattern2[2647]=3551;
		pattern2[2648]=3435;
		pattern2[2649]=3308;
		pattern2[2650]=3170;
		pattern2[2651]=3023;
		pattern2[2652]=2868;
		pattern2[2653]=2706;
		pattern2[2654]=2539;
		pattern2[2655]=2370;
		pattern2[2656]=2198;
		pattern2[2657]=2026;
		pattern2[2658]=1857;
		pattern2[2659]=1690;
		pattern2[2660]=1528;
		pattern2[2661]=1373;
		pattern2[2662]=1226;
		pattern2[2663]=1088;
		pattern2[2664]=961;
		pattern2[2665]=845;
		pattern2[2666]=743;
		pattern2[2667]=655;
		pattern2[2668]=581;
		pattern2[2669]=523;
		pattern2[2670]=482;
		pattern2[2671]=456;
		pattern2[2672]=448;
		pattern2[2673]=456;
		pattern2[2674]=482;
		pattern2[2675]=523;
		pattern2[2676]=581;
		pattern2[2677]=655;
		pattern2[2678]=743;
		pattern2[2679]=845;
		pattern2[2680]=961;
		pattern2[2681]=1088;
		pattern2[2682]=1226;
		pattern2[2683]=1373;
		pattern2[2684]=1528;
		pattern2[2685]=1690;
		pattern2[2686]=1857;
		pattern2[2687]=2026;
		pattern2[2688]=2198;
		pattern2[2689]=2370;
		pattern2[2690]=2539;
		pattern2[2691]=2706;
		pattern2[2692]=2868;
		pattern2[2693]=3023;
		pattern2[2694]=3170;
		pattern2[2695]=3308;
		pattern2[2696]=3435;
		pattern2[2697]=3551;
		pattern2[2698]=3653;
		pattern2[2699]=3741;
		pattern2[2700]=3815;
		pattern2[2701]=3873;
		pattern2[2702]=3914;
		pattern2[2703]=3940;
		pattern2[2704]=3948;
		pattern2[2705]=3940;
		pattern2[2706]=3914;
		pattern2[2707]=3873;
		pattern2[2708]=3815;
		pattern2[2709]=3741;
		pattern2[2710]=3653;
		pattern2[2711]=3551;
		pattern2[2712]=3435;
		pattern2[2713]=3308;
		pattern2[2714]=3170;
		pattern2[2715]=3023;
		pattern2[2716]=2868;
		pattern2[2717]=2706;
		pattern2[2718]=2539;
		pattern2[2719]=2370;
		pattern2[2720]=2198;
		pattern2[2721]=2026;
		pattern2[2722]=1857;
		pattern2[2723]=1690;
		pattern2[2724]=1528;
		pattern2[2725]=1373;
		pattern2[2726]=1226;
		pattern2[2727]=1088;
		pattern2[2728]=961;
		pattern2[2729]=845;
		pattern2[2730]=743;
		pattern2[2731]=655;
		pattern2[2732]=581;
		pattern2[2733]=523;
		pattern2[2734]=482;
		pattern2[2735]=456;
		pattern2[2736]=448;
		pattern2[2737]=456;
		pattern2[2738]=482;
		pattern2[2739]=523;
		pattern2[2740]=581;
		pattern2[2741]=655;
		pattern2[2742]=743;
		pattern2[2743]=845;
		pattern2[2744]=961;
		pattern2[2745]=1088;
		pattern2[2746]=1226;
		pattern2[2747]=1373;
		pattern2[2748]=1528;
		pattern2[2749]=1690;
		pattern2[2750]=1857;
		pattern2[2751]=2026;
		pattern2[2752]=2198;
		pattern2[2753]=2370;
		pattern2[2754]=2539;
		pattern2[2755]=2706;
		pattern2[2756]=2868;
		pattern2[2757]=3023;
		pattern2[2758]=3170;
		pattern2[2759]=3308;
		pattern2[2760]=3435;
		pattern2[2761]=3551;
		pattern2[2762]=3653;
		pattern2[2763]=3741;
		pattern2[2764]=3815;
		pattern2[2765]=3873;
		pattern2[2766]=3914;
		pattern2[2767]=3940;
		pattern2[2768]=3948;
		pattern2[2769]=3940;
		pattern2[2770]=3914;
		pattern2[2771]=3873;
		pattern2[2772]=3815;
		pattern2[2773]=3741;
		pattern2[2774]=3653;
		pattern2[2775]=3551;
		pattern2[2776]=3435;
		pattern2[2777]=3308;
		pattern2[2778]=3170;
		pattern2[2779]=3023;
		pattern2[2780]=2868;
		pattern2[2781]=2706;
		pattern2[2782]=2539;
		pattern2[2783]=2370;
		pattern2[2784]=2198;
		pattern2[2785]=2026;
		pattern2[2786]=1857;
		pattern2[2787]=1690;
		pattern2[2788]=1528;
		pattern2[2789]=1373;
		pattern2[2790]=1226;
		pattern2[2791]=1088;
		pattern2[2792]=961;
		pattern2[2793]=845;
		pattern2[2794]=743;
		pattern2[2795]=655;
		pattern2[2796]=581;
		pattern2[2797]=523;
		pattern2[2798]=482;
		pattern2[2799]=456;
		pattern2[2800]=448;
		pattern2[2801]=456;
		pattern2[2802]=482;
		pattern2[2803]=523;
		pattern2[2804]=581;
		pattern2[2805]=655;
		pattern2[2806]=743;
		pattern2[2807]=845;
		pattern2[2808]=961;
		pattern2[2809]=1088;
		pattern2[2810]=1226;
		pattern2[2811]=1373;
		pattern2[2812]=1528;
		pattern2[2813]=1690;
		pattern2[2814]=1857;
		pattern2[2815]=2026;
		pattern2[2816]=2198;
		pattern2[2817]=2370;
		pattern2[2818]=2539;
		pattern2[2819]=2706;
		pattern2[2820]=2868;
		pattern2[2821]=3023;
		pattern2[2822]=3170;
		pattern2[2823]=3308;
		pattern2[2824]=3435;
		pattern2[2825]=3551;
		pattern2[2826]=3653;
		pattern2[2827]=3741;
		pattern2[2828]=3815;
		pattern2[2829]=3873;
		pattern2[2830]=3914;
		pattern2[2831]=3940;
		pattern2[2832]=3948;
		pattern2[2833]=3940;
		pattern2[2834]=3914;
		pattern2[2835]=3873;
		pattern2[2836]=3815;
		pattern2[2837]=3741;
		pattern2[2838]=3653;
		pattern2[2839]=3551;
		pattern2[2840]=3435;
		pattern2[2841]=3308;
		pattern2[2842]=3170;
		pattern2[2843]=3023;
		pattern2[2844]=2868;
		pattern2[2845]=2706;
		pattern2[2846]=2539;
		pattern2[2847]=2370;
		pattern2[2848]=2198;
		pattern2[2849]=2026;
		pattern2[2850]=1857;
		pattern2[2851]=1690;
		pattern2[2852]=1528;
		pattern2[2853]=1373;
		pattern2[2854]=1226;
		pattern2[2855]=1088;
		pattern2[2856]=961;
		pattern2[2857]=845;
		pattern2[2858]=743;
		pattern2[2859]=655;
		pattern2[2860]=581;
		pattern2[2861]=523;
		pattern2[2862]=482;
		pattern2[2863]=456;
		pattern2[2864]=448;
		pattern2[2865]=456;
		pattern2[2866]=482;
		pattern2[2867]=523;
		pattern2[2868]=581;
		pattern2[2869]=655;
		pattern2[2870]=743;
		pattern2[2871]=845;
		pattern2[2872]=961;
		pattern2[2873]=1088;
		pattern2[2874]=1226;
		pattern2[2875]=1373;
		pattern2[2876]=1528;
		pattern2[2877]=1690;
		pattern2[2878]=1857;
		pattern2[2879]=2026;
		pattern2[2880]=2198;
		pattern2[2881]=2370;
		pattern2[2882]=2539;
		pattern2[2883]=2706;
		pattern2[2884]=2868;
		pattern2[2885]=3023;
		pattern2[2886]=3170;
		pattern2[2887]=3308;
		pattern2[2888]=3435;
		pattern2[2889]=3551;
		pattern2[2890]=3653;
		pattern2[2891]=3741;
		pattern2[2892]=3815;
		pattern2[2893]=3873;
		pattern2[2894]=3914;
		pattern2[2895]=3940;
		pattern2[2896]=3948;
		pattern2[2897]=3940;
		pattern2[2898]=3914;
		pattern2[2899]=3873;
		pattern2[2900]=3815;
		pattern2[2901]=3741;
		pattern2[2902]=3653;
		pattern2[2903]=3551;
		pattern2[2904]=3435;
		pattern2[2905]=3308;
		pattern2[2906]=3170;
		pattern2[2907]=3023;
		pattern2[2908]=2868;
		pattern2[2909]=2706;
		pattern2[2910]=2539;
		pattern2[2911]=2370;
		pattern2[2912]=2198;
		pattern2[2913]=2026;
		pattern2[2914]=1857;
		pattern2[2915]=1690;
		pattern2[2916]=1528;
		pattern2[2917]=1373;
		pattern2[2918]=1226;
		pattern2[2919]=1088;
		pattern2[2920]=961;
		pattern2[2921]=845;
		pattern2[2922]=743;
		pattern2[2923]=655;
		pattern2[2924]=581;
		pattern2[2925]=523;
		pattern2[2926]=482;
		pattern2[2927]=456;
		pattern2[2928]=448;
		pattern2[2929]=456;
		pattern2[2930]=482;
		pattern2[2931]=523;
		pattern2[2932]=581;
		pattern2[2933]=655;
		pattern2[2934]=743;
		pattern2[2935]=845;
		pattern2[2936]=961;
		pattern2[2937]=1088;
		pattern2[2938]=1226;
		pattern2[2939]=1373;
		pattern2[2940]=1528;
		pattern2[2941]=1690;
		pattern2[2942]=1857;
		pattern2[2943]=2026;
		pattern2[2944]=2198;
		pattern2[2945]=2370;
		pattern2[2946]=2539;
		pattern2[2947]=2706;
		pattern2[2948]=2868;
		pattern2[2949]=3023;
		pattern2[2950]=3170;
		pattern2[2951]=3308;
		pattern2[2952]=3435;
		pattern2[2953]=3551;
		pattern2[2954]=3653;
		pattern2[2955]=3741;
		pattern2[2956]=3815;
		pattern2[2957]=3873;
		pattern2[2958]=3914;
		pattern2[2959]=3940;
		pattern2[2960]=3948;
		pattern2[2961]=3940;
		pattern2[2962]=3914;
		pattern2[2963]=3873;
		pattern2[2964]=3815;
		pattern2[2965]=3741;
		pattern2[2966]=3653;
		pattern2[2967]=3551;
		pattern2[2968]=3435;
		pattern2[2969]=3308;
		pattern2[2970]=3170;
		pattern2[2971]=3023;
		pattern2[2972]=2868;
		pattern2[2973]=2706;
		pattern2[2974]=2539;
		pattern2[2975]=2370;
		pattern2[2976]=2198;
		pattern2[2977]=2026;
		pattern2[2978]=1857;
		pattern2[2979]=1690;
		pattern2[2980]=1528;
		pattern2[2981]=1373;
		pattern2[2982]=1226;
		pattern2[2983]=1088;
		pattern2[2984]=961;
		pattern2[2985]=845;
		pattern2[2986]=743;
		pattern2[2987]=655;
		pattern2[2988]=581;
		pattern2[2989]=523;
		pattern2[2990]=482;
		pattern2[2991]=456;
		pattern2[2992]=448;
		pattern2[2993]=456;
		pattern2[2994]=482;
		pattern2[2995]=523;
		pattern2[2996]=581;
		pattern2[2997]=655;
		pattern2[2998]=743;
		pattern2[2999]=845;
		pattern2[3000]=961;
		pattern2[3001]=1088;
		pattern2[3002]=1226;
		pattern2[3003]=1373;
		pattern2[3004]=1528;
		pattern2[3005]=1690;
		pattern2[3006]=1857;
		pattern2[3007]=2026;
		pattern2[3008]=2198;
		pattern2[3009]=2370;
		pattern2[3010]=2539;
		pattern2[3011]=2706;
		pattern2[3012]=2868;
		pattern2[3013]=3023;
		pattern2[3014]=3170;
		pattern2[3015]=3308;
		pattern2[3016]=3435;
		pattern2[3017]=3551;
		pattern2[3018]=3653;
		pattern2[3019]=3741;
		pattern2[3020]=3815;
		pattern2[3021]=3873;
		pattern2[3022]=3914;
		pattern2[3023]=3940;
		pattern2[3024]=3948;
		pattern2[3025]=3940;
		pattern2[3026]=3914;
		pattern2[3027]=3873;
		pattern2[3028]=3815;
		pattern2[3029]=3741;
		pattern2[3030]=3653;
		pattern2[3031]=3551;
		pattern2[3032]=3435;
		pattern2[3033]=3308;
		pattern2[3034]=3170;
		pattern2[3035]=3023;
		pattern2[3036]=2868;
		pattern2[3037]=2706;
		pattern2[3038]=2539;
		pattern2[3039]=2370;
		pattern2[3040]=2198;
		pattern2[3041]=2026;
		pattern2[3042]=1857;
		pattern2[3043]=1690;
		pattern2[3044]=1528;
		pattern2[3045]=1373;
		pattern2[3046]=1226;
		pattern2[3047]=1088;
		pattern2[3048]=961;
		pattern2[3049]=845;
		pattern2[3050]=743;
		pattern2[3051]=655;
		pattern2[3052]=581;
		pattern2[3053]=523;
		pattern2[3054]=482;
		pattern2[3055]=456;
		pattern2[3056]=448;
		pattern2[3057]=456;
		pattern2[3058]=482;
		pattern2[3059]=523;
		pattern2[3060]=581;
		pattern2[3061]=655;
		pattern2[3062]=743;
		pattern2[3063]=845;
		pattern2[3064]=961;
		pattern2[3065]=1088;
		pattern2[3066]=1226;
		pattern2[3067]=1373;
		pattern2[3068]=1528;
		pattern2[3069]=1690;
		pattern2[3070]=1857;
		pattern2[3071]=2026;
		pattern2[3072]=2198;
		pattern2[3073]=2370;
		pattern2[3074]=2539;
		pattern2[3075]=2706;
		pattern2[3076]=2868;
		pattern2[3077]=3023;
		pattern2[3078]=3170;
		pattern2[3079]=3308;
		pattern2[3080]=3435;
		pattern2[3081]=3551;
		pattern2[3082]=3653;
		pattern2[3083]=3741;
		pattern2[3084]=3815;
		pattern2[3085]=3873;
		pattern2[3086]=3914;
		pattern2[3087]=3940;
		pattern2[3088]=3948;
		pattern2[3089]=3940;
		pattern2[3090]=3914;
		pattern2[3091]=3873;
		pattern2[3092]=3815;
		pattern2[3093]=3741;
		pattern2[3094]=3653;
		pattern2[3095]=3551;
		pattern2[3096]=3435;
		pattern2[3097]=3308;
		pattern2[3098]=3170;
		pattern2[3099]=3023;
		pattern2[3100]=2868;
		pattern2[3101]=2706;
		pattern2[3102]=2539;
		pattern2[3103]=2370;
		pattern2[3104]=2198;
		pattern2[3105]=2026;
		pattern2[3106]=1857;
		pattern2[3107]=1690;
		pattern2[3108]=1528;
		pattern2[3109]=1373;
		pattern2[3110]=1226;
		pattern2[3111]=1088;
		pattern2[3112]=961;
		pattern2[3113]=845;
		pattern2[3114]=743;
		pattern2[3115]=655;
		pattern2[3116]=581;
		pattern2[3117]=523;
		pattern2[3118]=482;
		pattern2[3119]=456;
		pattern2[3120]=448;
		pattern2[3121]=456;
		pattern2[3122]=482;
		pattern2[3123]=523;
		pattern2[3124]=581;
		pattern2[3125]=655;
		pattern2[3126]=743;
		pattern2[3127]=845;
		pattern2[3128]=961;
		pattern2[3129]=1088;
		pattern2[3130]=1226;
		pattern2[3131]=1373;
		pattern2[3132]=1528;
		pattern2[3133]=1690;
		pattern2[3134]=1857;
		pattern2[3135]=2026;
		pattern2[3136]=2198;
		pattern2[3137]=2370;
		pattern2[3138]=2539;
		pattern2[3139]=2706;
		pattern2[3140]=2868;
		pattern2[3141]=3023;
		pattern2[3142]=3170;
		pattern2[3143]=3308;
		pattern2[3144]=3435;
		pattern2[3145]=3551;
		pattern2[3146]=3653;
		pattern2[3147]=3741;
		pattern2[3148]=3815;
		pattern2[3149]=3873;
		pattern2[3150]=3914;
		pattern2[3151]=3940;
		pattern2[3152]=3948;
		pattern2[3153]=3940;
		pattern2[3154]=3914;
		pattern2[3155]=3873;
		pattern2[3156]=3815;
		pattern2[3157]=3741;
		pattern2[3158]=3653;
		pattern2[3159]=3551;
		pattern2[3160]=3435;
		pattern2[3161]=3308;
		pattern2[3162]=3170;
		pattern2[3163]=3023;
		pattern2[3164]=2868;
		pattern2[3165]=2706;
		pattern2[3166]=2539;
		pattern2[3167]=2370;
		pattern2[3168]=2198;
		pattern2[3169]=2026;
		pattern2[3170]=1857;
		pattern2[3171]=1690;
		pattern2[3172]=1528;
		pattern2[3173]=1373;
		pattern2[3174]=1226;
		pattern2[3175]=1088;
		pattern2[3176]=961;
		pattern2[3177]=845;
		pattern2[3178]=743;
		pattern2[3179]=655;
		pattern2[3180]=581;
		pattern2[3181]=523;
		pattern2[3182]=482;
		pattern2[3183]=456;
		pattern2[3184]=448;
		pattern2[3185]=456;
		pattern2[3186]=482;
		pattern2[3187]=523;
		pattern2[3188]=581;
		pattern2[3189]=655;
		pattern2[3190]=743;
		pattern2[3191]=845;
		pattern2[3192]=961;
		pattern2[3193]=1088;
		pattern2[3194]=1226;
		pattern2[3195]=1373;
		pattern2[3196]=1528;
		pattern2[3197]=1690;
		pattern2[3198]=1857;
		pattern2[3199]=2026;
		pattern2[3200]=2198;
		pattern2[3201]=2370;
		pattern2[3202]=2539;
		pattern2[3203]=2706;
		pattern2[3204]=2868;
		pattern2[3205]=3023;
		pattern2[3206]=3170;
		pattern2[3207]=3308;
		pattern2[3208]=3435;
		pattern2[3209]=3551;
		pattern2[3210]=3653;
		pattern2[3211]=3741;
		pattern2[3212]=3815;
		pattern2[3213]=3873;
		pattern2[3214]=3914;
		pattern2[3215]=3940;
		pattern2[3216]=3948;
		pattern2[3217]=3940;
		pattern2[3218]=3914;
		pattern2[3219]=3873;
		pattern2[3220]=3815;
		pattern2[3221]=3741;
		pattern2[3222]=3653;
		pattern2[3223]=3551;
		pattern2[3224]=3435;
		pattern2[3225]=3308;
		pattern2[3226]=3170;
		pattern2[3227]=3023;
		pattern2[3228]=2868;
		pattern2[3229]=2706;
		pattern2[3230]=2539;
		pattern2[3231]=2370;
		pattern2[3232]=2198;
		pattern2[3233]=2026;
		pattern2[3234]=1857;
		pattern2[3235]=1690;
		pattern2[3236]=1528;
		pattern2[3237]=1373;
		pattern2[3238]=1226;
		pattern2[3239]=1088;
		pattern2[3240]=961;
		pattern2[3241]=845;
		pattern2[3242]=743;
		pattern2[3243]=655;
		pattern2[3244]=581;
		pattern2[3245]=523;
		pattern2[3246]=482;
		pattern2[3247]=456;
		pattern2[3248]=448;
		pattern2[3249]=456;
		pattern2[3250]=482;
		pattern2[3251]=523;
		pattern2[3252]=581;
		pattern2[3253]=655;
		pattern2[3254]=743;
		pattern2[3255]=845;
		pattern2[3256]=961;
		pattern2[3257]=1088;
		pattern2[3258]=1226;
		pattern2[3259]=1373;
		pattern2[3260]=1528;
		pattern2[3261]=1690;
		pattern2[3262]=1857;
		pattern2[3263]=2026;
		pattern2[3264]=2198;
		pattern2[3265]=2370;
		pattern2[3266]=2539;
		pattern2[3267]=2706;
		pattern2[3268]=2868;
		pattern2[3269]=3023;
		pattern2[3270]=3170;
		pattern2[3271]=3308;
		pattern2[3272]=3435;
		pattern2[3273]=3551;
		pattern2[3274]=3653;
		pattern2[3275]=3741;
		pattern2[3276]=3815;
		pattern2[3277]=3873;
		pattern2[3278]=3914;
		pattern2[3279]=3940;
		pattern2[3280]=3948;
		pattern2[3281]=3940;
		pattern2[3282]=3914;
		pattern2[3283]=3873;
		pattern2[3284]=3815;
		pattern2[3285]=3741;
		pattern2[3286]=3653;
		pattern2[3287]=3551;
		pattern2[3288]=3435;
		pattern2[3289]=3308;
		pattern2[3290]=3170;
		pattern2[3291]=3023;
		pattern2[3292]=2868;
		pattern2[3293]=2706;
		pattern2[3294]=2539;
		pattern2[3295]=2370;
		pattern2[3296]=2198;
		pattern2[3297]=2026;
		pattern2[3298]=1857;
		pattern2[3299]=1690;
		pattern2[3300]=1528;
		pattern2[3301]=1373;
		pattern2[3302]=1226;
		pattern2[3303]=1088;
		pattern2[3304]=961;
		pattern2[3305]=845;
		pattern2[3306]=743;
		pattern2[3307]=655;
		pattern2[3308]=581;
		pattern2[3309]=523;
		pattern2[3310]=482;
		pattern2[3311]=456;
		pattern2[3312]=448;
		pattern2[3313]=456;
		pattern2[3314]=482;
		pattern2[3315]=523;
		pattern2[3316]=581;
		pattern2[3317]=655;
		pattern2[3318]=743;
		pattern2[3319]=845;
		pattern2[3320]=961;
		pattern2[3321]=1088;
		pattern2[3322]=1226;
		pattern2[3323]=1373;
		pattern2[3324]=1528;
		pattern2[3325]=1690;
		pattern2[3326]=1857;
		pattern2[3327]=2026;
		pattern2[3328]=2198;
		pattern2[3329]=2370;
		pattern2[3330]=2539;
		pattern2[3331]=2706;
		pattern2[3332]=2868;
		pattern2[3333]=3023;
		pattern2[3334]=3170;
		pattern2[3335]=3308;
		pattern2[3336]=3435;
		pattern2[3337]=3551;
		pattern2[3338]=3653;
		pattern2[3339]=3741;
		pattern2[3340]=3815;
		pattern2[3341]=3873;
		pattern2[3342]=3914;
		pattern2[3343]=3940;
		pattern2[3344]=3948;
		pattern2[3345]=3940;
		pattern2[3346]=3914;
		pattern2[3347]=3873;
		pattern2[3348]=3815;
		pattern2[3349]=3741;
		pattern2[3350]=3653;
		pattern2[3351]=3551;
		pattern2[3352]=3435;
		pattern2[3353]=3308;
		pattern2[3354]=3170;
		pattern2[3355]=3023;
		pattern2[3356]=2868;
		pattern2[3357]=2706;
		pattern2[3358]=2539;
		pattern2[3359]=2370;
		pattern2[3360]=2198;
		pattern2[3361]=2026;
		pattern2[3362]=1857;
		pattern2[3363]=1690;
		pattern2[3364]=1528;
		pattern2[3365]=1373;
		pattern2[3366]=1226;
		pattern2[3367]=1088;
		pattern2[3368]=961;
		pattern2[3369]=845;
		pattern2[3370]=743;
		pattern2[3371]=655;
		pattern2[3372]=581;
		pattern2[3373]=523;
		pattern2[3374]=482;
		pattern2[3375]=456;
		pattern2[3376]=448;
		pattern2[3377]=456;
		pattern2[3378]=482;
		pattern2[3379]=523;
		pattern2[3380]=581;
		pattern2[3381]=655;
		pattern2[3382]=743;
		pattern2[3383]=845;
		pattern2[3384]=961;
		pattern2[3385]=1088;
		pattern2[3386]=1226;
		pattern2[3387]=1373;
		pattern2[3388]=1528;
		pattern2[3389]=1690;
		pattern2[3390]=1857;
		pattern2[3391]=2026;
		pattern2[3392]=2198;
		pattern2[3393]=2370;
		pattern2[3394]=2539;
		pattern2[3395]=2706;
		pattern2[3396]=2868;
		pattern2[3397]=3023;
		pattern2[3398]=3170;
		pattern2[3399]=3308;
		pattern2[3400]=3435;
		pattern2[3401]=3551;
		pattern2[3402]=3653;
		pattern2[3403]=3741;
		pattern2[3404]=3815;
		pattern2[3405]=3873;
		pattern2[3406]=3914;
		pattern2[3407]=3940;
		pattern2[3408]=3948;
		pattern2[3409]=3940;
		pattern2[3410]=3914;
		pattern2[3411]=3873;
		pattern2[3412]=3815;
		pattern2[3413]=3741;
		pattern2[3414]=3653;
		pattern2[3415]=3551;
		pattern2[3416]=3435;
		pattern2[3417]=3308;
		pattern2[3418]=3170;
		pattern2[3419]=3023;
		pattern2[3420]=2868;
		pattern2[3421]=2706;
		pattern2[3422]=2539;
		pattern2[3423]=2370;
		pattern2[3424]=2198;
		pattern2[3425]=2026;
		pattern2[3426]=1857;
		pattern2[3427]=1690;
		pattern2[3428]=1528;
		pattern2[3429]=1373;
		pattern2[3430]=1226;
		pattern2[3431]=1088;
		pattern2[3432]=961;
		pattern2[3433]=845;
		pattern2[3434]=743;
		pattern2[3435]=655;
		pattern2[3436]=581;
		pattern2[3437]=523;
		pattern2[3438]=482;
		pattern2[3439]=456;
		pattern2[3440]=448;
		pattern2[3441]=456;
		pattern2[3442]=482;
		pattern2[3443]=523;
		pattern2[3444]=581;
		pattern2[3445]=655;
		pattern2[3446]=743;
		pattern2[3447]=845;
		pattern2[3448]=961;
		pattern2[3449]=1088;
		pattern2[3450]=1226;
		pattern2[3451]=1373;
		pattern2[3452]=1528;
		pattern2[3453]=1690;
		pattern2[3454]=1857;
		pattern2[3455]=2026;
		pattern2[3456]=2198;
		pattern2[3457]=2370;
		pattern2[3458]=2539;
		pattern2[3459]=2706;
		pattern2[3460]=2868;
		pattern2[3461]=3023;
		pattern2[3462]=3170;
		pattern2[3463]=3308;
		pattern2[3464]=3435;
		pattern2[3465]=3551;
		pattern2[3466]=3653;
		pattern2[3467]=3741;
		pattern2[3468]=3815;
		pattern2[3469]=3873;
		pattern2[3470]=3914;
		pattern2[3471]=3940;
		pattern2[3472]=3948;
		pattern2[3473]=3940;
		pattern2[3474]=3914;
		pattern2[3475]=3873;
		pattern2[3476]=3815;
		pattern2[3477]=3741;
		pattern2[3478]=3653;
		pattern2[3479]=3551;
		pattern2[3480]=3435;
		pattern2[3481]=3308;
		pattern2[3482]=3170;
		pattern2[3483]=3023;
		pattern2[3484]=2868;
		pattern2[3485]=2706;
		pattern2[3486]=2539;
		pattern2[3487]=2370;
		pattern2[3488]=2198;
		pattern2[3489]=2026;
		pattern2[3490]=1857;
		pattern2[3491]=1690;
		pattern2[3492]=1528;
		pattern2[3493]=1373;
		pattern2[3494]=1226;
		pattern2[3495]=1088;
		pattern2[3496]=961;
		pattern2[3497]=845;
		pattern2[3498]=743;
		pattern2[3499]=655;
		pattern2[3500]=581;
		pattern2[3501]=523;
		pattern2[3502]=482;
		pattern2[3503]=456;
		pattern2[3504]=448;
		pattern2[3505]=456;
		pattern2[3506]=482;
		pattern2[3507]=523;
		pattern2[3508]=581;
		pattern2[3509]=655;
		pattern2[3510]=743;
		pattern2[3511]=845;
		pattern2[3512]=961;
		pattern2[3513]=1088;
		pattern2[3514]=1226;
		pattern2[3515]=1373;
		pattern2[3516]=1528;
		pattern2[3517]=1690;
		pattern2[3518]=1857;
		pattern2[3519]=2026;
		pattern2[3520]=2198;
		pattern2[3521]=2370;
		pattern2[3522]=2539;
		pattern2[3523]=2706;
		pattern2[3524]=2868;
		pattern2[3525]=3023;
		pattern2[3526]=3170;
		pattern2[3527]=3308;
		pattern2[3528]=3435;
		pattern2[3529]=3551;
		pattern2[3530]=3653;
		pattern2[3531]=3741;
		pattern2[3532]=3815;
		pattern2[3533]=3873;
		pattern2[3534]=3914;
		pattern2[3535]=3940;
		pattern2[3536]=3948;
		pattern2[3537]=3940;
		pattern2[3538]=3914;
		pattern2[3539]=3873;
		pattern2[3540]=3815;
		pattern2[3541]=3741;
		pattern2[3542]=3653;
		pattern2[3543]=3551;
		pattern2[3544]=3435;
		pattern2[3545]=3308;
		pattern2[3546]=3170;
		pattern2[3547]=3023;
		pattern2[3548]=2868;
		pattern2[3549]=2706;
		pattern2[3550]=2539;
		pattern2[3551]=2370;
		pattern2[3552]=2198;
		pattern2[3553]=2026;
		pattern2[3554]=1857;
		pattern2[3555]=1690;
		pattern2[3556]=1528;
		pattern2[3557]=1373;
		pattern2[3558]=1226;
		pattern2[3559]=1088;
		pattern2[3560]=961;
		pattern2[3561]=845;
		pattern2[3562]=743;
		pattern2[3563]=655;
		pattern2[3564]=581;
		pattern2[3565]=523;
		pattern2[3566]=482;
		pattern2[3567]=456;
		pattern2[3568]=448;
		pattern2[3569]=456;
		pattern2[3570]=482;
		pattern2[3571]=523;
		pattern2[3572]=581;
		pattern2[3573]=655;
		pattern2[3574]=743;
		pattern2[3575]=845;
		pattern2[3576]=961;
		pattern2[3577]=1088;
		pattern2[3578]=1226;
		pattern2[3579]=1373;
		pattern2[3580]=1528;
		pattern2[3581]=1690;
		pattern2[3582]=1857;
		pattern2[3583]=2026;
		pattern2[3584]=2198;
		pattern2[3585]=2370;
		pattern2[3586]=2539;
		pattern2[3587]=2706;
		pattern2[3588]=2868;
		pattern2[3589]=3023;
		pattern2[3590]=3170;
		pattern2[3591]=3308;
		pattern2[3592]=3435;
		pattern2[3593]=3551;
		pattern2[3594]=3653;
		pattern2[3595]=3741;
		pattern2[3596]=3815;
		pattern2[3597]=3873;
		pattern2[3598]=3914;
		pattern2[3599]=3940;
		pattern2[3600]=3948;
		pattern2[3601]=3940;
		pattern2[3602]=3914;
		pattern2[3603]=3873;
		pattern2[3604]=3815;
		pattern2[3605]=3741;
		pattern2[3606]=3653;
		pattern2[3607]=3551;
		pattern2[3608]=3435;
		pattern2[3609]=3308;
		pattern2[3610]=3170;
		pattern2[3611]=3023;
		pattern2[3612]=2868;
		pattern2[3613]=2706;
		pattern2[3614]=2539;
		pattern2[3615]=2370;
		pattern2[3616]=2198;
		pattern2[3617]=2026;
		pattern2[3618]=1857;
		pattern2[3619]=1690;
		pattern2[3620]=1528;
		pattern2[3621]=1373;
		pattern2[3622]=1226;
		pattern2[3623]=1088;
		pattern2[3624]=961;
		pattern2[3625]=845;
		pattern2[3626]=743;
		pattern2[3627]=655;
		pattern2[3628]=581;
		pattern2[3629]=523;
		pattern2[3630]=482;
		pattern2[3631]=456;
		pattern2[3632]=448;
		pattern2[3633]=456;
		pattern2[3634]=482;
		pattern2[3635]=523;
		pattern2[3636]=581;
		pattern2[3637]=655;
		pattern2[3638]=743;
		pattern2[3639]=845;
		pattern2[3640]=961;
		pattern2[3641]=1088;
		pattern2[3642]=1226;
		pattern2[3643]=1373;
		pattern2[3644]=1528;
		pattern2[3645]=1690;
		pattern2[3646]=1857;
		pattern2[3647]=2026;
		pattern2[3648]=2198;
		pattern2[3649]=2370;
		pattern2[3650]=2539;
		pattern2[3651]=2706;
		pattern2[3652]=2868;
		pattern2[3653]=3023;
		pattern2[3654]=3170;
		pattern2[3655]=3308;
		pattern2[3656]=3435;
		pattern2[3657]=3551;
		pattern2[3658]=3653;
		pattern2[3659]=3741;
		pattern2[3660]=3815;
		pattern2[3661]=3873;
		pattern2[3662]=3914;
		pattern2[3663]=3940;
		pattern2[3664]=3948;
		pattern2[3665]=3940;
		pattern2[3666]=3914;
		pattern2[3667]=3873;
		pattern2[3668]=3815;
		pattern2[3669]=3741;
		pattern2[3670]=3653;
		pattern2[3671]=3551;
		pattern2[3672]=3435;
		pattern2[3673]=3308;
		pattern2[3674]=3170;
		pattern2[3675]=3023;
		pattern2[3676]=2868;
		pattern2[3677]=2706;
		pattern2[3678]=2539;
		pattern2[3679]=2370;
		pattern2[3680]=2198;
		pattern2[3681]=2026;
		pattern2[3682]=1857;
		pattern2[3683]=1690;
		pattern2[3684]=1528;
		pattern2[3685]=1373;
		pattern2[3686]=1226;
		pattern2[3687]=1088;
		pattern2[3688]=961;
		pattern2[3689]=845;
		pattern2[3690]=743;
		pattern2[3691]=655;
		pattern2[3692]=581;
		pattern2[3693]=523;
		pattern2[3694]=482;
		pattern2[3695]=456;
		pattern2[3696]=448;
		pattern2[3697]=456;
		pattern2[3698]=482;
		pattern2[3699]=523;
		pattern2[3700]=581;
		pattern2[3701]=655;
		pattern2[3702]=743;
		pattern2[3703]=845;
		pattern2[3704]=961;
		pattern2[3705]=1088;
		pattern2[3706]=1226;
		pattern2[3707]=1373;
		pattern2[3708]=1528;
		pattern2[3709]=1690;
		pattern2[3710]=1857;
		pattern2[3711]=2026;
		pattern2[3712]=2198;
		pattern2[3713]=2370;
		pattern2[3714]=2539;
		pattern2[3715]=2706;
		pattern2[3716]=2868;
		pattern2[3717]=3023;
		pattern2[3718]=3170;
		pattern2[3719]=3308;
		pattern2[3720]=3435;
		pattern2[3721]=3551;
		pattern2[3722]=3653;
		pattern2[3723]=3741;
		pattern2[3724]=3815;
		pattern2[3725]=3873;
		pattern2[3726]=3914;
		pattern2[3727]=3940;
		pattern2[3728]=3948;
		pattern2[3729]=3940;
		pattern2[3730]=3914;
		pattern2[3731]=3873;
		pattern2[3732]=3815;
		pattern2[3733]=3741;
		pattern2[3734]=3653;
		pattern2[3735]=3551;
		pattern2[3736]=3435;
		pattern2[3737]=3308;
		pattern2[3738]=3170;
		pattern2[3739]=3023;
		pattern2[3740]=2868;
		pattern2[3741]=2706;
		pattern2[3742]=2539;
		pattern2[3743]=2370;
		pattern2[3744]=2198;
		pattern2[3745]=2026;
		pattern2[3746]=1857;
		pattern2[3747]=1690;
		pattern2[3748]=1528;
		pattern2[3749]=1373;
		pattern2[3750]=1226;
		pattern2[3751]=1088;
		pattern2[3752]=961;
		pattern2[3753]=845;
		pattern2[3754]=743;
		pattern2[3755]=655;
		pattern2[3756]=581;
		pattern2[3757]=523;
		pattern2[3758]=482;
		pattern2[3759]=456;
		pattern2[3760]=448;
		pattern2[3761]=456;
		pattern2[3762]=482;
		pattern2[3763]=523;
		pattern2[3764]=581;
		pattern2[3765]=655;
		pattern2[3766]=743;
		pattern2[3767]=845;
		pattern2[3768]=961;
		pattern2[3769]=1088;
		pattern2[3770]=1226;
		pattern2[3771]=1373;
		pattern2[3772]=1528;
		pattern2[3773]=1690;
		pattern2[3774]=1857;
		pattern2[3775]=2026;
		pattern2[3776]=2198;
		pattern2[3777]=2370;
		pattern2[3778]=2539;
		pattern2[3779]=2706;
		pattern2[3780]=2868;
		pattern2[3781]=3023;
		pattern2[3782]=3170;
		pattern2[3783]=3308;
		pattern2[3784]=3435;
		pattern2[3785]=3551;
		pattern2[3786]=3653;
		pattern2[3787]=3741;
		pattern2[3788]=3815;
		pattern2[3789]=3873;
		pattern2[3790]=3914;
		pattern2[3791]=3940;
		pattern2[3792]=3948;
		pattern2[3793]=3940;
		pattern2[3794]=3914;
		pattern2[3795]=3873;
		pattern2[3796]=3815;
		pattern2[3797]=3741;
		pattern2[3798]=3653;
		pattern2[3799]=3551;
		pattern2[3800]=3435;
		pattern2[3801]=3308;
		pattern2[3802]=3170;
		pattern2[3803]=3023;
		pattern2[3804]=2868;
		pattern2[3805]=2706;
		pattern2[3806]=2539;
		pattern2[3807]=2370;
		pattern2[3808]=2198;
		pattern2[3809]=2026;
		pattern2[3810]=1857;
		pattern2[3811]=1690;
		pattern2[3812]=1528;
		pattern2[3813]=1373;
		pattern2[3814]=1226;
		pattern2[3815]=1088;
		pattern2[3816]=961;
		pattern2[3817]=845;
		pattern2[3818]=743;
		pattern2[3819]=655;
		pattern2[3820]=581;
		pattern2[3821]=523;
		pattern2[3822]=482;
		pattern2[3823]=456;
		pattern2[3824]=448;
		pattern2[3825]=456;
		pattern2[3826]=482;
		pattern2[3827]=523;
		pattern2[3828]=581;
		pattern2[3829]=655;
		pattern2[3830]=743;
		pattern2[3831]=845;
		pattern2[3832]=961;
		pattern2[3833]=1088;
		pattern2[3834]=1226;
		pattern2[3835]=1373;
		pattern2[3836]=1528;
		pattern2[3837]=1690;
		pattern2[3838]=1857;
		pattern2[3839]=2026;
		pattern2[3840]=2198;
		pattern2[3841]=2370;
		pattern2[3842]=2539;
		pattern2[3843]=2706;
		pattern2[3844]=2868;
		pattern2[3845]=3023;
		pattern2[3846]=3170;
		pattern2[3847]=3308;
		pattern2[3848]=3435;
		pattern2[3849]=3551;
		pattern2[3850]=3653;
		pattern2[3851]=3741;
		pattern2[3852]=3815;
		pattern2[3853]=3873;
		pattern2[3854]=3914;
		pattern2[3855]=3940;
		pattern2[3856]=3948;
		pattern2[3857]=3940;
		pattern2[3858]=3914;
		pattern2[3859]=3873;
		pattern2[3860]=3815;
		pattern2[3861]=3741;
		pattern2[3862]=3653;
		pattern2[3863]=3551;
		pattern2[3864]=3435;
		pattern2[3865]=3308;
		pattern2[3866]=3170;
		pattern2[3867]=3023;
		pattern2[3868]=2868;
		pattern2[3869]=2706;
		pattern2[3870]=2539;
		pattern2[3871]=2370;
		pattern2[3872]=2198;
		pattern2[3873]=2026;
		pattern2[3874]=1857;
		pattern2[3875]=1690;
		pattern2[3876]=1528;
		pattern2[3877]=1373;
		pattern2[3878]=1226;
		pattern2[3879]=1088;
		pattern2[3880]=961;
		pattern2[3881]=845;
		pattern2[3882]=743;
		pattern2[3883]=655;
		pattern2[3884]=581;
		pattern2[3885]=523;
		pattern2[3886]=482;
		pattern2[3887]=456;
		pattern2[3888]=448;
		pattern2[3889]=456;
		pattern2[3890]=482;
		pattern2[3891]=523;
		pattern2[3892]=581;
		pattern2[3893]=655;
		pattern2[3894]=743;
		pattern2[3895]=845;
		pattern2[3896]=961;
		pattern2[3897]=1088;
		pattern2[3898]=1226;
		pattern2[3899]=1373;
		pattern2[3900]=1528;
		pattern2[3901]=1690;
		pattern2[3902]=1857;
		pattern2[3903]=2026;
		pattern2[3904]=2198;
		pattern2[3905]=2370;
		pattern2[3906]=2539;
		pattern2[3907]=2706;
		pattern2[3908]=2868;
		pattern2[3909]=3023;
		pattern2[3910]=3170;
		pattern2[3911]=3308;
		pattern2[3912]=3435;
		pattern2[3913]=3551;
		pattern2[3914]=3653;
		pattern2[3915]=3741;
		pattern2[3916]=3815;
		pattern2[3917]=3873;
		pattern2[3918]=3914;
		pattern2[3919]=3940;
		pattern2[3920]=3948;
		pattern2[3921]=3940;
		pattern2[3922]=3914;
		pattern2[3923]=3873;
		pattern2[3924]=3815;
		pattern2[3925]=3741;
		pattern2[3926]=3653;
		pattern2[3927]=3551;
		pattern2[3928]=3435;
		pattern2[3929]=3308;
		pattern2[3930]=3170;
		pattern2[3931]=3023;
		pattern2[3932]=2868;
		pattern2[3933]=2706;
		pattern2[3934]=2539;
		pattern2[3935]=2370;
		pattern2[3936]=2198;
		pattern2[3937]=2026;
		pattern2[3938]=1857;
		pattern2[3939]=1690;
		pattern2[3940]=1528;
		pattern2[3941]=1373;
		pattern2[3942]=1226;
		pattern2[3943]=1088;
		pattern2[3944]=961;
		pattern2[3945]=845;
		pattern2[3946]=743;
		pattern2[3947]=655;
		pattern2[3948]=581;
		pattern2[3949]=523;
		pattern2[3950]=482;
		pattern2[3951]=456;
		pattern2[3952]=448;
		pattern2[3953]=456;
		pattern2[3954]=482;
		pattern2[3955]=523;
		pattern2[3956]=581;
		pattern2[3957]=655;
		pattern2[3958]=743;
		pattern2[3959]=845;
		pattern2[3960]=961;
		pattern2[3961]=1088;
		pattern2[3962]=1226;
		pattern2[3963]=1373;
		pattern2[3964]=1528;
		pattern2[3965]=1690;
		pattern2[3966]=1857;
		pattern2[3967]=2026;
		pattern2[3968]=2198;
		pattern2[3969]=2370;
		pattern2[3970]=2539;
		pattern2[3971]=2706;
		pattern2[3972]=2868;
		pattern2[3973]=3023;
		pattern2[3974]=3170;
		pattern2[3975]=3308;
		pattern2[3976]=3435;
		pattern2[3977]=3551;
		pattern2[3978]=3653;
		pattern2[3979]=3741;
		pattern2[3980]=3815;
		pattern2[3981]=3873;
		pattern2[3982]=3914;
		pattern2[3983]=3940;
		pattern2[3984]=3948;
		pattern2[3985]=3940;
		pattern2[3986]=3914;
		pattern2[3987]=3873;
		pattern2[3988]=3815;
		pattern2[3989]=3741;
		pattern2[3990]=3653;
		pattern2[3991]=3551;
		pattern2[3992]=3435;
		pattern2[3993]=3308;
		pattern2[3994]=3170;
		pattern2[3995]=3023;
		pattern2[3996]=2868;
		pattern2[3997]=2706;
		pattern2[3998]=2539;
		pattern2[3999]=2370;
		pattern2[4000]=2198;
		pattern2[4001]=2026;
		pattern2[4002]=1857;
		pattern2[4003]=1690;
		pattern2[4004]=1528;
		pattern2[4005]=1373;
		pattern2[4006]=1226;
		pattern2[4007]=1088;
		pattern2[4008]=961;
		pattern2[4009]=845;
		pattern2[4010]=743;
		pattern2[4011]=655;
		pattern2[4012]=581;
		pattern2[4013]=523;
		pattern2[4014]=482;
		pattern2[4015]=456;
		pattern2[4016]=448;
		pattern2[4017]=456;
		pattern2[4018]=482;
		pattern2[4019]=523;
		pattern2[4020]=581;
		pattern2[4021]=655;
		pattern2[4022]=743;
		pattern2[4023]=845;
		pattern2[4024]=961;
		pattern2[4025]=1088;
		pattern2[4026]=1226;
		pattern2[4027]=1373;
		pattern2[4028]=1528;
		pattern2[4029]=1690;
		pattern2[4030]=1857;
		pattern2[4031]=2026;
		pattern2[4032]=2198;
		pattern2[4033]=2370;
		pattern2[4034]=2539;
		pattern2[4035]=2706;
		pattern2[4036]=2868;
		pattern2[4037]=3023;
		pattern2[4038]=3170;
		pattern2[4039]=3308;
		pattern2[4040]=3435;
		pattern2[4041]=3551;
		pattern2[4042]=3653;
		pattern2[4043]=3741;
		pattern2[4044]=3815;
		pattern2[4045]=3873;
		pattern2[4046]=3914;
		pattern2[4047]=3940;
		pattern2[4048]=3948;
		pattern2[4049]=3940;
		pattern2[4050]=3914;
		pattern2[4051]=3873;
		pattern2[4052]=3815;
		pattern2[4053]=3741;
		pattern2[4054]=3653;
		pattern2[4055]=3551;
		pattern2[4056]=3435;
		pattern2[4057]=3308;
		pattern2[4058]=3170;
		pattern2[4059]=3023;
		pattern2[4060]=2868;
		pattern2[4061]=2706;
		pattern2[4062]=2539;
		pattern2[4063]=2370;
		pattern2[4064]=2198;
		pattern2[4065]=2026;
		pattern2[4066]=1857;
		pattern2[4067]=1690;
		pattern2[4068]=1528;
		pattern2[4069]=1373;
		pattern2[4070]=1226;
		pattern2[4071]=1088;
		pattern2[4072]=961;
		pattern2[4073]=845;
		pattern2[4074]=743;
		pattern2[4075]=655;
		pattern2[4076]=581;
		pattern2[4077]=523;
		pattern2[4078]=482;
		pattern2[4079]=456;
		pattern2[4080]=448;
		pattern2[4081]=456;
		pattern2[4082]=482;
		pattern2[4083]=523;
		pattern2[4084]=581;
		pattern2[4085]=655;
		pattern2[4086]=743;
		pattern2[4087]=845;
		pattern2[4088]=961;
		pattern2[4089]=1088;
		pattern2[4090]=1226;
		pattern2[4091]=1373;
		pattern2[4092]=1528;
		pattern2[4093]=1690;
		pattern2[4094]=1857;
		pattern2[4095]=2026;

*/

/*		//16khz data flipped
		sine[0]=2370;
		sine[1]=2198;
		sine[2]=2706;
		sine[3]=2539;
		sine[4]=3023;
		sine[5]=2868;
		sine[6]=3308;
		sine[7]=3170;
		sine[8]=3551;
		sine[9]=3435;
		sine[10]=3741;
		sine[11]=3653;
		sine[12]=3873;
		sine[13]=3815;
		sine[14]=3940;
		sine[15]=3914;
		sine[16]=3940;
		sine[17]=3948;
		sine[18]=3873;
		sine[19]=3914;
		sine[20]=3741;
		sine[21]=3815;
		sine[22]=3551;
		sine[23]=3653;
		sine[24]=3308;
		sine[25]=3435;
		sine[26]=3023;
		sine[27]=3170;
		sine[28]=2706;
		sine[29]=2868;
		sine[30]=2370;
		sine[31]=2539;
		sine[32]=2026;
		sine[33]=2198;
		sine[34]=1690;
		sine[35]=1857;
		sine[36]=1373;
		sine[37]=1528;
		sine[38]=1088;
		sine[39]=1226;
		sine[40]=845;
		sine[41]=961;
		sine[42]=655;
		sine[43]=743;
		sine[44]=523;
		sine[45]=581;
		sine[46]=456;
		sine[47]=482;
		sine[48]=456;
		sine[49]=448;
		sine[50]=523;
		sine[51]=482;
		sine[52]=655;
		sine[53]=581;
		sine[54]=845;
		sine[55]=743;
		sine[56]=1088;
		sine[57]=961;
		sine[58]=1373;
		sine[59]=1226;
		sine[60]=1690;
		sine[61]=1528;
		sine[62]=2026;
		sine[63]=1857;
		sine[64]=2370;
		sine[65]=2198;
		sine[66]=2706;
		sine[67]=2539;
		sine[68]=3023;
		sine[69]=2868;
		sine[70]=3308;
		sine[71]=3170;
		sine[72]=3551;
		sine[73]=3435;
		sine[74]=3741;
		sine[75]=3653;
		sine[76]=3873;
		sine[77]=3815;
		sine[78]=3940;
		sine[79]=3914;
		sine[80]=3940;
		sine[81]=3948;
		sine[82]=3873;
		sine[83]=3914;
		sine[84]=3741;
		sine[85]=3815;
		sine[86]=3551;
		sine[87]=3653;
		sine[88]=3308;
		sine[89]=3435;
		sine[90]=3023;
		sine[91]=3170;
		sine[92]=2706;
		sine[93]=2868;
		sine[94]=2370;
		sine[95]=2539;
		sine[96]=2026;
		sine[97]=2198;
		sine[98]=1690;
		sine[99]=1857;
		sine[100]=1373;
		sine[101]=1528;
		sine[102]=1088;
		sine[103]=1226;
		sine[104]=845;
		sine[105]=961;
		sine[106]=655;
		sine[107]=743;
		sine[108]=523;
		sine[109]=581;
		sine[110]=456;
		sine[111]=482;
		sine[112]=456;
		sine[113]=448;
		sine[114]=523;
		sine[115]=482;
		sine[116]=655;
		sine[117]=581;
		sine[118]=845;
		sine[119]=743;
		sine[120]=1088;
		sine[121]=961;
		sine[122]=1373;
		sine[123]=1226;
		sine[124]=1690;
		sine[125]=1528;
		sine[126]=2026;
		sine[127]=1857;
		sine[128]=2370;
		sine[129]=2198;
		sine[130]=2706;
		sine[131]=2539;
		sine[132]=3023;
		sine[133]=2868;
		sine[134]=3308;
		sine[135]=3170;
		sine[136]=3551;
		sine[137]=3435;
		sine[138]=3741;
		sine[139]=3653;
		sine[140]=3873;
		sine[141]=3815;
		sine[142]=3940;
		sine[143]=3914;
		sine[144]=3940;
		sine[145]=3948;
		sine[146]=3873;
		sine[147]=3914;
		sine[148]=3741;
		sine[149]=3815;
		sine[150]=3551;
		sine[151]=3653;
		sine[152]=3308;
		sine[153]=3435;
		sine[154]=3023;
		sine[155]=3170;
		sine[156]=2706;
		sine[157]=2868;
		sine[158]=2370;
		sine[159]=2539;
		sine[160]=2026;
		sine[161]=2198;
		sine[162]=1690;
		sine[163]=1857;
		sine[164]=1373;
		sine[165]=1528;
		sine[166]=1088;
		sine[167]=1226;
		sine[168]=845;
		sine[169]=961;
		sine[170]=655;
		sine[171]=743;
		sine[172]=523;
		sine[173]=581;
		sine[174]=456;
		sine[175]=482;
		sine[176]=456;
		sine[177]=448;
		sine[178]=523;
		sine[179]=482;
		sine[180]=655;
		sine[181]=581;
		sine[182]=845;
		sine[183]=743;
		sine[184]=1088;
		sine[185]=961;
		sine[186]=1373;
		sine[187]=1226;
		sine[188]=1690;
		sine[189]=1528;
		sine[190]=2026;
		sine[191]=1857;
		sine[192]=2370;
		sine[193]=2198;
		sine[194]=2706;
		sine[195]=2539;
		sine[196]=3023;
		sine[197]=2868;
		sine[198]=3308;
		sine[199]=3170;
		sine[200]=3551;
		sine[201]=3435;
		sine[202]=3741;
		sine[203]=3653;
		sine[204]=3873;
		sine[205]=3815;
		sine[206]=3940;
		sine[207]=3914;
		sine[208]=3940;
		sine[209]=3948;
		sine[210]=3873;
		sine[211]=3914;
		sine[212]=3741;
		sine[213]=3815;
		sine[214]=3551;
		sine[215]=3653;
		sine[216]=3308;
		sine[217]=3435;
		sine[218]=3023;
		sine[219]=3170;
		sine[220]=2706;
		sine[221]=2868;
		sine[222]=2370;
		sine[223]=2539;
		sine[224]=2026;
		sine[225]=2198;
		sine[226]=1690;
		sine[227]=1857;
		sine[228]=1373;
		sine[229]=1528;
		sine[230]=1088;
		sine[231]=1226;
		sine[232]=845;
		sine[233]=961;
		sine[234]=655;
		sine[235]=743;
		sine[236]=523;
		sine[237]=581;
		sine[238]=456;
		sine[239]=482;
		sine[240]=456;
		sine[241]=448;
		sine[242]=523;
		sine[243]=482;
		sine[244]=655;
		sine[245]=581;
		sine[246]=845;
		sine[247]=743;
		sine[248]=1088;
		sine[249]=961;
		sine[250]=1373;
		sine[251]=1226;
		sine[252]=1690;
		sine[253]=1528;
		sine[254]=2026;
		sine[255]=1857;
		sine[256]=2370;
		sine[257]=2198;
		sine[258]=2706;
		sine[259]=2539;
		sine[260]=3023;
		sine[261]=2868;
		sine[262]=3308;
		sine[263]=3170;
		sine[264]=3551;
		sine[265]=3435;
		sine[266]=3741;
		sine[267]=3653;
		sine[268]=3873;
		sine[269]=3815;
		sine[270]=3940;
		sine[271]=3914;
		sine[272]=3940;
		sine[273]=3948;
		sine[274]=3873;
		sine[275]=3914;
		sine[276]=3741;
		sine[277]=3815;
		sine[278]=3551;
		sine[279]=3653;
		sine[280]=3308;
		sine[281]=3435;
		sine[282]=3023;
		sine[283]=3170;
		sine[284]=2706;
		sine[285]=2868;
		sine[286]=2370;
		sine[287]=2539;
		sine[288]=2026;
		sine[289]=2198;
		sine[290]=1690;
		sine[291]=1857;
		sine[292]=1373;
		sine[293]=1528;
		sine[294]=1088;
		sine[295]=1226;
		sine[296]=845;
		sine[297]=961;
		sine[298]=655;
		sine[299]=743;
		sine[300]=523;
		sine[301]=581;
		sine[302]=456;
		sine[303]=482;
		sine[304]=456;
		sine[305]=448;
		sine[306]=523;
		sine[307]=482;
		sine[308]=655;
		sine[309]=581;
		sine[310]=845;
		sine[311]=743;
		sine[312]=1088;
		sine[313]=961;
		sine[314]=1373;
		sine[315]=1226;
		sine[316]=1690;
		sine[317]=1528;
		sine[318]=2026;
		sine[319]=1857;
		sine[320]=2370;
		sine[321]=2198;
		sine[322]=2706;
		sine[323]=2539;
		sine[324]=3023;
		sine[325]=2868;
		sine[326]=3308;
		sine[327]=3170;
		sine[328]=3551;
		sine[329]=3435;
		sine[330]=3741;
		sine[331]=3653;
		sine[332]=3873;
		sine[333]=3815;
		sine[334]=3940;
		sine[335]=3914;
		sine[336]=3940;
		sine[337]=3948;
		sine[338]=3873;
		sine[339]=3914;
		sine[340]=3741;
		sine[341]=3815;
		sine[342]=3551;
		sine[343]=3653;
		sine[344]=3308;
		sine[345]=3435;
		sine[346]=3023;
		sine[347]=3170;
		sine[348]=2706;
		sine[349]=2868;
		sine[350]=2370;
		sine[351]=2539;
		sine[352]=2026;
		sine[353]=2198;
		sine[354]=1690;
		sine[355]=1857;
		sine[356]=1373;
		sine[357]=1528;
		sine[358]=1088;
		sine[359]=1226;
		sine[360]=845;
		sine[361]=961;
		sine[362]=655;
		sine[363]=743;
		sine[364]=523;
		sine[365]=581;
		sine[366]=456;
		sine[367]=482;
		sine[368]=456;
		sine[369]=448;
		sine[370]=523;
		sine[371]=482;
		sine[372]=655;
		sine[373]=581;
		sine[374]=845;
		sine[375]=743;
		sine[376]=1088;
		sine[377]=961;
		sine[378]=1373;
		sine[379]=1226;
		sine[380]=1690;
		sine[381]=1528;
		sine[382]=2026;
		sine[383]=1857;
		sine[384]=2370;
		sine[385]=2198;
		sine[386]=2706;
		sine[387]=2539;
		sine[388]=3023;
		sine[389]=2868;
		sine[390]=3308;
		sine[391]=3170;
		sine[392]=3551;
		sine[393]=3435;
		sine[394]=3741;
		sine[395]=3653;
		sine[396]=3873;
		sine[397]=3815;
		sine[398]=3940;
		sine[399]=3914;
		sine[400]=3940;
		sine[401]=3948;
		sine[402]=3873;
		sine[403]=3914;
		sine[404]=3741;
		sine[405]=3815;
		sine[406]=3551;
		sine[407]=3653;
		sine[408]=3308;
		sine[409]=3435;
		sine[410]=3023;
		sine[411]=3170;
		sine[412]=2706;
		sine[413]=2868;
		sine[414]=2370;
		sine[415]=2539;
		sine[416]=2026;
		sine[417]=2198;
		sine[418]=1690;
		sine[419]=1857;
		sine[420]=1373;
		sine[421]=1528;
		sine[422]=1088;
		sine[423]=1226;
		sine[424]=845;
		sine[425]=961;
		sine[426]=655;
		sine[427]=743;
		sine[428]=523;
		sine[429]=581;
		sine[430]=456;
		sine[431]=482;
		sine[432]=456;
		sine[433]=448;
		sine[434]=523;
		sine[435]=482;
		sine[436]=655;
		sine[437]=581;
		sine[438]=845;
		sine[439]=743;
		sine[440]=1088;
		sine[441]=961;
		sine[442]=1373;
		sine[443]=1226;
		sine[444]=1690;
		sine[445]=1528;
		sine[446]=2026;
		sine[447]=1857;
		sine[448]=2370;
		sine[449]=2198;
		sine[450]=2706;
		sine[451]=2539;
		sine[452]=3023;
		sine[453]=2868;
		sine[454]=3308;
		sine[455]=3170;
		sine[456]=3551;
		sine[457]=3435;
		sine[458]=3741;
		sine[459]=3653;
		sine[460]=3873;
		sine[461]=3815;
		sine[462]=3940;
		sine[463]=3914;
		sine[464]=3940;
		sine[465]=3948;
		sine[466]=3873;
		sine[467]=3914;
		sine[468]=3741;
		sine[469]=3815;
		sine[470]=3551;
		sine[471]=3653;
		sine[472]=3308;
		sine[473]=3435;
		sine[474]=3023;
		sine[475]=3170;
		sine[476]=2706;
		sine[477]=2868;
		sine[478]=2370;
		sine[479]=2539;
		sine[480]=2026;
		sine[481]=2198;
		sine[482]=1690;
		sine[483]=1857;
		sine[484]=1373;
		sine[485]=1528;
		sine[486]=1088;
		sine[487]=1226;
		sine[488]=845;
		sine[489]=961;
		sine[490]=655;
		sine[491]=743;
		sine[492]=523;
		sine[493]=581;
		sine[494]=456;
		sine[495]=482;
		sine[496]=456;
		sine[497]=448;
		sine[498]=523;
		sine[499]=482;
		sine[500]=655;
		sine[501]=581;
		sine[502]=845;
		sine[503]=743;
		sine[504]=1088;
		sine[505]=961;
		sine[506]=1373;
		sine[507]=1226;
		sine[508]=1690;
		sine[509]=1528;
		sine[510]=2026;
		sine[511]=1857;
		sine[512]=2370;
		sine[513]=2198;
		sine[514]=2706;
		sine[515]=2539;
		sine[516]=3023;
		sine[517]=2868;
		sine[518]=3308;
		sine[519]=3170;
		sine[520]=3551;
		sine[521]=3435;
		sine[522]=3741;
		sine[523]=3653;
		sine[524]=3873;
		sine[525]=3815;
		sine[526]=3940;
		sine[527]=3914;
		sine[528]=3940;
		sine[529]=3948;
		sine[530]=3873;
		sine[531]=3914;
		sine[532]=3741;
		sine[533]=3815;
		sine[534]=3551;
		sine[535]=3653;
		sine[536]=3308;
		sine[537]=3435;
		sine[538]=3023;
		sine[539]=3170;
		sine[540]=2706;
		sine[541]=2868;
		sine[542]=2370;
		sine[543]=2539;
		sine[544]=2026;
		sine[545]=2198;
		sine[546]=1690;
		sine[547]=1857;
		sine[548]=1373;
		sine[549]=1528;
		sine[550]=1088;
		sine[551]=1226;
		sine[552]=845;
		sine[553]=961;
		sine[554]=655;
		sine[555]=743;
		sine[556]=523;
		sine[557]=581;
		sine[558]=456;
		sine[559]=482;
		sine[560]=456;
		sine[561]=448;
		sine[562]=523;
		sine[563]=482;
		sine[564]=655;
		sine[565]=581;
		sine[566]=845;
		sine[567]=743;
		sine[568]=1088;
		sine[569]=961;
		sine[570]=1373;
		sine[571]=1226;
		sine[572]=1690;
		sine[573]=1528;
		sine[574]=2026;
		sine[575]=1857;
		sine[576]=2370;
		sine[577]=2198;
		sine[578]=2706;
		sine[579]=2539;
		sine[580]=3023;
		sine[581]=2868;
		sine[582]=3308;
		sine[583]=3170;
		sine[584]=3551;
		sine[585]=3435;
		sine[586]=3741;
		sine[587]=3653;
		sine[588]=3873;
		sine[589]=3815;
		sine[590]=3940;
		sine[591]=3914;
		sine[592]=3940;
		sine[593]=3948;
		sine[594]=3873;
		sine[595]=3914;
		sine[596]=3741;
		sine[597]=3815;
		sine[598]=3551;
		sine[599]=3653;
		sine[600]=3308;
		sine[601]=3435;
		sine[602]=3023;
		sine[603]=3170;
		sine[604]=2706;
		sine[605]=2868;
		sine[606]=2370;
		sine[607]=2539;
		sine[608]=2026;
		sine[609]=2198;
		sine[610]=1690;
		sine[611]=1857;
		sine[612]=1373;
		sine[613]=1528;
		sine[614]=1088;
		sine[615]=1226;
		sine[616]=845;
		sine[617]=961;
		sine[618]=655;
		sine[619]=743;
		sine[620]=523;
		sine[621]=581;
		sine[622]=456;
		sine[623]=482;
		sine[624]=456;
		sine[625]=448;
		sine[626]=523;
		sine[627]=482;
		sine[628]=655;
		sine[629]=581;
		sine[630]=845;
		sine[631]=743;
		sine[632]=1088;
		sine[633]=961;
		sine[634]=1373;
		sine[635]=1226;
		sine[636]=1690;
		sine[637]=1528;
		sine[638]=2026;
		sine[639]=1857;
		sine[640]=2370;
		sine[641]=2198;
		sine[642]=2706;
		sine[643]=2539;
		sine[644]=3023;
		sine[645]=2868;
		sine[646]=3308;
		sine[647]=3170;
		sine[648]=3551;
		sine[649]=3435;
		sine[650]=3741;
		sine[651]=3653;
		sine[652]=3873;
		sine[653]=3815;
		sine[654]=3940;
		sine[655]=3914;
		sine[656]=3940;
		sine[657]=3948;
		sine[658]=3873;
		sine[659]=3914;
		sine[660]=3741;
		sine[661]=3815;
		sine[662]=3551;
		sine[663]=3653;
		sine[664]=3308;
		sine[665]=3435;
		sine[666]=3023;
		sine[667]=3170;
		sine[668]=2706;
		sine[669]=2868;
		sine[670]=2370;
		sine[671]=2539;
		sine[672]=2026;
		sine[673]=2198;
		sine[674]=1690;
		sine[675]=1857;
		sine[676]=1373;
		sine[677]=1528;
		sine[678]=1088;
		sine[679]=1226;
		sine[680]=845;
		sine[681]=961;
		sine[682]=655;
		sine[683]=743;
		sine[684]=523;
		sine[685]=581;
		sine[686]=456;
		sine[687]=482;
		sine[688]=456;
		sine[689]=448;
		sine[690]=523;
		sine[691]=482;
		sine[692]=655;
		sine[693]=581;
		sine[694]=845;
		sine[695]=743;
		sine[696]=1088;
		sine[697]=961;
		sine[698]=1373;
		sine[699]=1226;
		sine[700]=1690;
		sine[701]=1528;
		sine[702]=2026;
		sine[703]=1857;
		sine[704]=2370;
		sine[705]=2198;
		sine[706]=2706;
		sine[707]=2539;
		sine[708]=3023;
		sine[709]=2868;
		sine[710]=3308;
		sine[711]=3170;
		sine[712]=3551;
		sine[713]=3435;
		sine[714]=3741;
		sine[715]=3653;
		sine[716]=3873;
		sine[717]=3815;
		sine[718]=3940;
		sine[719]=3914;
		sine[720]=3940;
		sine[721]=3948;
		sine[722]=3873;
		sine[723]=3914;
		sine[724]=3741;
		sine[725]=3815;
		sine[726]=3551;
		sine[727]=3653;
		sine[728]=3308;
		sine[729]=3435;
		sine[730]=3023;
		sine[731]=3170;
		sine[732]=2706;
		sine[733]=2868;
		sine[734]=2370;
		sine[735]=2539;
		sine[736]=2026;
		sine[737]=2198;
		sine[738]=1690;
		sine[739]=1857;
		sine[740]=1373;
		sine[741]=1528;
		sine[742]=1088;
		sine[743]=1226;
		sine[744]=845;
		sine[745]=961;
		sine[746]=655;
		sine[747]=743;
		sine[748]=523;
		sine[749]=581;
		sine[750]=456;
		sine[751]=482;
		sine[752]=456;
		sine[753]=448;
		sine[754]=523;
		sine[755]=482;
		sine[756]=655;
		sine[757]=581;
		sine[758]=845;
		sine[759]=743;
		sine[760]=1088;
		sine[761]=961;
		sine[762]=1373;
		sine[763]=1226;
		sine[764]=1690;
		sine[765]=1528;
		sine[766]=2026;
		sine[767]=1857;
		sine[768]=2370;
		sine[769]=2198;
		sine[770]=2706;
		sine[771]=2539;
		sine[772]=3023;
		sine[773]=2868;
		sine[774]=3308;
		sine[775]=3170;
		sine[776]=3551;
		sine[777]=3435;
		sine[778]=3741;
		sine[779]=3653;
		sine[780]=3873;
		sine[781]=3815;
		sine[782]=3940;
		sine[783]=3914;
		sine[784]=3940;
		sine[785]=3948;
		sine[786]=3873;
		sine[787]=3914;
		sine[788]=3741;
		sine[789]=3815;
		sine[790]=3551;
		sine[791]=3653;
		sine[792]=3308;
		sine[793]=3435;
		sine[794]=3023;
		sine[795]=3170;
		sine[796]=2706;
		sine[797]=2868;
		sine[798]=2370;
		sine[799]=2539;
		sine[800]=2026;
		sine[801]=2198;
		sine[802]=1690;
		sine[803]=1857;
		sine[804]=1373;
		sine[805]=1528;
		sine[806]=1088;
		sine[807]=1226;
		sine[808]=845;
		sine[809]=961;
		sine[810]=655;
		sine[811]=743;
		sine[812]=523;
		sine[813]=581;
		sine[814]=456;
		sine[815]=482;
		sine[816]=456;
		sine[817]=448;
		sine[818]=523;
		sine[819]=482;
		sine[820]=655;
		sine[821]=581;
		sine[822]=845;
		sine[823]=743;
		sine[824]=1088;
		sine[825]=961;
		sine[826]=1373;
		sine[827]=1226;
		sine[828]=1690;
		sine[829]=1528;
		sine[830]=2026;
		sine[831]=1857;
		sine[832]=2370;
		sine[833]=2198;
		sine[834]=2706;
		sine[835]=2539;
		sine[836]=3023;
		sine[837]=2868;
		sine[838]=3308;
		sine[839]=3170;
		sine[840]=3551;
		sine[841]=3435;
		sine[842]=3741;
		sine[843]=3653;
		sine[844]=3873;
		sine[845]=3815;
		sine[846]=3940;
		sine[847]=3914;
		sine[848]=3940;
		sine[849]=3948;
		sine[850]=3873;
		sine[851]=3914;
		sine[852]=3741;
		sine[853]=3815;
		sine[854]=3551;
		sine[855]=3653;
		sine[856]=3308;
		sine[857]=3435;
		sine[858]=3023;
		sine[859]=3170;
		sine[860]=2706;
		sine[861]=2868;
		sine[862]=2370;
		sine[863]=2539;
		sine[864]=2026;
		sine[865]=2198;
		sine[866]=1690;
		sine[867]=1857;
		sine[868]=1373;
		sine[869]=1528;
		sine[870]=1088;
		sine[871]=1226;
		sine[872]=845;
		sine[873]=961;
		sine[874]=655;
		sine[875]=743;
		sine[876]=523;
		sine[877]=581;
		sine[878]=456;
		sine[879]=482;
		sine[880]=456;
		sine[881]=448;
		sine[882]=523;
		sine[883]=482;
		sine[884]=655;
		sine[885]=581;
		sine[886]=845;
		sine[887]=743;
		sine[888]=1088;
		sine[889]=961;
		sine[890]=1373;
		sine[891]=1226;
		sine[892]=1690;
		sine[893]=1528;
		sine[894]=2026;
		sine[895]=1857;
		sine[896]=2370;
		sine[897]=2198;
		sine[898]=2706;
		sine[899]=2539;
		sine[900]=3023;
		sine[901]=2868;
		sine[902]=3308;
		sine[903]=3170;
		sine[904]=3551;
		sine[905]=3435;
		sine[906]=3741;
		sine[907]=3653;
		sine[908]=3873;
		sine[909]=3815;
		sine[910]=3940;
		sine[911]=3914;
		sine[912]=3940;
		sine[913]=3948;
		sine[914]=3873;
		sine[915]=3914;
		sine[916]=3741;
		sine[917]=3815;
		sine[918]=3551;
		sine[919]=3653;
		sine[920]=3308;
		sine[921]=3435;
		sine[922]=3023;
		sine[923]=3170;
		sine[924]=2706;
		sine[925]=2868;
		sine[926]=2370;
		sine[927]=2539;
		sine[928]=2026;
		sine[929]=2198;
		sine[930]=1690;
		sine[931]=1857;
		sine[932]=1373;
		sine[933]=1528;
		sine[934]=1088;
		sine[935]=1226;
		sine[936]=845;
		sine[937]=961;
		sine[938]=655;
		sine[939]=743;
		sine[940]=523;
		sine[941]=581;
		sine[942]=456;
		sine[943]=482;
		sine[944]=456;
		sine[945]=448;
		sine[946]=523;
		sine[947]=482;
		sine[948]=655;
		sine[949]=581;
		sine[950]=845;
		sine[951]=743;
		sine[952]=1088;
		sine[953]=961;
		sine[954]=1373;
		sine[955]=1226;
		sine[956]=1690;
		sine[957]=1528;
		sine[958]=2026;
		sine[959]=1857;
		sine[960]=2370;
		sine[961]=2198;
		sine[962]=2706;
		sine[963]=2539;
		sine[964]=3023;
		sine[965]=2868;
		sine[966]=3308;
		sine[967]=3170;
		sine[968]=3551;
		sine[969]=3435;
		sine[970]=3741;
		sine[971]=3653;
		sine[972]=3873;
		sine[973]=3815;
		sine[974]=3940;
		sine[975]=3914;
		sine[976]=3940;
		sine[977]=3948;
		sine[978]=3873;
		sine[979]=3914;
		sine[980]=3741;
		sine[981]=3815;
		sine[982]=3551;
		sine[983]=3653;
		sine[984]=3308;
		sine[985]=3435;
		sine[986]=3023;
		sine[987]=3170;
		sine[988]=2706;
		sine[989]=2868;
		sine[990]=2370;
		sine[991]=2539;
		sine[992]=2026;
		sine[993]=2198;
		sine[994]=1690;
		sine[995]=1857;
		sine[996]=1373;
		sine[997]=1528;
		sine[998]=1088;
		sine[999]=1226;
		sine[1000]=845;
		sine[1001]=961;
		sine[1002]=655;
		sine[1003]=743;
		sine[1004]=523;
		sine[1005]=581;
		sine[1006]=456;
		sine[1007]=482;
		sine[1008]=456;
		sine[1009]=448;
		sine[1010]=523;
		sine[1011]=482;
		sine[1012]=655;
		sine[1013]=581;
		sine[1014]=845;
		sine[1015]=743;
		sine[1016]=1088;
		sine[1017]=961;
		sine[1018]=1373;
		sine[1019]=1226;
		sine[1020]=1690;
		sine[1021]=1528;
		sine[1022]=2026;
		sine[1023]=1857;
		sine[1024]=2370;
		sine[1025]=2198;
		sine[1026]=2706;
		sine[1027]=2539;
		sine[1028]=3023;
		sine[1029]=2868;
		sine[1030]=3308;
		sine[1031]=3170;
		sine[1032]=3551;
		sine[1033]=3435;
		sine[1034]=3741;
		sine[1035]=3653;
		sine[1036]=3873;
		sine[1037]=3815;
		sine[1038]=3940;
		sine[1039]=3914;
		sine[1040]=3940;
		sine[1041]=3948;
		sine[1042]=3873;
		sine[1043]=3914;
		sine[1044]=3741;
		sine[1045]=3815;
		sine[1046]=3551;
		sine[1047]=3653;
		sine[1048]=3308;
		sine[1049]=3435;
		sine[1050]=3023;
		sine[1051]=3170;
		sine[1052]=2706;
		sine[1053]=2868;
		sine[1054]=2370;
		sine[1055]=2539;
		sine[1056]=2026;
		sine[1057]=2198;
		sine[1058]=1690;
		sine[1059]=1857;
		sine[1060]=1373;
		sine[1061]=1528;
		sine[1062]=1088;
		sine[1063]=1226;
		sine[1064]=845;
		sine[1065]=961;
		sine[1066]=655;
		sine[1067]=743;
		sine[1068]=523;
		sine[1069]=581;
		sine[1070]=456;
		sine[1071]=482;
		sine[1072]=456;
		sine[1073]=448;
		sine[1074]=523;
		sine[1075]=482;
		sine[1076]=655;
		sine[1077]=581;
		sine[1078]=845;
		sine[1079]=743;
		sine[1080]=1088;
		sine[1081]=961;
		sine[1082]=1373;
		sine[1083]=1226;
		sine[1084]=1690;
		sine[1085]=1528;
		sine[1086]=2026;
		sine[1087]=1857;
		sine[1088]=2370;
		sine[1089]=2198;
		sine[1090]=2706;
		sine[1091]=2539;
		sine[1092]=3023;
		sine[1093]=2868;
		sine[1094]=3308;
		sine[1095]=3170;
		sine[1096]=3551;
		sine[1097]=3435;
		sine[1098]=3741;
		sine[1099]=3653;
		sine[1100]=3873;
		sine[1101]=3815;
		sine[1102]=3940;
		sine[1103]=3914;
		sine[1104]=3940;
		sine[1105]=3948;
		sine[1106]=3873;
		sine[1107]=3914;
		sine[1108]=3741;
		sine[1109]=3815;
		sine[1110]=3551;
		sine[1111]=3653;
		sine[1112]=3308;
		sine[1113]=3435;
		sine[1114]=3023;
		sine[1115]=3170;
		sine[1116]=2706;
		sine[1117]=2868;
		sine[1118]=2370;
		sine[1119]=2539;
		sine[1120]=2026;
		sine[1121]=2198;
		sine[1122]=1690;
		sine[1123]=1857;
		sine[1124]=1373;
		sine[1125]=1528;
		sine[1126]=1088;
		sine[1127]=1226;
		sine[1128]=845;
		sine[1129]=961;
		sine[1130]=655;
		sine[1131]=743;
		sine[1132]=523;
		sine[1133]=581;
		sine[1134]=456;
		sine[1135]=482;
		sine[1136]=456;
		sine[1137]=448;
		sine[1138]=523;
		sine[1139]=482;
		sine[1140]=655;
		sine[1141]=581;
		sine[1142]=845;
		sine[1143]=743;
		sine[1144]=1088;
		sine[1145]=961;
		sine[1146]=1373;
		sine[1147]=1226;
		sine[1148]=1690;
		sine[1149]=1528;
		sine[1150]=2026;
		sine[1151]=1857;
		sine[1152]=2370;
		sine[1153]=2198;
		sine[1154]=2706;
		sine[1155]=2539;
		sine[1156]=3023;
		sine[1157]=2868;
		sine[1158]=3308;
		sine[1159]=3170;
		sine[1160]=3551;
		sine[1161]=3435;
		sine[1162]=3741;
		sine[1163]=3653;
		sine[1164]=3873;
		sine[1165]=3815;
		sine[1166]=3940;
		sine[1167]=3914;
		sine[1168]=3940;
		sine[1169]=3948;
		sine[1170]=3873;
		sine[1171]=3914;
		sine[1172]=3741;
		sine[1173]=3815;
		sine[1174]=3551;
		sine[1175]=3653;
		sine[1176]=3308;
		sine[1177]=3435;
		sine[1178]=3023;
		sine[1179]=3170;
		sine[1180]=2706;
		sine[1181]=2868;
		sine[1182]=2370;
		sine[1183]=2539;
		sine[1184]=2026;
		sine[1185]=2198;
		sine[1186]=1690;
		sine[1187]=1857;
		sine[1188]=1373;
		sine[1189]=1528;
		sine[1190]=1088;
		sine[1191]=1226;
		sine[1192]=845;
		sine[1193]=961;
		sine[1194]=655;
		sine[1195]=743;
		sine[1196]=523;
		sine[1197]=581;
		sine[1198]=456;
		sine[1199]=482;
		sine[1200]=456;
		sine[1201]=448;
		sine[1202]=523;
		sine[1203]=482;
		sine[1204]=655;
		sine[1205]=581;
		sine[1206]=845;
		sine[1207]=743;
		sine[1208]=1088;
		sine[1209]=961;
		sine[1210]=1373;
		sine[1211]=1226;
		sine[1212]=1690;
		sine[1213]=1528;
		sine[1214]=2026;
		sine[1215]=1857;
		sine[1216]=2370;
		sine[1217]=2198;
		sine[1218]=2706;
		sine[1219]=2539;
		sine[1220]=3023;
		sine[1221]=2868;
		sine[1222]=3308;
		sine[1223]=3170;
		sine[1224]=3551;
		sine[1225]=3435;
		sine[1226]=3741;
		sine[1227]=3653;
		sine[1228]=3873;
		sine[1229]=3815;
		sine[1230]=3940;
		sine[1231]=3914;
		sine[1232]=3940;
		sine[1233]=3948;
		sine[1234]=3873;
		sine[1235]=3914;
		sine[1236]=3741;
		sine[1237]=3815;
		sine[1238]=3551;
		sine[1239]=3653;
		sine[1240]=3308;
		sine[1241]=3435;
		sine[1242]=3023;
		sine[1243]=3170;
		sine[1244]=2706;
		sine[1245]=2868;
		sine[1246]=2370;
		sine[1247]=2539;
		sine[1248]=2026;
		sine[1249]=2198;
		sine[1250]=1690;
		sine[1251]=1857;
		sine[1252]=1373;
		sine[1253]=1528;
		sine[1254]=1088;
		sine[1255]=1226;
		sine[1256]=845;
		sine[1257]=961;
		sine[1258]=655;
		sine[1259]=743;
		sine[1260]=523;
		sine[1261]=581;
		sine[1262]=456;
		sine[1263]=482;
		sine[1264]=456;
		sine[1265]=448;
		sine[1266]=523;
		sine[1267]=482;
		sine[1268]=655;
		sine[1269]=581;
		sine[1270]=845;
		sine[1271]=743;
		sine[1272]=1088;
		sine[1273]=961;
		sine[1274]=1373;
		sine[1275]=1226;
		sine[1276]=1690;
		sine[1277]=1528;
		sine[1278]=2026;
		sine[1279]=1857;
		sine[1280]=2370;
		sine[1281]=2198;
		sine[1282]=2706;
		sine[1283]=2539;
		sine[1284]=3023;
		sine[1285]=2868;
		sine[1286]=3308;
		sine[1287]=3170;
		sine[1288]=3551;
		sine[1289]=3435;
		sine[1290]=3741;
		sine[1291]=3653;
		sine[1292]=3873;
		sine[1293]=3815;
		sine[1294]=3940;
		sine[1295]=3914;
		sine[1296]=3940;
		sine[1297]=3948;
		sine[1298]=3873;
		sine[1299]=3914;
		sine[1300]=3741;
		sine[1301]=3815;
		sine[1302]=3551;
		sine[1303]=3653;
		sine[1304]=3308;
		sine[1305]=3435;
		sine[1306]=3023;
		sine[1307]=3170;
		sine[1308]=2706;
		sine[1309]=2868;
		sine[1310]=2370;
		sine[1311]=2539;
		sine[1312]=2026;
		sine[1313]=2198;
		sine[1314]=1690;
		sine[1315]=1857;
		sine[1316]=1373;
		sine[1317]=1528;
		sine[1318]=1088;
		sine[1319]=1226;
		sine[1320]=845;
		sine[1321]=961;
		sine[1322]=655;
		sine[1323]=743;
		sine[1324]=523;
		sine[1325]=581;
		sine[1326]=456;
		sine[1327]=482;
		sine[1328]=456;
		sine[1329]=448;
		sine[1330]=523;
		sine[1331]=482;
		sine[1332]=655;
		sine[1333]=581;
		sine[1334]=845;
		sine[1335]=743;
		sine[1336]=1088;
		sine[1337]=961;
		sine[1338]=1373;
		sine[1339]=1226;
		sine[1340]=1690;
		sine[1341]=1528;
		sine[1342]=2026;
		sine[1343]=1857;
		sine[1344]=2370;
		sine[1345]=2198;
		sine[1346]=2706;
		sine[1347]=2539;
		sine[1348]=3023;
		sine[1349]=2868;
		sine[1350]=3308;
		sine[1351]=3170;
		sine[1352]=3551;
		sine[1353]=3435;
		sine[1354]=3741;
		sine[1355]=3653;
		sine[1356]=3873;
		sine[1357]=3815;
		sine[1358]=3940;
		sine[1359]=3914;
		sine[1360]=3940;
		sine[1361]=3948;
		sine[1362]=3873;
		sine[1363]=3914;
		sine[1364]=3741;
		sine[1365]=3815;
		sine[1366]=3551;
		sine[1367]=3653;
		sine[1368]=3308;
		sine[1369]=3435;
		sine[1370]=3023;
		sine[1371]=3170;
		sine[1372]=2706;
		sine[1373]=2868;
		sine[1374]=2370;
		sine[1375]=2539;
		sine[1376]=2026;
		sine[1377]=2198;
		sine[1378]=1690;
		sine[1379]=1857;
		sine[1380]=1373;
		sine[1381]=1528;
		sine[1382]=1088;
		sine[1383]=1226;
		sine[1384]=845;
		sine[1385]=961;
		sine[1386]=655;
		sine[1387]=743;
		sine[1388]=523;
		sine[1389]=581;
		sine[1390]=456;
		sine[1391]=482;
		sine[1392]=456;
		sine[1393]=448;
		sine[1394]=523;
		sine[1395]=482;
		sine[1396]=655;
		sine[1397]=581;
		sine[1398]=845;
		sine[1399]=743;
		sine[1400]=1088;
		sine[1401]=961;
		sine[1402]=1373;
		sine[1403]=1226;
		sine[1404]=1690;
		sine[1405]=1528;
		sine[1406]=2026;
		sine[1407]=1857;
		sine[1408]=2370;
		sine[1409]=2198;
		sine[1410]=2706;
		sine[1411]=2539;
		sine[1412]=3023;
		sine[1413]=2868;
		sine[1414]=3308;
		sine[1415]=3170;
		sine[1416]=3551;
		sine[1417]=3435;
		sine[1418]=3741;
		sine[1419]=3653;
		sine[1420]=3873;
		sine[1421]=3815;
		sine[1422]=3940;
		sine[1423]=3914;
		sine[1424]=3940;
		sine[1425]=3948;
		sine[1426]=3873;
		sine[1427]=3914;
		sine[1428]=3741;
		sine[1429]=3815;
		sine[1430]=3551;
		sine[1431]=3653;
		sine[1432]=3308;
		sine[1433]=3435;
		sine[1434]=3023;
		sine[1435]=3170;
		sine[1436]=2706;
		sine[1437]=2868;
		sine[1438]=2370;
		sine[1439]=2539;
		sine[1440]=2026;
		sine[1441]=2198;
		sine[1442]=1690;
		sine[1443]=1857;
		sine[1444]=1373;
		sine[1445]=1528;
		sine[1446]=1088;
		sine[1447]=1226;
		sine[1448]=845;
		sine[1449]=961;
		sine[1450]=655;
		sine[1451]=743;
		sine[1452]=523;
		sine[1453]=581;
		sine[1454]=456;
		sine[1455]=482;
		sine[1456]=456;
		sine[1457]=448;
		sine[1458]=523;
		sine[1459]=482;
		sine[1460]=655;
		sine[1461]=581;
		sine[1462]=845;
		sine[1463]=743;
		sine[1464]=1088;
		sine[1465]=961;
		sine[1466]=1373;
		sine[1467]=1226;
		sine[1468]=1690;
		sine[1469]=1528;
		sine[1470]=2026;
		sine[1471]=1857;
		sine[1472]=2370;
		sine[1473]=2198;
		sine[1474]=2706;
		sine[1475]=2539;
		sine[1476]=3023;
		sine[1477]=2868;
		sine[1478]=3308;
		sine[1479]=3170;
		sine[1480]=3551;
		sine[1481]=3435;
		sine[1482]=3741;
		sine[1483]=3653;
		sine[1484]=3873;
		sine[1485]=3815;
		sine[1486]=3940;
		sine[1487]=3914;
		sine[1488]=3940;
		sine[1489]=3948;
		sine[1490]=3873;
		sine[1491]=3914;
		sine[1492]=3741;
		sine[1493]=3815;
		sine[1494]=3551;
		sine[1495]=3653;
		sine[1496]=3308;
		sine[1497]=3435;
		sine[1498]=3023;
		sine[1499]=3170;
		sine[1500]=2706;
		sine[1501]=2868;
		sine[1502]=2370;
		sine[1503]=2539;
		sine[1504]=2026;
		sine[1505]=2198;
		sine[1506]=1690;
		sine[1507]=1857;
		sine[1508]=1373;
		sine[1509]=1528;
		sine[1510]=1088;
		sine[1511]=1226;
		sine[1512]=845;
		sine[1513]=961;
		sine[1514]=655;
		sine[1515]=743;
		sine[1516]=523;
		sine[1517]=581;
		sine[1518]=456;
		sine[1519]=482;
		sine[1520]=456;
		sine[1521]=448;
		sine[1522]=523;
		sine[1523]=482;
		sine[1524]=655;
		sine[1525]=581;
		sine[1526]=845;
		sine[1527]=743;
		sine[1528]=1088;
		sine[1529]=961;
		sine[1530]=1373;
		sine[1531]=1226;
		sine[1532]=1690;
		sine[1533]=1528;
		sine[1534]=2026;
		sine[1535]=1857;
		sine[1536]=2370;
		sine[1537]=2198;
		sine[1538]=2706;
		sine[1539]=2539;
		sine[1540]=3023;
		sine[1541]=2868;
		sine[1542]=3308;
		sine[1543]=3170;
		sine[1544]=3551;
		sine[1545]=3435;
		sine[1546]=3741;
		sine[1547]=3653;
		sine[1548]=3873;
		sine[1549]=3815;
		sine[1550]=3940;
		sine[1551]=3914;
		sine[1552]=3940;
		sine[1553]=3948;
		sine[1554]=3873;
		sine[1555]=3914;
		sine[1556]=3741;
		sine[1557]=3815;
		sine[1558]=3551;
		sine[1559]=3653;
		sine[1560]=3308;
		sine[1561]=3435;
		sine[1562]=3023;
		sine[1563]=3170;
		sine[1564]=2706;
		sine[1565]=2868;
		sine[1566]=2370;
		sine[1567]=2539;
		sine[1568]=2026;
		sine[1569]=2198;
		sine[1570]=1690;
		sine[1571]=1857;
		sine[1572]=1373;
		sine[1573]=1528;
		sine[1574]=1088;
		sine[1575]=1226;
		sine[1576]=845;
		sine[1577]=961;
		sine[1578]=655;
		sine[1579]=743;
		sine[1580]=523;
		sine[1581]=581;
		sine[1582]=456;
		sine[1583]=482;
		sine[1584]=456;
		sine[1585]=448;
		sine[1586]=523;
		sine[1587]=482;
		sine[1588]=655;
		sine[1589]=581;
		sine[1590]=845;
		sine[1591]=743;
		sine[1592]=1088;
		sine[1593]=961;
		sine[1594]=1373;
		sine[1595]=1226;
		sine[1596]=1690;
		sine[1597]=1528;
		sine[1598]=2026;
		sine[1599]=1857;
		sine[1600]=2370;
		sine[1601]=2198;
		sine[1602]=2706;
		sine[1603]=2539;
		sine[1604]=3023;
		sine[1605]=2868;
		sine[1606]=3308;
		sine[1607]=3170;
		sine[1608]=3551;
		sine[1609]=3435;
		sine[1610]=3741;
		sine[1611]=3653;
		sine[1612]=3873;
		sine[1613]=3815;
		sine[1614]=3940;
		sine[1615]=3914;
		sine[1616]=3940;
		sine[1617]=3948;
		sine[1618]=3873;
		sine[1619]=3914;
		sine[1620]=3741;
		sine[1621]=3815;
		sine[1622]=3551;
		sine[1623]=3653;
		sine[1624]=3308;
		sine[1625]=3435;
		sine[1626]=3023;
		sine[1627]=3170;
		sine[1628]=2706;
		sine[1629]=2868;
		sine[1630]=2370;
		sine[1631]=2539;
		sine[1632]=2026;
		sine[1633]=2198;
		sine[1634]=1690;
		sine[1635]=1857;
		sine[1636]=1373;
		sine[1637]=1528;
		sine[1638]=1088;
		sine[1639]=1226;
		sine[1640]=845;
		sine[1641]=961;
		sine[1642]=655;
		sine[1643]=743;
		sine[1644]=523;
		sine[1645]=581;
		sine[1646]=456;
		sine[1647]=482;
		sine[1648]=456;
		sine[1649]=448;
		sine[1650]=523;
		sine[1651]=482;
		sine[1652]=655;
		sine[1653]=581;
		sine[1654]=845;
		sine[1655]=743;
		sine[1656]=1088;
		sine[1657]=961;
		sine[1658]=1373;
		sine[1659]=1226;
		sine[1660]=1690;
		sine[1661]=1528;
		sine[1662]=2026;
		sine[1663]=1857;
		sine[1664]=2370;
		sine[1665]=2198;
		sine[1666]=2706;
		sine[1667]=2539;
		sine[1668]=3023;
		sine[1669]=2868;
		sine[1670]=3308;
		sine[1671]=3170;
		sine[1672]=3551;
		sine[1673]=3435;
		sine[1674]=3741;
		sine[1675]=3653;
		sine[1676]=3873;
		sine[1677]=3815;
		sine[1678]=3940;
		sine[1679]=3914;
		sine[1680]=3940;
		sine[1681]=3948;
		sine[1682]=3873;
		sine[1683]=3914;
		sine[1684]=3741;
		sine[1685]=3815;
		sine[1686]=3551;
		sine[1687]=3653;
		sine[1688]=3308;
		sine[1689]=3435;
		sine[1690]=3023;
		sine[1691]=3170;
		sine[1692]=2706;
		sine[1693]=2868;
		sine[1694]=2370;
		sine[1695]=2539;
		sine[1696]=2026;
		sine[1697]=2198;
		sine[1698]=1690;
		sine[1699]=1857;
		sine[1700]=1373;
		sine[1701]=1528;
		sine[1702]=1088;
		sine[1703]=1226;
		sine[1704]=845;
		sine[1705]=961;
		sine[1706]=655;
		sine[1707]=743;
		sine[1708]=523;
		sine[1709]=581;
		sine[1710]=456;
		sine[1711]=482;
		sine[1712]=456;
		sine[1713]=448;
		sine[1714]=523;
		sine[1715]=482;
		sine[1716]=655;
		sine[1717]=581;
		sine[1718]=845;
		sine[1719]=743;
		sine[1720]=1088;
		sine[1721]=961;
		sine[1722]=1373;
		sine[1723]=1226;
		sine[1724]=1690;
		sine[1725]=1528;
		sine[1726]=2026;
		sine[1727]=1857;
		sine[1728]=2370;
		sine[1729]=2198;
		sine[1730]=2706;
		sine[1731]=2539;
		sine[1732]=3023;
		sine[1733]=2868;
		sine[1734]=3308;
		sine[1735]=3170;
		sine[1736]=3551;
		sine[1737]=3435;
		sine[1738]=3741;
		sine[1739]=3653;
		sine[1740]=3873;
		sine[1741]=3815;
		sine[1742]=3940;
		sine[1743]=3914;
		sine[1744]=3940;
		sine[1745]=3948;
		sine[1746]=3873;
		sine[1747]=3914;
		sine[1748]=3741;
		sine[1749]=3815;
		sine[1750]=3551;
		sine[1751]=3653;
		sine[1752]=3308;
		sine[1753]=3435;
		sine[1754]=3023;
		sine[1755]=3170;
		sine[1756]=2706;
		sine[1757]=2868;
		sine[1758]=2370;
		sine[1759]=2539;
		sine[1760]=2026;
		sine[1761]=2198;
		sine[1762]=1690;
		sine[1763]=1857;
		sine[1764]=1373;
		sine[1765]=1528;
		sine[1766]=1088;
		sine[1767]=1226;
		sine[1768]=845;
		sine[1769]=961;
		sine[1770]=655;
		sine[1771]=743;
		sine[1772]=523;
		sine[1773]=581;
		sine[1774]=456;
		sine[1775]=482;
		sine[1776]=456;
		sine[1777]=448;
		sine[1778]=523;
		sine[1779]=482;
		sine[1780]=655;
		sine[1781]=581;
		sine[1782]=845;
		sine[1783]=743;
		sine[1784]=1088;
		sine[1785]=961;
		sine[1786]=1373;
		sine[1787]=1226;
		sine[1788]=1690;
		sine[1789]=1528;
		sine[1790]=2026;
		sine[1791]=1857;
		sine[1792]=2370;
		sine[1793]=2198;
		sine[1794]=2706;
		sine[1795]=2539;
		sine[1796]=3023;
		sine[1797]=2868;
		sine[1798]=3308;
		sine[1799]=3170;
		sine[1800]=3551;
		sine[1801]=3435;
		sine[1802]=3741;
		sine[1803]=3653;
		sine[1804]=3873;
		sine[1805]=3815;
		sine[1806]=3940;
		sine[1807]=3914;
		sine[1808]=3940;
		sine[1809]=3948;
		sine[1810]=3873;
		sine[1811]=3914;
		sine[1812]=3741;
		sine[1813]=3815;
		sine[1814]=3551;
		sine[1815]=3653;
		sine[1816]=3308;
		sine[1817]=3435;
		sine[1818]=3023;
		sine[1819]=3170;
		sine[1820]=2706;
		sine[1821]=2868;
		sine[1822]=2370;
		sine[1823]=2539;
		sine[1824]=2026;
		sine[1825]=2198;
		sine[1826]=1690;
		sine[1827]=1857;
		sine[1828]=1373;
		sine[1829]=1528;
		sine[1830]=1088;
		sine[1831]=1226;
		sine[1832]=845;
		sine[1833]=961;
		sine[1834]=655;
		sine[1835]=743;
		sine[1836]=523;
		sine[1837]=581;
		sine[1838]=456;
		sine[1839]=482;
		sine[1840]=456;
		sine[1841]=448;
		sine[1842]=523;
		sine[1843]=482;
		sine[1844]=655;
		sine[1845]=581;
		sine[1846]=845;
		sine[1847]=743;
		sine[1848]=1088;
		sine[1849]=961;
		sine[1850]=1373;
		sine[1851]=1226;
		sine[1852]=1690;
		sine[1853]=1528;
		sine[1854]=2026;
		sine[1855]=1857;
		sine[1856]=2370;
		sine[1857]=2198;
		sine[1858]=2706;
		sine[1859]=2539;
		sine[1860]=3023;
		sine[1861]=2868;
		sine[1862]=3308;
		sine[1863]=3170;
		sine[1864]=3551;
		sine[1865]=3435;
		sine[1866]=3741;
		sine[1867]=3653;
		sine[1868]=3873;
		sine[1869]=3815;
		sine[1870]=3940;
		sine[1871]=3914;
		sine[1872]=3940;
		sine[1873]=3948;
		sine[1874]=3873;
		sine[1875]=3914;
		sine[1876]=3741;
		sine[1877]=3815;
		sine[1878]=3551;
		sine[1879]=3653;
		sine[1880]=3308;
		sine[1881]=3435;
		sine[1882]=3023;
		sine[1883]=3170;
		sine[1884]=2706;
		sine[1885]=2868;
		sine[1886]=2370;
		sine[1887]=2539;
		sine[1888]=2026;
		sine[1889]=2198;
		sine[1890]=1690;
		sine[1891]=1857;
		sine[1892]=1373;
		sine[1893]=1528;
		sine[1894]=1088;
		sine[1895]=1226;
		sine[1896]=845;
		sine[1897]=961;
		sine[1898]=655;
		sine[1899]=743;
		sine[1900]=523;
		sine[1901]=581;
		sine[1902]=456;
		sine[1903]=482;
		sine[1904]=456;
		sine[1905]=448;
		sine[1906]=523;
		sine[1907]=482;
		sine[1908]=655;
		sine[1909]=581;
		sine[1910]=845;
		sine[1911]=743;
		sine[1912]=1088;
		sine[1913]=961;
		sine[1914]=1373;
		sine[1915]=1226;
		sine[1916]=1690;
		sine[1917]=1528;
		sine[1918]=2026;
		sine[1919]=1857;
		sine[1920]=2370;
		sine[1921]=2198;
		sine[1922]=2706;
		sine[1923]=2539;
		sine[1924]=3023;
		sine[1925]=2868;
		sine[1926]=3308;
		sine[1927]=3170;
		sine[1928]=3551;
		sine[1929]=3435;
		sine[1930]=3741;
		sine[1931]=3653;
		sine[1932]=3873;
		sine[1933]=3815;
		sine[1934]=3940;
		sine[1935]=3914;
		sine[1936]=3940;
		sine[1937]=3948;
		sine[1938]=3873;
		sine[1939]=3914;
		sine[1940]=3741;
		sine[1941]=3815;
		sine[1942]=3551;
		sine[1943]=3653;
		sine[1944]=3308;
		sine[1945]=3435;
		sine[1946]=3023;
		sine[1947]=3170;
		sine[1948]=2706;
		sine[1949]=2868;
		sine[1950]=2370;
		sine[1951]=2539;
		sine[1952]=2026;
		sine[1953]=2198;
		sine[1954]=1690;
		sine[1955]=1857;
		sine[1956]=1373;
		sine[1957]=1528;
		sine[1958]=1088;
		sine[1959]=1226;
		sine[1960]=845;
		sine[1961]=961;
		sine[1962]=655;
		sine[1963]=743;
		sine[1964]=523;
		sine[1965]=581;
		sine[1966]=456;
		sine[1967]=482;
		sine[1968]=456;
		sine[1969]=448;
		sine[1970]=523;
		sine[1971]=482;
		sine[1972]=655;
		sine[1973]=581;
		sine[1974]=845;
		sine[1975]=743;
		sine[1976]=1088;
		sine[1977]=961;
		sine[1978]=1373;
		sine[1979]=1226;
		sine[1980]=1690;
		sine[1981]=1528;
		sine[1982]=2026;
		sine[1983]=1857;
		sine[1984]=2370;
		sine[1985]=2198;
		sine[1986]=2706;
		sine[1987]=2539;
		sine[1988]=3023;
		sine[1989]=2868;
		sine[1990]=3308;
		sine[1991]=3170;
		sine[1992]=3551;
		sine[1993]=3435;
		sine[1994]=3741;
		sine[1995]=3653;
		sine[1996]=3873;
		sine[1997]=3815;
		sine[1998]=3940;
		sine[1999]=3914;
		sine[2000]=3940;
		sine[2001]=3948;
		sine[2002]=3873;
		sine[2003]=3914;
		sine[2004]=3741;
		sine[2005]=3815;
		sine[2006]=3551;
		sine[2007]=3653;
		sine[2008]=3308;
		sine[2009]=3435;
		sine[2010]=3023;
		sine[2011]=3170;
		sine[2012]=2706;
		sine[2013]=2868;
		sine[2014]=2370;
		sine[2015]=2539;
		sine[2016]=2026;
		sine[2017]=2198;
		sine[2018]=1690;
		sine[2019]=1857;
		sine[2020]=1373;
		sine[2021]=1528;
		sine[2022]=1088;
		sine[2023]=1226;
		sine[2024]=845;
		sine[2025]=961;
		sine[2026]=655;
		sine[2027]=743;
		sine[2028]=523;
		sine[2029]=581;
		sine[2030]=456;
		sine[2031]=482;
		sine[2032]=456;
		sine[2033]=448;
		sine[2034]=523;
		sine[2035]=482;
		sine[2036]=655;
		sine[2037]=581;
		sine[2038]=845;
		sine[2039]=743;
		sine[2040]=1088;
		sine[2041]=961;
		sine[2042]=1373;
		sine[2043]=1226;
		sine[2044]=1690;
		sine[2045]=1528;
		sine[2046]=2026;
		sine[2047]=1857;
		sine[2048]=2370;
		sine[2049]=2198;
		sine[2050]=2706;
		sine[2051]=2539;
		sine[2052]=3023;
		sine[2053]=2868;
		sine[2054]=3308;
		sine[2055]=3170;
		sine[2056]=3551;
		sine[2057]=3435;
		sine[2058]=3741;
		sine[2059]=3653;
		sine[2060]=3873;
		sine[2061]=3815;
		sine[2062]=3940;
		sine[2063]=3914;
		sine[2064]=3940;
		sine[2065]=3948;
		sine[2066]=3873;
		sine[2067]=3914;
		sine[2068]=3741;
		sine[2069]=3815;
		sine[2070]=3551;
		sine[2071]=3653;
		sine[2072]=3308;
		sine[2073]=3435;
		sine[2074]=3023;
		sine[2075]=3170;
		sine[2076]=2706;
		sine[2077]=2868;
		sine[2078]=2370;
		sine[2079]=2539;
		sine[2080]=2026;
		sine[2081]=2198;
		sine[2082]=1690;
		sine[2083]=1857;
		sine[2084]=1373;
		sine[2085]=1528;
		sine[2086]=1088;
		sine[2087]=1226;
		sine[2088]=845;
		sine[2089]=961;
		sine[2090]=655;
		sine[2091]=743;
		sine[2092]=523;
		sine[2093]=581;
		sine[2094]=456;
		sine[2095]=482;
		sine[2096]=456;
		sine[2097]=448;
		sine[2098]=523;
		sine[2099]=482;
		sine[2100]=655;
		sine[2101]=581;
		sine[2102]=845;
		sine[2103]=743;
		sine[2104]=1088;
		sine[2105]=961;
		sine[2106]=1373;
		sine[2107]=1226;
		sine[2108]=1690;
		sine[2109]=1528;
		sine[2110]=2026;
		sine[2111]=1857;
		sine[2112]=2370;
		sine[2113]=2198;
		sine[2114]=2706;
		sine[2115]=2539;
		sine[2116]=3023;
		sine[2117]=2868;
		sine[2118]=3308;
		sine[2119]=3170;
		sine[2120]=3551;
		sine[2121]=3435;
		sine[2122]=3741;
		sine[2123]=3653;
		sine[2124]=3873;
		sine[2125]=3815;
		sine[2126]=3940;
		sine[2127]=3914;
		sine[2128]=3940;
		sine[2129]=3948;
		sine[2130]=3873;
		sine[2131]=3914;
		sine[2132]=3741;
		sine[2133]=3815;
		sine[2134]=3551;
		sine[2135]=3653;
		sine[2136]=3308;
		sine[2137]=3435;
		sine[2138]=3023;
		sine[2139]=3170;
		sine[2140]=2706;
		sine[2141]=2868;
		sine[2142]=2370;
		sine[2143]=2539;
		sine[2144]=2026;
		sine[2145]=2198;
		sine[2146]=1690;
		sine[2147]=1857;
		sine[2148]=1373;
		sine[2149]=1528;
		sine[2150]=1088;
		sine[2151]=1226;
		sine[2152]=845;
		sine[2153]=961;
		sine[2154]=655;
		sine[2155]=743;
		sine[2156]=523;
		sine[2157]=581;
		sine[2158]=456;
		sine[2159]=482;
		sine[2160]=456;
		sine[2161]=448;
		sine[2162]=523;
		sine[2163]=482;
		sine[2164]=655;
		sine[2165]=581;
		sine[2166]=845;
		sine[2167]=743;
		sine[2168]=1088;
		sine[2169]=961;
		sine[2170]=1373;
		sine[2171]=1226;
		sine[2172]=1690;
		sine[2173]=1528;
		sine[2174]=2026;
		sine[2175]=1857;
		sine[2176]=2370;
		sine[2177]=2198;
		sine[2178]=2706;
		sine[2179]=2539;
		sine[2180]=3023;
		sine[2181]=2868;
		sine[2182]=3308;
		sine[2183]=3170;
		sine[2184]=3551;
		sine[2185]=3435;
		sine[2186]=3741;
		sine[2187]=3653;
		sine[2188]=3873;
		sine[2189]=3815;
		sine[2190]=3940;
		sine[2191]=3914;
		sine[2192]=3940;
		sine[2193]=3948;
		sine[2194]=3873;
		sine[2195]=3914;
		sine[2196]=3741;
		sine[2197]=3815;
		sine[2198]=3551;
		sine[2199]=3653;
		sine[2200]=3308;
		sine[2201]=3435;
		sine[2202]=3023;
		sine[2203]=3170;
		sine[2204]=2706;
		sine[2205]=2868;
		sine[2206]=2370;
		sine[2207]=2539;
		sine[2208]=2026;
		sine[2209]=2198;
		sine[2210]=1690;
		sine[2211]=1857;
		sine[2212]=1373;
		sine[2213]=1528;
		sine[2214]=1088;
		sine[2215]=1226;
		sine[2216]=845;
		sine[2217]=961;
		sine[2218]=655;
		sine[2219]=743;
		sine[2220]=523;
		sine[2221]=581;
		sine[2222]=456;
		sine[2223]=482;
		sine[2224]=456;
		sine[2225]=448;
		sine[2226]=523;
		sine[2227]=482;
		sine[2228]=655;
		sine[2229]=581;
		sine[2230]=845;
		sine[2231]=743;
		sine[2232]=1088;
		sine[2233]=961;
		sine[2234]=1373;
		sine[2235]=1226;
		sine[2236]=1690;
		sine[2237]=1528;
		sine[2238]=2026;
		sine[2239]=1857;
		sine[2240]=2370;
		sine[2241]=2198;
		sine[2242]=2706;
		sine[2243]=2539;
		sine[2244]=3023;
		sine[2245]=2868;
		sine[2246]=3308;
		sine[2247]=3170;
		sine[2248]=3551;
		sine[2249]=3435;
		sine[2250]=3741;
		sine[2251]=3653;
		sine[2252]=3873;
		sine[2253]=3815;
		sine[2254]=3940;
		sine[2255]=3914;
		sine[2256]=3940;
		sine[2257]=3948;
		sine[2258]=3873;
		sine[2259]=3914;
		sine[2260]=3741;
		sine[2261]=3815;
		sine[2262]=3551;
		sine[2263]=3653;
		sine[2264]=3308;
		sine[2265]=3435;
		sine[2266]=3023;
		sine[2267]=3170;
		sine[2268]=2706;
		sine[2269]=2868;
		sine[2270]=2370;
		sine[2271]=2539;
		sine[2272]=2026;
		sine[2273]=2198;
		sine[2274]=1690;
		sine[2275]=1857;
		sine[2276]=1373;
		sine[2277]=1528;
		sine[2278]=1088;
		sine[2279]=1226;
		sine[2280]=845;
		sine[2281]=961;
		sine[2282]=655;
		sine[2283]=743;
		sine[2284]=523;
		sine[2285]=581;
		sine[2286]=456;
		sine[2287]=482;
		sine[2288]=456;
		sine[2289]=448;
		sine[2290]=523;
		sine[2291]=482;
		sine[2292]=655;
		sine[2293]=581;
		sine[2294]=845;
		sine[2295]=743;
		sine[2296]=1088;
		sine[2297]=961;
		sine[2298]=1373;
		sine[2299]=1226;
		sine[2300]=1690;
		sine[2301]=1528;
		sine[2302]=2026;
		sine[2303]=1857;
		sine[2304]=2370;
		sine[2305]=2198;
		sine[2306]=2706;
		sine[2307]=2539;
		sine[2308]=3023;
		sine[2309]=2868;
		sine[2310]=3308;
		sine[2311]=3170;
		sine[2312]=3551;
		sine[2313]=3435;
		sine[2314]=3741;
		sine[2315]=3653;
		sine[2316]=3873;
		sine[2317]=3815;
		sine[2318]=3940;
		sine[2319]=3914;
		sine[2320]=3940;
		sine[2321]=3948;
		sine[2322]=3873;
		sine[2323]=3914;
		sine[2324]=3741;
		sine[2325]=3815;
		sine[2326]=3551;
		sine[2327]=3653;
		sine[2328]=3308;
		sine[2329]=3435;
		sine[2330]=3023;
		sine[2331]=3170;
		sine[2332]=2706;
		sine[2333]=2868;
		sine[2334]=2370;
		sine[2335]=2539;
		sine[2336]=2026;
		sine[2337]=2198;
		sine[2338]=1690;
		sine[2339]=1857;
		sine[2340]=1373;
		sine[2341]=1528;
		sine[2342]=1088;
		sine[2343]=1226;
		sine[2344]=845;
		sine[2345]=961;
		sine[2346]=655;
		sine[2347]=743;
		sine[2348]=523;
		sine[2349]=581;
		sine[2350]=456;
		sine[2351]=482;
		sine[2352]=456;
		sine[2353]=448;
		sine[2354]=523;
		sine[2355]=482;
		sine[2356]=655;
		sine[2357]=581;
		sine[2358]=845;
		sine[2359]=743;
		sine[2360]=1088;
		sine[2361]=961;
		sine[2362]=1373;
		sine[2363]=1226;
		sine[2364]=1690;
		sine[2365]=1528;
		sine[2366]=2026;
		sine[2367]=1857;
		sine[2368]=2370;
		sine[2369]=2198;
		sine[2370]=2706;
		sine[2371]=2539;
		sine[2372]=3023;
		sine[2373]=2868;
		sine[2374]=3308;
		sine[2375]=3170;
		sine[2376]=3551;
		sine[2377]=3435;
		sine[2378]=3741;
		sine[2379]=3653;
		sine[2380]=3873;
		sine[2381]=3815;
		sine[2382]=3940;
		sine[2383]=3914;
		sine[2384]=3940;
		sine[2385]=3948;
		sine[2386]=3873;
		sine[2387]=3914;
		sine[2388]=3741;
		sine[2389]=3815;
		sine[2390]=3551;
		sine[2391]=3653;
		sine[2392]=3308;
		sine[2393]=3435;
		sine[2394]=3023;
		sine[2395]=3170;
		sine[2396]=2706;
		sine[2397]=2868;
		sine[2398]=2370;
		sine[2399]=2539;
		sine[2400]=2026;
		sine[2401]=2198;
		sine[2402]=1690;
		sine[2403]=1857;
		sine[2404]=1373;
		sine[2405]=1528;
		sine[2406]=1088;
		sine[2407]=1226;
		sine[2408]=845;
		sine[2409]=961;
		sine[2410]=655;
		sine[2411]=743;
		sine[2412]=523;
		sine[2413]=581;
		sine[2414]=456;
		sine[2415]=482;
		sine[2416]=456;
		sine[2417]=448;
		sine[2418]=523;
		sine[2419]=482;
		sine[2420]=655;
		sine[2421]=581;
		sine[2422]=845;
		sine[2423]=743;
		sine[2424]=1088;
		sine[2425]=961;
		sine[2426]=1373;
		sine[2427]=1226;
		sine[2428]=1690;
		sine[2429]=1528;
		sine[2430]=2026;
		sine[2431]=1857;
		sine[2432]=2370;
		sine[2433]=2198;
		sine[2434]=2706;
		sine[2435]=2539;
		sine[2436]=3023;
		sine[2437]=2868;
		sine[2438]=3308;
		sine[2439]=3170;
		sine[2440]=3551;
		sine[2441]=3435;
		sine[2442]=3741;
		sine[2443]=3653;
		sine[2444]=3873;
		sine[2445]=3815;
		sine[2446]=3940;
		sine[2447]=3914;
		sine[2448]=3940;
		sine[2449]=3948;
		sine[2450]=3873;
		sine[2451]=3914;
		sine[2452]=3741;
		sine[2453]=3815;
		sine[2454]=3551;
		sine[2455]=3653;
		sine[2456]=3308;
		sine[2457]=3435;
		sine[2458]=3023;
		sine[2459]=3170;
		sine[2460]=2706;
		sine[2461]=2868;
		sine[2462]=2370;
		sine[2463]=2539;
		sine[2464]=2026;
		sine[2465]=2198;
		sine[2466]=1690;
		sine[2467]=1857;
		sine[2468]=1373;
		sine[2469]=1528;
		sine[2470]=1088;
		sine[2471]=1226;
		sine[2472]=845;
		sine[2473]=961;
		sine[2474]=655;
		sine[2475]=743;
		sine[2476]=523;
		sine[2477]=581;
		sine[2478]=456;
		sine[2479]=482;
		sine[2480]=456;
		sine[2481]=448;
		sine[2482]=523;
		sine[2483]=482;
		sine[2484]=655;
		sine[2485]=581;
		sine[2486]=845;
		sine[2487]=743;
		sine[2488]=1088;
		sine[2489]=961;
		sine[2490]=1373;
		sine[2491]=1226;
		sine[2492]=1690;
		sine[2493]=1528;
		sine[2494]=2026;
		sine[2495]=1857;
		sine[2496]=2370;
		sine[2497]=2198;
		sine[2498]=2706;
		sine[2499]=2539;
		sine[2500]=3023;
		sine[2501]=2868;
		sine[2502]=3308;
		sine[2503]=3170;
		sine[2504]=3551;
		sine[2505]=3435;
		sine[2506]=3741;
		sine[2507]=3653;
		sine[2508]=3873;
		sine[2509]=3815;
		sine[2510]=3940;
		sine[2511]=3914;
		sine[2512]=3940;
		sine[2513]=3948;
		sine[2514]=3873;
		sine[2515]=3914;
		sine[2516]=3741;
		sine[2517]=3815;
		sine[2518]=3551;
		sine[2519]=3653;
		sine[2520]=3308;
		sine[2521]=3435;
		sine[2522]=3023;
		sine[2523]=3170;
		sine[2524]=2706;
		sine[2525]=2868;
		sine[2526]=2370;
		sine[2527]=2539;
		sine[2528]=2026;
		sine[2529]=2198;
		sine[2530]=1690;
		sine[2531]=1857;
		sine[2532]=1373;
		sine[2533]=1528;
		sine[2534]=1088;
		sine[2535]=1226;
		sine[2536]=845;
		sine[2537]=961;
		sine[2538]=655;
		sine[2539]=743;
		sine[2540]=523;
		sine[2541]=581;
		sine[2542]=456;
		sine[2543]=482;
		sine[2544]=456;
		sine[2545]=448;
		sine[2546]=523;
		sine[2547]=482;
		sine[2548]=655;
		sine[2549]=581;
		sine[2550]=845;
		sine[2551]=743;
		sine[2552]=1088;
		sine[2553]=961;
		sine[2554]=1373;
		sine[2555]=1226;
		sine[2556]=1690;
		sine[2557]=1528;
		sine[2558]=2026;
		sine[2559]=1857;
		sine[2560]=2370;
		sine[2561]=2198;
		sine[2562]=2706;
		sine[2563]=2539;
		sine[2564]=3023;
		sine[2565]=2868;
		sine[2566]=3308;
		sine[2567]=3170;
		sine[2568]=3551;
		sine[2569]=3435;
		sine[2570]=3741;
		sine[2571]=3653;
		sine[2572]=3873;
		sine[2573]=3815;
		sine[2574]=3940;
		sine[2575]=3914;
		sine[2576]=3940;
		sine[2577]=3948;
		sine[2578]=3873;
		sine[2579]=3914;
		sine[2580]=3741;
		sine[2581]=3815;
		sine[2582]=3551;
		sine[2583]=3653;
		sine[2584]=3308;
		sine[2585]=3435;
		sine[2586]=3023;
		sine[2587]=3170;
		sine[2588]=2706;
		sine[2589]=2868;
		sine[2590]=2370;
		sine[2591]=2539;
		sine[2592]=2026;
		sine[2593]=2198;
		sine[2594]=1690;
		sine[2595]=1857;
		sine[2596]=1373;
		sine[2597]=1528;
		sine[2598]=1088;
		sine[2599]=1226;
		sine[2600]=845;
		sine[2601]=961;
		sine[2602]=655;
		sine[2603]=743;
		sine[2604]=523;
		sine[2605]=581;
		sine[2606]=456;
		sine[2607]=482;
		sine[2608]=456;
		sine[2609]=448;
		sine[2610]=523;
		sine[2611]=482;
		sine[2612]=655;
		sine[2613]=581;
		sine[2614]=845;
		sine[2615]=743;
		sine[2616]=1088;
		sine[2617]=961;
		sine[2618]=1373;
		sine[2619]=1226;
		sine[2620]=1690;
		sine[2621]=1528;
		sine[2622]=2026;
		sine[2623]=1857;
		sine[2624]=2370;
		sine[2625]=2198;
		sine[2626]=2706;
		sine[2627]=2539;
		sine[2628]=3023;
		sine[2629]=2868;
		sine[2630]=3308;
		sine[2631]=3170;
		sine[2632]=3551;
		sine[2633]=3435;
		sine[2634]=3741;
		sine[2635]=3653;
		sine[2636]=3873;
		sine[2637]=3815;
		sine[2638]=3940;
		sine[2639]=3914;
		sine[2640]=3940;
		sine[2641]=3948;
		sine[2642]=3873;
		sine[2643]=3914;
		sine[2644]=3741;
		sine[2645]=3815;
		sine[2646]=3551;
		sine[2647]=3653;
		sine[2648]=3308;
		sine[2649]=3435;
		sine[2650]=3023;
		sine[2651]=3170;
		sine[2652]=2706;
		sine[2653]=2868;
		sine[2654]=2370;
		sine[2655]=2539;
		sine[2656]=2026;
		sine[2657]=2198;
		sine[2658]=1690;
		sine[2659]=1857;
		sine[2660]=1373;
		sine[2661]=1528;
		sine[2662]=1088;
		sine[2663]=1226;
		sine[2664]=845;
		sine[2665]=961;
		sine[2666]=655;
		sine[2667]=743;
		sine[2668]=523;
		sine[2669]=581;
		sine[2670]=456;
		sine[2671]=482;
		sine[2672]=456;
		sine[2673]=448;
		sine[2674]=523;
		sine[2675]=482;
		sine[2676]=655;
		sine[2677]=581;
		sine[2678]=845;
		sine[2679]=743;
		sine[2680]=1088;
		sine[2681]=961;
		sine[2682]=1373;
		sine[2683]=1226;
		sine[2684]=1690;
		sine[2685]=1528;
		sine[2686]=2026;
		sine[2687]=1857;
		sine[2688]=2370;
		sine[2689]=2198;
		sine[2690]=2706;
		sine[2691]=2539;
		sine[2692]=3023;
		sine[2693]=2868;
		sine[2694]=3308;
		sine[2695]=3170;
		sine[2696]=3551;
		sine[2697]=3435;
		sine[2698]=3741;
		sine[2699]=3653;
		sine[2700]=3873;
		sine[2701]=3815;
		sine[2702]=3940;
		sine[2703]=3914;
		sine[2704]=3940;
		sine[2705]=3948;
		sine[2706]=3873;
		sine[2707]=3914;
		sine[2708]=3741;
		sine[2709]=3815;
		sine[2710]=3551;
		sine[2711]=3653;
		sine[2712]=3308;
		sine[2713]=3435;
		sine[2714]=3023;
		sine[2715]=3170;
		sine[2716]=2706;
		sine[2717]=2868;
		sine[2718]=2370;
		sine[2719]=2539;
		sine[2720]=2026;
		sine[2721]=2198;
		sine[2722]=1690;
		sine[2723]=1857;
		sine[2724]=1373;
		sine[2725]=1528;
		sine[2726]=1088;
		sine[2727]=1226;
		sine[2728]=845;
		sine[2729]=961;
		sine[2730]=655;
		sine[2731]=743;
		sine[2732]=523;
		sine[2733]=581;
		sine[2734]=456;
		sine[2735]=482;
		sine[2736]=456;
		sine[2737]=448;
		sine[2738]=523;
		sine[2739]=482;
		sine[2740]=655;
		sine[2741]=581;
		sine[2742]=845;
		sine[2743]=743;
		sine[2744]=1088;
		sine[2745]=961;
		sine[2746]=1373;
		sine[2747]=1226;
		sine[2748]=1690;
		sine[2749]=1528;
		sine[2750]=2026;
		sine[2751]=1857;
		sine[2752]=2370;
		sine[2753]=2198;
		sine[2754]=2706;
		sine[2755]=2539;
		sine[2756]=3023;
		sine[2757]=2868;
		sine[2758]=3308;
		sine[2759]=3170;
		sine[2760]=3551;
		sine[2761]=3435;
		sine[2762]=3741;
		sine[2763]=3653;
		sine[2764]=3873;
		sine[2765]=3815;
		sine[2766]=3940;
		sine[2767]=3914;
		sine[2768]=3940;
		sine[2769]=3948;
		sine[2770]=3873;
		sine[2771]=3914;
		sine[2772]=3741;
		sine[2773]=3815;
		sine[2774]=3551;
		sine[2775]=3653;
		sine[2776]=3308;
		sine[2777]=3435;
		sine[2778]=3023;
		sine[2779]=3170;
		sine[2780]=2706;
		sine[2781]=2868;
		sine[2782]=2370;
		sine[2783]=2539;
		sine[2784]=2026;
		sine[2785]=2198;
		sine[2786]=1690;
		sine[2787]=1857;
		sine[2788]=1373;
		sine[2789]=1528;
		sine[2790]=1088;
		sine[2791]=1226;
		sine[2792]=845;
		sine[2793]=961;
		sine[2794]=655;
		sine[2795]=743;
		sine[2796]=523;
		sine[2797]=581;
		sine[2798]=456;
		sine[2799]=482;
		sine[2800]=456;
		sine[2801]=448;
		sine[2802]=523;
		sine[2803]=482;
		sine[2804]=655;
		sine[2805]=581;
		sine[2806]=845;
		sine[2807]=743;
		sine[2808]=1088;
		sine[2809]=961;
		sine[2810]=1373;
		sine[2811]=1226;
		sine[2812]=1690;
		sine[2813]=1528;
		sine[2814]=2026;
		sine[2815]=1857;
		sine[2816]=2370;
		sine[2817]=2198;
		sine[2818]=2706;
		sine[2819]=2539;
		sine[2820]=3023;
		sine[2821]=2868;
		sine[2822]=3308;
		sine[2823]=3170;
		sine[2824]=3551;
		sine[2825]=3435;
		sine[2826]=3741;
		sine[2827]=3653;
		sine[2828]=3873;
		sine[2829]=3815;
		sine[2830]=3940;
		sine[2831]=3914;
		sine[2832]=3940;
		sine[2833]=3948;
		sine[2834]=3873;
		sine[2835]=3914;
		sine[2836]=3741;
		sine[2837]=3815;
		sine[2838]=3551;
		sine[2839]=3653;
		sine[2840]=3308;
		sine[2841]=3435;
		sine[2842]=3023;
		sine[2843]=3170;
		sine[2844]=2706;
		sine[2845]=2868;
		sine[2846]=2370;
		sine[2847]=2539;
		sine[2848]=2026;
		sine[2849]=2198;
		sine[2850]=1690;
		sine[2851]=1857;
		sine[2852]=1373;
		sine[2853]=1528;
		sine[2854]=1088;
		sine[2855]=1226;
		sine[2856]=845;
		sine[2857]=961;
		sine[2858]=655;
		sine[2859]=743;
		sine[2860]=523;
		sine[2861]=581;
		sine[2862]=456;
		sine[2863]=482;
		sine[2864]=456;
		sine[2865]=448;
		sine[2866]=523;
		sine[2867]=482;
		sine[2868]=655;
		sine[2869]=581;
		sine[2870]=845;
		sine[2871]=743;
		sine[2872]=1088;
		sine[2873]=961;
		sine[2874]=1373;
		sine[2875]=1226;
		sine[2876]=1690;
		sine[2877]=1528;
		sine[2878]=2026;
		sine[2879]=1857;
		sine[2880]=2370;
		sine[2881]=2198;
		sine[2882]=2706;
		sine[2883]=2539;
		sine[2884]=3023;
		sine[2885]=2868;
		sine[2886]=3308;
		sine[2887]=3170;
		sine[2888]=3551;
		sine[2889]=3435;
		sine[2890]=3741;
		sine[2891]=3653;
		sine[2892]=3873;
		sine[2893]=3815;
		sine[2894]=3940;
		sine[2895]=3914;
		sine[2896]=3940;
		sine[2897]=3948;
		sine[2898]=3873;
		sine[2899]=3914;
		sine[2900]=3741;
		sine[2901]=3815;
		sine[2902]=3551;
		sine[2903]=3653;
		sine[2904]=3308;
		sine[2905]=3435;
		sine[2906]=3023;
		sine[2907]=3170;
		sine[2908]=2706;
		sine[2909]=2868;
		sine[2910]=2370;
		sine[2911]=2539;
		sine[2912]=2026;
		sine[2913]=2198;
		sine[2914]=1690;
		sine[2915]=1857;
		sine[2916]=1373;
		sine[2917]=1528;
		sine[2918]=1088;
		sine[2919]=1226;
		sine[2920]=845;
		sine[2921]=961;
		sine[2922]=655;
		sine[2923]=743;
		sine[2924]=523;
		sine[2925]=581;
		sine[2926]=456;
		sine[2927]=482;
		sine[2928]=456;
		sine[2929]=448;
		sine[2930]=523;
		sine[2931]=482;
		sine[2932]=655;
		sine[2933]=581;
		sine[2934]=845;
		sine[2935]=743;
		sine[2936]=1088;
		sine[2937]=961;
		sine[2938]=1373;
		sine[2939]=1226;
		sine[2940]=1690;
		sine[2941]=1528;
		sine[2942]=2026;
		sine[2943]=1857;
		sine[2944]=2370;
		sine[2945]=2198;
		sine[2946]=2706;
		sine[2947]=2539;
		sine[2948]=3023;
		sine[2949]=2868;
		sine[2950]=3308;
		sine[2951]=3170;
		sine[2952]=3551;
		sine[2953]=3435;
		sine[2954]=3741;
		sine[2955]=3653;
		sine[2956]=3873;
		sine[2957]=3815;
		sine[2958]=3940;
		sine[2959]=3914;
		sine[2960]=3940;
		sine[2961]=3948;
		sine[2962]=3873;
		sine[2963]=3914;
		sine[2964]=3741;
		sine[2965]=3815;
		sine[2966]=3551;
		sine[2967]=3653;
		sine[2968]=3308;
		sine[2969]=3435;
		sine[2970]=3023;
		sine[2971]=3170;
		sine[2972]=2706;
		sine[2973]=2868;
		sine[2974]=2370;
		sine[2975]=2539;
		sine[2976]=2026;
		sine[2977]=2198;
		sine[2978]=1690;
		sine[2979]=1857;
		sine[2980]=1373;
		sine[2981]=1528;
		sine[2982]=1088;
		sine[2983]=1226;
		sine[2984]=845;
		sine[2985]=961;
		sine[2986]=655;
		sine[2987]=743;
		sine[2988]=523;
		sine[2989]=581;
		sine[2990]=456;
		sine[2991]=482;
		sine[2992]=456;
		sine[2993]=448;
		sine[2994]=523;
		sine[2995]=482;
		sine[2996]=655;
		sine[2997]=581;
		sine[2998]=845;
		sine[2999]=743;
		sine[3000]=1088;
		sine[3001]=961;
		sine[3002]=1373;
		sine[3003]=1226;
		sine[3004]=1690;
		sine[3005]=1528;
		sine[3006]=2026;
		sine[3007]=1857;
		sine[3008]=2370;
		sine[3009]=2198;
		sine[3010]=2706;
		sine[3011]=2539;
		sine[3012]=3023;
		sine[3013]=2868;
		sine[3014]=3308;
		sine[3015]=3170;
		sine[3016]=3551;
		sine[3017]=3435;
		sine[3018]=3741;
		sine[3019]=3653;
		sine[3020]=3873;
		sine[3021]=3815;
		sine[3022]=3940;
		sine[3023]=3914;
		sine[3024]=3940;
		sine[3025]=3948;
		sine[3026]=3873;
		sine[3027]=3914;
		sine[3028]=3741;
		sine[3029]=3815;
		sine[3030]=3551;
		sine[3031]=3653;
		sine[3032]=3308;
		sine[3033]=3435;
		sine[3034]=3023;
		sine[3035]=3170;
		sine[3036]=2706;
		sine[3037]=2868;
		sine[3038]=2370;
		sine[3039]=2539;
		sine[3040]=2026;
		sine[3041]=2198;
		sine[3042]=1690;
		sine[3043]=1857;
		sine[3044]=1373;
		sine[3045]=1528;
		sine[3046]=1088;
		sine[3047]=1226;
		sine[3048]=845;
		sine[3049]=961;
		sine[3050]=655;
		sine[3051]=743;
		sine[3052]=523;
		sine[3053]=581;
		sine[3054]=456;
		sine[3055]=482;
		sine[3056]=456;
		sine[3057]=448;
		sine[3058]=523;
		sine[3059]=482;
		sine[3060]=655;
		sine[3061]=581;
		sine[3062]=845;
		sine[3063]=743;
		sine[3064]=1088;
		sine[3065]=961;
		sine[3066]=1373;
		sine[3067]=1226;
		sine[3068]=1690;
		sine[3069]=1528;
		sine[3070]=2026;
		sine[3071]=1857;
		sine[3072]=2370;
		sine[3073]=2198;
		sine[3074]=2706;
		sine[3075]=2539;
		sine[3076]=3023;
		sine[3077]=2868;
		sine[3078]=3308;
		sine[3079]=3170;
		sine[3080]=3551;
		sine[3081]=3435;
		sine[3082]=3741;
		sine[3083]=3653;
		sine[3084]=3873;
		sine[3085]=3815;
		sine[3086]=3940;
		sine[3087]=3914;
		sine[3088]=3940;
		sine[3089]=3948;
		sine[3090]=3873;
		sine[3091]=3914;
		sine[3092]=3741;
		sine[3093]=3815;
		sine[3094]=3551;
		sine[3095]=3653;
		sine[3096]=3308;
		sine[3097]=3435;
		sine[3098]=3023;
		sine[3099]=3170;
		sine[3100]=2706;
		sine[3101]=2868;
		sine[3102]=2370;
		sine[3103]=2539;
		sine[3104]=2026;
		sine[3105]=2198;
		sine[3106]=1690;
		sine[3107]=1857;
		sine[3108]=1373;
		sine[3109]=1528;
		sine[3110]=1088;
		sine[3111]=1226;
		sine[3112]=845;
		sine[3113]=961;
		sine[3114]=655;
		sine[3115]=743;
		sine[3116]=523;
		sine[3117]=581;
		sine[3118]=456;
		sine[3119]=482;
		sine[3120]=456;
		sine[3121]=448;
		sine[3122]=523;
		sine[3123]=482;
		sine[3124]=655;
		sine[3125]=581;
		sine[3126]=845;
		sine[3127]=743;
		sine[3128]=1088;
		sine[3129]=961;
		sine[3130]=1373;
		sine[3131]=1226;
		sine[3132]=1690;
		sine[3133]=1528;
		sine[3134]=2026;
		sine[3135]=1857;
		sine[3136]=2370;
		sine[3137]=2198;
		sine[3138]=2706;
		sine[3139]=2539;
		sine[3140]=3023;
		sine[3141]=2868;
		sine[3142]=3308;
		sine[3143]=3170;
		sine[3144]=3551;
		sine[3145]=3435;
		sine[3146]=3741;
		sine[3147]=3653;
		sine[3148]=3873;
		sine[3149]=3815;
		sine[3150]=3940;
		sine[3151]=3914;
		sine[3152]=3940;
		sine[3153]=3948;
		sine[3154]=3873;
		sine[3155]=3914;
		sine[3156]=3741;
		sine[3157]=3815;
		sine[3158]=3551;
		sine[3159]=3653;
		sine[3160]=3308;
		sine[3161]=3435;
		sine[3162]=3023;
		sine[3163]=3170;
		sine[3164]=2706;
		sine[3165]=2868;
		sine[3166]=2370;
		sine[3167]=2539;
		sine[3168]=2026;
		sine[3169]=2198;
		sine[3170]=1690;
		sine[3171]=1857;
		sine[3172]=1373;
		sine[3173]=1528;
		sine[3174]=1088;
		sine[3175]=1226;
		sine[3176]=845;
		sine[3177]=961;
		sine[3178]=655;
		sine[3179]=743;
		sine[3180]=523;
		sine[3181]=581;
		sine[3182]=456;
		sine[3183]=482;
		sine[3184]=456;
		sine[3185]=448;
		sine[3186]=523;
		sine[3187]=482;
		sine[3188]=655;
		sine[3189]=581;
		sine[3190]=845;
		sine[3191]=743;
		sine[3192]=1088;
		sine[3193]=961;
		sine[3194]=1373;
		sine[3195]=1226;
		sine[3196]=1690;
		sine[3197]=1528;
		sine[3198]=2026;
		sine[3199]=1857;
		sine[3200]=2370;
		sine[3201]=2198;
		sine[3202]=2706;
		sine[3203]=2539;
		sine[3204]=3023;
		sine[3205]=2868;
		sine[3206]=3308;
		sine[3207]=3170;
		sine[3208]=3551;
		sine[3209]=3435;
		sine[3210]=3741;
		sine[3211]=3653;
		sine[3212]=3873;
		sine[3213]=3815;
		sine[3214]=3940;
		sine[3215]=3914;
		sine[3216]=3940;
		sine[3217]=3948;
		sine[3218]=3873;
		sine[3219]=3914;
		sine[3220]=3741;
		sine[3221]=3815;
		sine[3222]=3551;
		sine[3223]=3653;
		sine[3224]=3308;
		sine[3225]=3435;
		sine[3226]=3023;
		sine[3227]=3170;
		sine[3228]=2706;
		sine[3229]=2868;
		sine[3230]=2370;
		sine[3231]=2539;
		sine[3232]=2026;
		sine[3233]=2198;
		sine[3234]=1690;
		sine[3235]=1857;
		sine[3236]=1373;
		sine[3237]=1528;
		sine[3238]=1088;
		sine[3239]=1226;
		sine[3240]=845;
		sine[3241]=961;
		sine[3242]=655;
		sine[3243]=743;
		sine[3244]=523;
		sine[3245]=581;
		sine[3246]=456;
		sine[3247]=482;
		sine[3248]=456;
		sine[3249]=448;
		sine[3250]=523;
		sine[3251]=482;
		sine[3252]=655;
		sine[3253]=581;
		sine[3254]=845;
		sine[3255]=743;
		sine[3256]=1088;
		sine[3257]=961;
		sine[3258]=1373;
		sine[3259]=1226;
		sine[3260]=1690;
		sine[3261]=1528;
		sine[3262]=2026;
		sine[3263]=1857;
		sine[3264]=2370;
		sine[3265]=2198;
		sine[3266]=2706;
		sine[3267]=2539;
		sine[3268]=3023;
		sine[3269]=2868;
		sine[3270]=3308;
		sine[3271]=3170;
		sine[3272]=3551;
		sine[3273]=3435;
		sine[3274]=3741;
		sine[3275]=3653;
		sine[3276]=3873;
		sine[3277]=3815;
		sine[3278]=3940;
		sine[3279]=3914;
		sine[3280]=3940;
		sine[3281]=3948;
		sine[3282]=3873;
		sine[3283]=3914;
		sine[3284]=3741;
		sine[3285]=3815;
		sine[3286]=3551;
		sine[3287]=3653;
		sine[3288]=3308;
		sine[3289]=3435;
		sine[3290]=3023;
		sine[3291]=3170;
		sine[3292]=2706;
		sine[3293]=2868;
		sine[3294]=2370;
		sine[3295]=2539;
		sine[3296]=2026;
		sine[3297]=2198;
		sine[3298]=1690;
		sine[3299]=1857;
		sine[3300]=1373;
		sine[3301]=1528;
		sine[3302]=1088;
		sine[3303]=1226;
		sine[3304]=845;
		sine[3305]=961;
		sine[3306]=655;
		sine[3307]=743;
		sine[3308]=523;
		sine[3309]=581;
		sine[3310]=456;
		sine[3311]=482;
		sine[3312]=456;
		sine[3313]=448;
		sine[3314]=523;
		sine[3315]=482;
		sine[3316]=655;
		sine[3317]=581;
		sine[3318]=845;
		sine[3319]=743;
		sine[3320]=1088;
		sine[3321]=961;
		sine[3322]=1373;
		sine[3323]=1226;
		sine[3324]=1690;
		sine[3325]=1528;
		sine[3326]=2026;
		sine[3327]=1857;
		sine[3328]=2370;
		sine[3329]=2198;
		sine[3330]=2706;
		sine[3331]=2539;
		sine[3332]=3023;
		sine[3333]=2868;
		sine[3334]=3308;
		sine[3335]=3170;
		sine[3336]=3551;
		sine[3337]=3435;
		sine[3338]=3741;
		sine[3339]=3653;
		sine[3340]=3873;
		sine[3341]=3815;
		sine[3342]=3940;
		sine[3343]=3914;
		sine[3344]=3940;
		sine[3345]=3948;
		sine[3346]=3873;
		sine[3347]=3914;
		sine[3348]=3741;
		sine[3349]=3815;
		sine[3350]=3551;
		sine[3351]=3653;
		sine[3352]=3308;
		sine[3353]=3435;
		sine[3354]=3023;
		sine[3355]=3170;
		sine[3356]=2706;
		sine[3357]=2868;
		sine[3358]=2370;
		sine[3359]=2539;
		sine[3360]=2026;
		sine[3361]=2198;
		sine[3362]=1690;
		sine[3363]=1857;
		sine[3364]=1373;
		sine[3365]=1528;
		sine[3366]=1088;
		sine[3367]=1226;
		sine[3368]=845;
		sine[3369]=961;
		sine[3370]=655;
		sine[3371]=743;
		sine[3372]=523;
		sine[3373]=581;
		sine[3374]=456;
		sine[3375]=482;
		sine[3376]=456;
		sine[3377]=448;
		sine[3378]=523;
		sine[3379]=482;
		sine[3380]=655;
		sine[3381]=581;
		sine[3382]=845;
		sine[3383]=743;
		sine[3384]=1088;
		sine[3385]=961;
		sine[3386]=1373;
		sine[3387]=1226;
		sine[3388]=1690;
		sine[3389]=1528;
		sine[3390]=2026;
		sine[3391]=1857;
		sine[3392]=2370;
		sine[3393]=2198;
		sine[3394]=2706;
		sine[3395]=2539;
		sine[3396]=3023;
		sine[3397]=2868;
		sine[3398]=3308;
		sine[3399]=3170;
		sine[3400]=3551;
		sine[3401]=3435;
		sine[3402]=3741;
		sine[3403]=3653;
		sine[3404]=3873;
		sine[3405]=3815;
		sine[3406]=3940;
		sine[3407]=3914;
		sine[3408]=3940;
		sine[3409]=3948;
		sine[3410]=3873;
		sine[3411]=3914;
		sine[3412]=3741;
		sine[3413]=3815;
		sine[3414]=3551;
		sine[3415]=3653;
		sine[3416]=3308;
		sine[3417]=3435;
		sine[3418]=3023;
		sine[3419]=3170;
		sine[3420]=2706;
		sine[3421]=2868;
		sine[3422]=2370;
		sine[3423]=2539;
		sine[3424]=2026;
		sine[3425]=2198;
		sine[3426]=1690;
		sine[3427]=1857;
		sine[3428]=1373;
		sine[3429]=1528;
		sine[3430]=1088;
		sine[3431]=1226;
		sine[3432]=845;
		sine[3433]=961;
		sine[3434]=655;
		sine[3435]=743;
		sine[3436]=523;
		sine[3437]=581;
		sine[3438]=456;
		sine[3439]=482;
		sine[3440]=456;
		sine[3441]=448;
		sine[3442]=523;
		sine[3443]=482;
		sine[3444]=655;
		sine[3445]=581;
		sine[3446]=845;
		sine[3447]=743;
		sine[3448]=1088;
		sine[3449]=961;
		sine[3450]=1373;
		sine[3451]=1226;
		sine[3452]=1690;
		sine[3453]=1528;
		sine[3454]=2026;
		sine[3455]=1857;
		sine[3456]=2370;
		sine[3457]=2198;
		sine[3458]=2706;
		sine[3459]=2539;
		sine[3460]=3023;
		sine[3461]=2868;
		sine[3462]=3308;
		sine[3463]=3170;
		sine[3464]=3551;
		sine[3465]=3435;
		sine[3466]=3741;
		sine[3467]=3653;
		sine[3468]=3873;
		sine[3469]=3815;
		sine[3470]=3940;
		sine[3471]=3914;
		sine[3472]=3940;
		sine[3473]=3948;
		sine[3474]=3873;
		sine[3475]=3914;
		sine[3476]=3741;
		sine[3477]=3815;
		sine[3478]=3551;
		sine[3479]=3653;
		sine[3480]=3308;
		sine[3481]=3435;
		sine[3482]=3023;
		sine[3483]=3170;
		sine[3484]=2706;
		sine[3485]=2868;
		sine[3486]=2370;
		sine[3487]=2539;
		sine[3488]=2026;
		sine[3489]=2198;
		sine[3490]=1690;
		sine[3491]=1857;
		sine[3492]=1373;
		sine[3493]=1528;
		sine[3494]=1088;
		sine[3495]=1226;
		sine[3496]=845;
		sine[3497]=961;
		sine[3498]=655;
		sine[3499]=743;
		sine[3500]=523;
		sine[3501]=581;
		sine[3502]=456;
		sine[3503]=482;
		sine[3504]=456;
		sine[3505]=448;
		sine[3506]=523;
		sine[3507]=482;
		sine[3508]=655;
		sine[3509]=581;
		sine[3510]=845;
		sine[3511]=743;
		sine[3512]=1088;
		sine[3513]=961;
		sine[3514]=1373;
		sine[3515]=1226;
		sine[3516]=1690;
		sine[3517]=1528;
		sine[3518]=2026;
		sine[3519]=1857;
		sine[3520]=2370;
		sine[3521]=2198;
		sine[3522]=2706;
		sine[3523]=2539;
		sine[3524]=3023;
		sine[3525]=2868;
		sine[3526]=3308;
		sine[3527]=3170;
		sine[3528]=3551;
		sine[3529]=3435;
		sine[3530]=3741;
		sine[3531]=3653;
		sine[3532]=3873;
		sine[3533]=3815;
		sine[3534]=3940;
		sine[3535]=3914;
		sine[3536]=3940;
		sine[3537]=3948;
		sine[3538]=3873;
		sine[3539]=3914;
		sine[3540]=3741;
		sine[3541]=3815;
		sine[3542]=3551;
		sine[3543]=3653;
		sine[3544]=3308;
		sine[3545]=3435;
		sine[3546]=3023;
		sine[3547]=3170;
		sine[3548]=2706;
		sine[3549]=2868;
		sine[3550]=2370;
		sine[3551]=2539;
		sine[3552]=2026;
		sine[3553]=2198;
		sine[3554]=1690;
		sine[3555]=1857;
		sine[3556]=1373;
		sine[3557]=1528;
		sine[3558]=1088;
		sine[3559]=1226;
		sine[3560]=845;
		sine[3561]=961;
		sine[3562]=655;
		sine[3563]=743;
		sine[3564]=523;
		sine[3565]=581;
		sine[3566]=456;
		sine[3567]=482;
		sine[3568]=456;
		sine[3569]=448;
		sine[3570]=523;
		sine[3571]=482;
		sine[3572]=655;
		sine[3573]=581;
		sine[3574]=845;
		sine[3575]=743;
		sine[3576]=1088;
		sine[3577]=961;
		sine[3578]=1373;
		sine[3579]=1226;
		sine[3580]=1690;
		sine[3581]=1528;
		sine[3582]=2026;
		sine[3583]=1857;
		sine[3584]=2370;
		sine[3585]=2198;
		sine[3586]=2706;
		sine[3587]=2539;
		sine[3588]=3023;
		sine[3589]=2868;
		sine[3590]=3308;
		sine[3591]=3170;
		sine[3592]=3551;
		sine[3593]=3435;
		sine[3594]=3741;
		sine[3595]=3653;
		sine[3596]=3873;
		sine[3597]=3815;
		sine[3598]=3940;
		sine[3599]=3914;
		sine[3600]=3940;
		sine[3601]=3948;
		sine[3602]=3873;
		sine[3603]=3914;
		sine[3604]=3741;
		sine[3605]=3815;
		sine[3606]=3551;
		sine[3607]=3653;
		sine[3608]=3308;
		sine[3609]=3435;
		sine[3610]=3023;
		sine[3611]=3170;
		sine[3612]=2706;
		sine[3613]=2868;
		sine[3614]=2370;
		sine[3615]=2539;
		sine[3616]=2026;
		sine[3617]=2198;
		sine[3618]=1690;
		sine[3619]=1857;
		sine[3620]=1373;
		sine[3621]=1528;
		sine[3622]=1088;
		sine[3623]=1226;
		sine[3624]=845;
		sine[3625]=961;
		sine[3626]=655;
		sine[3627]=743;
		sine[3628]=523;
		sine[3629]=581;
		sine[3630]=456;
		sine[3631]=482;
		sine[3632]=456;
		sine[3633]=448;
		sine[3634]=523;
		sine[3635]=482;
		sine[3636]=655;
		sine[3637]=581;
		sine[3638]=845;
		sine[3639]=743;
		sine[3640]=1088;
		sine[3641]=961;
		sine[3642]=1373;
		sine[3643]=1226;
		sine[3644]=1690;
		sine[3645]=1528;
		sine[3646]=2026;
		sine[3647]=1857;
		sine[3648]=2370;
		sine[3649]=2198;
		sine[3650]=2706;
		sine[3651]=2539;
		sine[3652]=3023;
		sine[3653]=2868;
		sine[3654]=3308;
		sine[3655]=3170;
		sine[3656]=3551;
		sine[3657]=3435;
		sine[3658]=3741;
		sine[3659]=3653;
		sine[3660]=3873;
		sine[3661]=3815;
		sine[3662]=3940;
		sine[3663]=3914;
		sine[3664]=3940;
		sine[3665]=3948;
		sine[3666]=3873;
		sine[3667]=3914;
		sine[3668]=3741;
		sine[3669]=3815;
		sine[3670]=3551;
		sine[3671]=3653;
		sine[3672]=3308;
		sine[3673]=3435;
		sine[3674]=3023;
		sine[3675]=3170;
		sine[3676]=2706;
		sine[3677]=2868;
		sine[3678]=2370;
		sine[3679]=2539;
		sine[3680]=2026;
		sine[3681]=2198;
		sine[3682]=1690;
		sine[3683]=1857;
		sine[3684]=1373;
		sine[3685]=1528;
		sine[3686]=1088;
		sine[3687]=1226;
		sine[3688]=845;
		sine[3689]=961;
		sine[3690]=655;
		sine[3691]=743;
		sine[3692]=523;
		sine[3693]=581;
		sine[3694]=456;
		sine[3695]=482;
		sine[3696]=456;
		sine[3697]=448;
		sine[3698]=523;
		sine[3699]=482;
		sine[3700]=655;
		sine[3701]=581;
		sine[3702]=845;
		sine[3703]=743;
		sine[3704]=1088;
		sine[3705]=961;
		sine[3706]=1373;
		sine[3707]=1226;
		sine[3708]=1690;
		sine[3709]=1528;
		sine[3710]=2026;
		sine[3711]=1857;
		sine[3712]=2370;
		sine[3713]=2198;
		sine[3714]=2706;
		sine[3715]=2539;
		sine[3716]=3023;
		sine[3717]=2868;
		sine[3718]=3308;
		sine[3719]=3170;
		sine[3720]=3551;
		sine[3721]=3435;
		sine[3722]=3741;
		sine[3723]=3653;
		sine[3724]=3873;
		sine[3725]=3815;
		sine[3726]=3940;
		sine[3727]=3914;
		sine[3728]=3940;
		sine[3729]=3948;
		sine[3730]=3873;
		sine[3731]=3914;
		sine[3732]=3741;
		sine[3733]=3815;
		sine[3734]=3551;
		sine[3735]=3653;
		sine[3736]=3308;
		sine[3737]=3435;
		sine[3738]=3023;
		sine[3739]=3170;
		sine[3740]=2706;
		sine[3741]=2868;
		sine[3742]=2370;
		sine[3743]=2539;
		sine[3744]=2026;
		sine[3745]=2198;
		sine[3746]=1690;
		sine[3747]=1857;
		sine[3748]=1373;
		sine[3749]=1528;
		sine[3750]=1088;
		sine[3751]=1226;
		sine[3752]=845;
		sine[3753]=961;
		sine[3754]=655;
		sine[3755]=743;
		sine[3756]=523;
		sine[3757]=581;
		sine[3758]=456;
		sine[3759]=482;
		sine[3760]=456;
		sine[3761]=448;
		sine[3762]=523;
		sine[3763]=482;
		sine[3764]=655;
		sine[3765]=581;
		sine[3766]=845;
		sine[3767]=743;
		sine[3768]=1088;
		sine[3769]=961;
		sine[3770]=1373;
		sine[3771]=1226;
		sine[3772]=1690;
		sine[3773]=1528;
		sine[3774]=2026;
		sine[3775]=1857;
		sine[3776]=2370;
		sine[3777]=2198;
		sine[3778]=2706;
		sine[3779]=2539;
		sine[3780]=3023;
		sine[3781]=2868;
		sine[3782]=3308;
		sine[3783]=3170;
		sine[3784]=3551;
		sine[3785]=3435;
		sine[3786]=3741;
		sine[3787]=3653;
		sine[3788]=3873;
		sine[3789]=3815;
		sine[3790]=3940;
		sine[3791]=3914;
		sine[3792]=3940;
		sine[3793]=3948;
		sine[3794]=3873;
		sine[3795]=3914;
		sine[3796]=3741;
		sine[3797]=3815;
		sine[3798]=3551;
		sine[3799]=3653;
		sine[3800]=3308;
		sine[3801]=3435;
		sine[3802]=3023;
		sine[3803]=3170;
		sine[3804]=2706;
		sine[3805]=2868;
		sine[3806]=2370;
		sine[3807]=2539;
		sine[3808]=2026;
		sine[3809]=2198;
		sine[3810]=1690;
		sine[3811]=1857;
		sine[3812]=1373;
		sine[3813]=1528;
		sine[3814]=1088;
		sine[3815]=1226;
		sine[3816]=845;
		sine[3817]=961;
		sine[3818]=655;
		sine[3819]=743;
		sine[3820]=523;
		sine[3821]=581;
		sine[3822]=456;
		sine[3823]=482;
		sine[3824]=456;
		sine[3825]=448;
		sine[3826]=523;
		sine[3827]=482;
		sine[3828]=655;
		sine[3829]=581;
		sine[3830]=845;
		sine[3831]=743;
		sine[3832]=1088;
		sine[3833]=961;
		sine[3834]=1373;
		sine[3835]=1226;
		sine[3836]=1690;
		sine[3837]=1528;
		sine[3838]=2026;
		sine[3839]=1857;
		sine[3840]=2370;
		sine[3841]=2198;
		sine[3842]=2706;
		sine[3843]=2539;
		sine[3844]=3023;
		sine[3845]=2868;
		sine[3846]=3308;
		sine[3847]=3170;
		sine[3848]=3551;
		sine[3849]=3435;
		sine[3850]=3741;
		sine[3851]=3653;
		sine[3852]=3873;
		sine[3853]=3815;
		sine[3854]=3940;
		sine[3855]=3914;
		sine[3856]=3940;
		sine[3857]=3948;
		sine[3858]=3873;
		sine[3859]=3914;
		sine[3860]=3741;
		sine[3861]=3815;
		sine[3862]=3551;
		sine[3863]=3653;
		sine[3864]=3308;
		sine[3865]=3435;
		sine[3866]=3023;
		sine[3867]=3170;
		sine[3868]=2706;
		sine[3869]=2868;
		sine[3870]=2370;
		sine[3871]=2539;
		sine[3872]=2026;
		sine[3873]=2198;
		sine[3874]=1690;
		sine[3875]=1857;
		sine[3876]=1373;
		sine[3877]=1528;
		sine[3878]=1088;
		sine[3879]=1226;
		sine[3880]=845;
		sine[3881]=961;
		sine[3882]=655;
		sine[3883]=743;
		sine[3884]=523;
		sine[3885]=581;
		sine[3886]=456;
		sine[3887]=482;
		sine[3888]=456;
		sine[3889]=448;
		sine[3890]=523;
		sine[3891]=482;
		sine[3892]=655;
		sine[3893]=581;
		sine[3894]=845;
		sine[3895]=743;
		sine[3896]=1088;
		sine[3897]=961;
		sine[3898]=1373;
		sine[3899]=1226;
		sine[3900]=1690;
		sine[3901]=1528;
		sine[3902]=2026;
		sine[3903]=1857;
		sine[3904]=2370;
		sine[3905]=2198;
		sine[3906]=2706;
		sine[3907]=2539;
		sine[3908]=3023;
		sine[3909]=2868;
		sine[3910]=3308;
		sine[3911]=3170;
		sine[3912]=3551;
		sine[3913]=3435;
		sine[3914]=3741;
		sine[3915]=3653;
		sine[3916]=3873;
		sine[3917]=3815;
		sine[3918]=3940;
		sine[3919]=3914;
		sine[3920]=3940;
		sine[3921]=3948;
		sine[3922]=3873;
		sine[3923]=3914;
		sine[3924]=3741;
		sine[3925]=3815;
		sine[3926]=3551;
		sine[3927]=3653;
		sine[3928]=3308;
		sine[3929]=3435;
		sine[3930]=3023;
		sine[3931]=3170;
		sine[3932]=2706;
		sine[3933]=2868;
		sine[3934]=2370;
		sine[3935]=2539;
		sine[3936]=2026;
		sine[3937]=2198;
		sine[3938]=1690;
		sine[3939]=1857;
		sine[3940]=1373;
		sine[3941]=1528;
		sine[3942]=1088;
		sine[3943]=1226;
		sine[3944]=845;
		sine[3945]=961;
		sine[3946]=655;
		sine[3947]=743;
		sine[3948]=523;
		sine[3949]=581;
		sine[3950]=456;
		sine[3951]=482;
		sine[3952]=456;
		sine[3953]=448;
		sine[3954]=523;
		sine[3955]=482;
		sine[3956]=655;
		sine[3957]=581;
		sine[3958]=845;
		sine[3959]=743;
		sine[3960]=1088;
		sine[3961]=961;
		sine[3962]=1373;
		sine[3963]=1226;
		sine[3964]=1690;
		sine[3965]=1528;
		sine[3966]=2026;
		sine[3967]=1857;
		sine[3968]=2370;
		sine[3969]=2198;
		sine[3970]=2706;
		sine[3971]=2539;
		sine[3972]=3023;
		sine[3973]=2868;
		sine[3974]=3308;
		sine[3975]=3170;
		sine[3976]=3551;
		sine[3977]=3435;
		sine[3978]=3741;
		sine[3979]=3653;
		sine[3980]=3873;
		sine[3981]=3815;
		sine[3982]=3940;
		sine[3983]=3914;
		sine[3984]=3940;
		sine[3985]=3948;
		sine[3986]=3873;
		sine[3987]=3914;
		sine[3988]=3741;
		sine[3989]=3815;
		sine[3990]=3551;
		sine[3991]=3653;
		sine[3992]=3308;
		sine[3993]=3435;
		sine[3994]=3023;
		sine[3995]=3170;
		sine[3996]=2706;
		sine[3997]=2868;
		sine[3998]=2370;
		sine[3999]=2539;
		sine[4000]=2026;
		sine[4001]=2198;
		sine[4002]=1690;
		sine[4003]=1857;
		sine[4004]=1373;
		sine[4005]=1528;
		sine[4006]=1088;
		sine[4007]=1226;
		sine[4008]=845;
		sine[4009]=961;
		sine[4010]=655;
		sine[4011]=743;
		sine[4012]=523;
		sine[4013]=581;
		sine[4014]=456;
		sine[4015]=482;
		sine[4016]=456;
		sine[4017]=448;
		sine[4018]=523;
		sine[4019]=482;
		sine[4020]=655;
		sine[4021]=581;
		sine[4022]=845;
		sine[4023]=743;
		sine[4024]=1088;
		sine[4025]=961;
		sine[4026]=1373;
		sine[4027]=1226;
		sine[4028]=1690;
		sine[4029]=1528;
		sine[4030]=2026;
		sine[4031]=1857;
		sine[4032]=2370;
		sine[4033]=2198;
		sine[4034]=2706;
		sine[4035]=2539;
		sine[4036]=3023;
		sine[4037]=2868;
		sine[4038]=3308;
		sine[4039]=3170;
		sine[4040]=3551;
		sine[4041]=3435;
		sine[4042]=3741;
		sine[4043]=3653;
		sine[4044]=3873;
		sine[4045]=3815;
		sine[4046]=3940;
		sine[4047]=3914;
		sine[4048]=3940;
		sine[4049]=3948;
		sine[4050]=3873;
		sine[4051]=3914;
		sine[4052]=3741;
		sine[4053]=3815;
		sine[4054]=3551;
		sine[4055]=3653;
		sine[4056]=3308;
		sine[4057]=3435;
		sine[4058]=3023;
		sine[4059]=3170;
		sine[4060]=2706;
		sine[4061]=2868;
		sine[4062]=2370;
		sine[4063]=2539;
		sine[4064]=2026;
		sine[4065]=2198;
		sine[4066]=1690;
		sine[4067]=1857;
		sine[4068]=1373;
		sine[4069]=1528;
		sine[4070]=1088;
		sine[4071]=1226;
		sine[4072]=845;
		sine[4073]=961;
		sine[4074]=655;
		sine[4075]=743;
		sine[4076]=523;
		sine[4077]=581;
		sine[4078]=456;
		sine[4079]=482;
		sine[4080]=456;
		sine[4081]=448;
		sine[4082]=523;
		sine[4083]=482;
		sine[4084]=655;
		sine[4085]=581;
		sine[4086]=845;
		sine[4087]=743;
		sine[4088]=1088;
		sine[4089]=961;
		sine[4090]=1373;
		sine[4091]=1226;
		sine[4092]=1690;
		sine[4093]=1528;
		sine[4094]=2026;
		sine[4095]=1857;
	*/
/*
		//1cycle sinewave data
		sine[0]=2201;
		sine[1]=2198;
		sine[2]=2206;
		sine[3]=2203;
		sine[4]=2211;
		sine[5]=2209;
		sine[6]=2217;
		sine[7]=2214;
		sine[8]=2222;
		sine[9]=2219;
		sine[10]=2228;
		sine[11]=2225;
		sine[12]=2233;
		sine[13]=2230;
		sine[14]=2238;
		sine[15]=2236;
		sine[16]=2244;
		sine[17]=2241;
		sine[18]=2249;
		sine[19]=2246;
		sine[20]=2254;
		sine[21]=2252;
		sine[22]=2260;
		sine[23]=2257;
		sine[24]=2265;
		sine[25]=2262;
		sine[26]=2270;
		sine[27]=2268;
		sine[28]=2276;
		sine[29]=2273;
		sine[30]=2281;
		sine[31]=2279;
		sine[32]=2287;
		sine[33]=2284;
		sine[34]=2292;
		sine[35]=2289;
		sine[36]=2297;
		sine[37]=2295;
		sine[38]=2303;
		sine[39]=2300;
		sine[40]=2308;
		sine[41]=2305;
		sine[42]=2313;
		sine[43]=2311;
		sine[44]=2319;
		sine[45]=2316;
		sine[46]=2324;
		sine[47]=2321;
		sine[48]=2329;
		sine[49]=2327;
		sine[50]=2335;
		sine[51]=2332;
		sine[52]=2340;
		sine[53]=2337;
		sine[54]=2345;
		sine[55]=2343;
		sine[56]=2351;
		sine[57]=2348;
		sine[58]=2356;
		sine[59]=2353;
		sine[60]=2362;
		sine[61]=2359;
		sine[62]=2367;
		sine[63]=2364;
		sine[64]=2372;
		sine[65]=2370;
		sine[66]=2378;
		sine[67]=2375;
		sine[68]=2383;
		sine[69]=2380;
		sine[70]=2388;
		sine[71]=2386;
		sine[72]=2394;
		sine[73]=2391;
		sine[74]=2399;
		sine[75]=2396;
		sine[76]=2404;
		sine[77]=2402;
		sine[78]=2410;
		sine[79]=2407;
		sine[80]=2415;
		sine[81]=2412;
		sine[82]=2420;
		sine[83]=2418;
		sine[84]=2426;
		sine[85]=2423;
		sine[86]=2431;
		sine[87]=2428;
		sine[88]=2436;
		sine[89]=2434;
		sine[90]=2441;
		sine[91]=2439;
		sine[92]=2447;
		sine[93]=2444;
		sine[94]=2452;
		sine[95]=2449;
		sine[96]=2457;
		sine[97]=2455;
		sine[98]=2463;
		sine[99]=2460;
		sine[100]=2468;
		sine[101]=2465;
		sine[102]=2473;
		sine[103]=2471;
		sine[104]=2479;
		sine[105]=2476;
		sine[106]=2484;
		sine[107]=2481;
		sine[108]=2489;
		sine[109]=2487;
		sine[110]=2495;
		sine[111]=2492;
		sine[112]=2500;
		sine[113]=2497;
		sine[114]=2505;
		sine[115]=2502;
		sine[116]=2510;
		sine[117]=2508;
		sine[118]=2516;
		sine[119]=2513;
		sine[120]=2521;
		sine[121]=2518;
		sine[122]=2526;
		sine[123]=2524;
		sine[124]=2532;
		sine[125]=2529;
		sine[126]=2537;
		sine[127]=2534;
		sine[128]=2542;
		sine[129]=2539;
		sine[130]=2547;
		sine[131]=2545;
		sine[132]=2553;
		sine[133]=2550;
		sine[134]=2558;
		sine[135]=2555;
		sine[136]=2563;
		sine[137]=2560;
		sine[138]=2568;
		sine[139]=2566;
		sine[140]=2574;
		sine[141]=2571;
		sine[142]=2579;
		sine[143]=2576;
		sine[144]=2584;
		sine[145]=2581;
		sine[146]=2589;
		sine[147]=2587;
		sine[148]=2595;
		sine[149]=2592;
		sine[150]=2600;
		sine[151]=2597;
		sine[152]=2605;
		sine[153]=2602;
		sine[154]=2610;
		sine[155]=2608;
		sine[156]=2615;
		sine[157]=2613;
		sine[158]=2621;
		sine[159]=2618;
		sine[160]=2626;
		sine[161]=2623;
		sine[162]=2631;
		sine[163]=2628;
		sine[164]=2636;
		sine[165]=2634;
		sine[166]=2641;
		sine[167]=2639;
		sine[168]=2647;
		sine[169]=2644;
		sine[170]=2652;
		sine[171]=2649;
		sine[172]=2657;
		sine[173]=2654;
		sine[174]=2662;
		sine[175]=2660;
		sine[176]=2667;
		sine[177]=2665;
		sine[178]=2673;
		sine[179]=2670;
		sine[180]=2678;
		sine[181]=2675;
		sine[182]=2683;
		sine[183]=2680;
		sine[184]=2688;
		sine[185]=2685;
		sine[186]=2693;
		sine[187]=2691;
		sine[188]=2698;
		sine[189]=2696;
		sine[190]=2703;
		sine[191]=2701;
		sine[192]=2709;
		sine[193]=2706;
		sine[194]=2714;
		sine[195]=2711;
		sine[196]=2719;
		sine[197]=2716;
		sine[198]=2724;
		sine[199]=2721;
		sine[200]=2729;
		sine[201]=2727;
		sine[202]=2734;
		sine[203]=2732;
		sine[204]=2739;
		sine[205]=2737;
		sine[206]=2744;
		sine[207]=2742;
		sine[208]=2749;
		sine[209]=2747;
		sine[210]=2755;
		sine[211]=2752;
		sine[212]=2760;
		sine[213]=2757;
		sine[214]=2765;
		sine[215]=2762;
		sine[216]=2770;
		sine[217]=2767;
		sine[218]=2775;
		sine[219]=2772;
		sine[220]=2780;
		sine[221]=2777;
		sine[222]=2785;
		sine[223]=2782;
		sine[224]=2790;
		sine[225]=2788;
		sine[226]=2795;
		sine[227]=2793;
		sine[228]=2800;
		sine[229]=2798;
		sine[230]=2805;
		sine[231]=2803;
		sine[232]=2810;
		sine[233]=2808;
		sine[234]=2815;
		sine[235]=2813;
		sine[236]=2820;
		sine[237]=2818;
		sine[238]=2825;
		sine[239]=2823;
		sine[240]=2830;
		sine[241]=2828;
		sine[242]=2835;
		sine[243]=2833;
		sine[244]=2840;
		sine[245]=2838;
		sine[246]=2845;
		sine[247]=2843;
		sine[248]=2850;
		sine[249]=2848;
		sine[250]=2855;
		sine[251]=2853;
		sine[252]=2860;
		sine[253]=2858;
		sine[254]=2865;
		sine[255]=2863;
		sine[256]=2870;
		sine[257]=2868;
		sine[258]=2875;
		sine[259]=2873;
		sine[260]=2880;
		sine[261]=2878;
		sine[262]=2885;
		sine[263]=2883;
		sine[264]=2890;
		sine[265]=2887;
		sine[266]=2895;
		sine[267]=2892;
		sine[268]=2900;
		sine[269]=2897;
		sine[270]=2905;
		sine[271]=2902;
		sine[272]=2910;
		sine[273]=2907;
		sine[274]=2915;
		sine[275]=2912;
		sine[276]=2919;
		sine[277]=2917;
		sine[278]=2924;
		sine[279]=2922;
		sine[280]=2929;
		sine[281]=2927;
		sine[282]=2934;
		sine[283]=2932;
		sine[284]=2939;
		sine[285]=2937;
		sine[286]=2944;
		sine[287]=2941;
		sine[288]=2949;
		sine[289]=2946;
		sine[290]=2953;
		sine[291]=2951;
		sine[292]=2958;
		sine[293]=2956;
		sine[294]=2963;
		sine[295]=2961;
		sine[296]=2968;
		sine[297]=2966;
		sine[298]=2973;
		sine[299]=2970;
		sine[300]=2978;
		sine[301]=2975;
		sine[302]=2982;
		sine[303]=2980;
		sine[304]=2987;
		sine[305]=2985;
		sine[306]=2992;
		sine[307]=2990;
		sine[308]=2997;
		sine[309]=2994;
		sine[310]=3002;
		sine[311]=2999;
		sine[312]=3006;
		sine[313]=3004;
		sine[314]=3011;
		sine[315]=3009;
		sine[316]=3016;
		sine[317]=3013;
		sine[318]=3021;
		sine[319]=3018;
		sine[320]=3025;
		sine[321]=3023;
		sine[322]=3030;
		sine[323]=3028;
		sine[324]=3035;
		sine[325]=3032;
		sine[326]=3039;
		sine[327]=3037;
		sine[328]=3044;
		sine[329]=3042;
		sine[330]=3049;
		sine[331]=3047;
		sine[332]=3054;
		sine[333]=3051;
		sine[334]=3058;
		sine[335]=3056;
		sine[336]=3063;
		sine[337]=3061;
		sine[338]=3068;
		sine[339]=3065;
		sine[340]=3072;
		sine[341]=3070;
		sine[342]=3077;
		sine[343]=3075;
		sine[344]=3082;
		sine[345]=3079;
		sine[346]=3086;
		sine[347]=3084;
		sine[348]=3091;
		sine[349]=3088;
		sine[350]=3095;
		sine[351]=3093;
		sine[352]=3100;
		sine[353]=3098;
		sine[354]=3105;
		sine[355]=3102;
		sine[356]=3109;
		sine[357]=3107;
		sine[358]=3114;
		sine[359]=3111;
		sine[360]=3118;
		sine[361]=3116;
		sine[362]=3123;
		sine[363]=3121;
		sine[364]=3127;
		sine[365]=3125;
		sine[366]=3132;
		sine[367]=3130;
		sine[368]=3137;
		sine[369]=3134;
		sine[370]=3141;
		sine[371]=3139;
		sine[372]=3146;
		sine[373]=3143;
		sine[374]=3150;
		sine[375]=3148;
		sine[376]=3155;
		sine[377]=3152;
		sine[378]=3159;
		sine[379]=3157;
		sine[380]=3164;
		sine[381]=3161;
		sine[382]=3168;
		sine[383]=3166;
		sine[384]=3172;
		sine[385]=3170;
		sine[386]=3177;
		sine[387]=3175;
		sine[388]=3181;
		sine[389]=3179;
		sine[390]=3186;
		sine[391]=3184;
		sine[392]=3190;
		sine[393]=3188;
		sine[394]=3195;
		sine[395]=3192;
		sine[396]=3199;
		sine[397]=3197;
		sine[398]=3203;
		sine[399]=3201;
		sine[400]=3208;
		sine[401]=3206;
		sine[402]=3212;
		sine[403]=3210;
		sine[404]=3217;
		sine[405]=3214;
		sine[406]=3221;
		sine[407]=3219;
		sine[408]=3225;
		sine[409]=3223;
		sine[410]=3230;
		sine[411]=3227;
		sine[412]=3234;
		sine[413]=3232;
		sine[414]=3238;
		sine[415]=3236;
		sine[416]=3243;
		sine[417]=3240;
		sine[418]=3247;
		sine[419]=3245;
		sine[420]=3251;
		sine[421]=3249;
		sine[422]=3256;
		sine[423]=3253;
		sine[424]=3260;
		sine[425]=3258;
		sine[426]=3264;
		sine[427]=3262;
		sine[428]=3268;
		sine[429]=3266;
		sine[430]=3273;
		sine[431]=3270;
		sine[432]=3277;
		sine[433]=3275;
		sine[434]=3281;
		sine[435]=3279;
		sine[436]=3285;
		sine[437]=3283;
		sine[438]=3289;
		sine[439]=3287;
		sine[440]=3294;
		sine[441]=3292;
		sine[442]=3298;
		sine[443]=3296;
		sine[444]=3302;
		sine[445]=3300;
		sine[446]=3306;
		sine[447]=3304;
		sine[448]=3310;
		sine[449]=3308;
		sine[450]=3314;
		sine[451]=3312;
		sine[452]=3319;
		sine[453]=3316;
		sine[454]=3323;
		sine[455]=3321;
		sine[456]=3327;
		sine[457]=3325;
		sine[458]=3331;
		sine[459]=3329;
		sine[460]=3335;
		sine[461]=3333;
		sine[462]=3339;
		sine[463]=3337;
		sine[464]=3343;
		sine[465]=3341;
		sine[466]=3347;
		sine[467]=3345;
		sine[468]=3351;
		sine[469]=3349;
		sine[470]=3355;
		sine[471]=3353;
		sine[472]=3359;
		sine[473]=3357;
		sine[474]=3363;
		sine[475]=3361;
		sine[476]=3367;
		sine[477]=3365;
		sine[478]=3371;
		sine[479]=3369;
		sine[480]=3375;
		sine[481]=3373;
		sine[482]=3379;
		sine[483]=3377;
		sine[484]=3383;
		sine[485]=3381;
		sine[486]=3387;
		sine[487]=3385;
		sine[488]=3391;
		sine[489]=3389;
		sine[490]=3395;
		sine[491]=3393;
		sine[492]=3399;
		sine[493]=3397;
		sine[494]=3403;
		sine[495]=3401;
		sine[496]=3407;
		sine[497]=3405;
		sine[498]=3411;
		sine[499]=3409;
		sine[500]=3414;
		sine[501]=3412;
		sine[502]=3418;
		sine[503]=3416;
		sine[504]=3422;
		sine[505]=3420;
		sine[506]=3426;
		sine[507]=3424;
		sine[508]=3430;
		sine[509]=3428;
		sine[510]=3434;
		sine[511]=3432;
		sine[512]=3437;
		sine[513]=3435;
		sine[514]=3441;
		sine[515]=3439;
		sine[516]=3445;
		sine[517]=3443;
		sine[518]=3449;
		sine[519]=3447;
		sine[520]=3452;
		sine[521]=3451;
		sine[522]=3456;
		sine[523]=3454;
		sine[524]=3460;
		sine[525]=3458;
		sine[526]=3464;
		sine[527]=3462;
		sine[528]=3467;
		sine[529]=3465;
		sine[530]=3471;
		sine[531]=3469;
		sine[532]=3475;
		sine[533]=3473;
		sine[534]=3478;
		sine[535]=3476;
		sine[536]=3482;
		sine[537]=3480;
		sine[538]=3486;
		sine[539]=3484;
		sine[540]=3489;
		sine[541]=3487;
		sine[542]=3493;
		sine[543]=3491;
		sine[544]=3496;
		sine[545]=3495;
		sine[546]=3500;
		sine[547]=3498;
		sine[548]=3504;
		sine[549]=3502;
		sine[550]=3507;
		sine[551]=3505;
		sine[552]=3511;
		sine[553]=3509;
		sine[554]=3514;
		sine[555]=3513;
		sine[556]=3518;
		sine[557]=3516;
		sine[558]=3521;
		sine[559]=3520;
		sine[560]=3525;
		sine[561]=3523;
		sine[562]=3528;
		sine[563]=3527;
		sine[564]=3532;
		sine[565]=3530;
		sine[566]=3535;
		sine[567]=3534;
		sine[568]=3539;
		sine[569]=3537;
		sine[570]=3542;
		sine[571]=3540;
		sine[572]=3546;
		sine[573]=3544;
		sine[574]=3549;
		sine[575]=3547;
		sine[576]=3552;
		sine[577]=3551;
		sine[578]=3556;
		sine[579]=3554;
		sine[580]=3559;
		sine[581]=3558;
		sine[582]=3563;
		sine[583]=3561;
		sine[584]=3566;
		sine[585]=3564;
		sine[586]=3569;
		sine[587]=3568;
		sine[588]=3573;
		sine[589]=3571;
		sine[590]=3576;
		sine[591]=3574;
		sine[592]=3579;
		sine[593]=3578;
		sine[594]=3583;
		sine[595]=3581;
		sine[596]=3586;
		sine[597]=3584;
		sine[598]=3589;
		sine[599]=3587;
		sine[600]=3592;
		sine[601]=3591;
		sine[602]=3596;
		sine[603]=3594;
		sine[604]=3599;
		sine[605]=3597;
		sine[606]=3602;
		sine[607]=3600;
		sine[608]=3605;
		sine[609]=3604;
		sine[610]=3608;
		sine[611]=3607;
		sine[612]=3612;
		sine[613]=3610;
		sine[614]=3615;
		sine[615]=3613;
		sine[616]=3618;
		sine[617]=3616;
		sine[618]=3621;
		sine[619]=3619;
		sine[620]=3624;
		sine[621]=3623;
		sine[622]=3627;
		sine[623]=3626;
		sine[624]=3630;
		sine[625]=3629;
		sine[626]=3633;
		sine[627]=3632;
		sine[628]=3636;
		sine[629]=3635;
		sine[630]=3640;
		sine[631]=3638;
		sine[632]=3643;
		sine[633]=3641;
		sine[634]=3646;
		sine[635]=3644;
		sine[636]=3649;
		sine[637]=3647;
		sine[638]=3652;
		sine[639]=3650;
		sine[640]=3655;
		sine[641]=3653;
		sine[642]=3658;
		sine[643]=3656;
		sine[644]=3660;
		sine[645]=3659;
		sine[646]=3663;
		sine[647]=3662;
		sine[648]=3666;
		sine[649]=3665;
		sine[650]=3669;
		sine[651]=3668;
		sine[652]=3672;
		sine[653]=3671;
		sine[654]=3675;
		sine[655]=3674;
		sine[656]=3678;
		sine[657]=3676;
		sine[658]=3681;
		sine[659]=3679;
		sine[660]=3684;
		sine[661]=3682;
		sine[662]=3686;
		sine[663]=3685;
		sine[664]=3689;
		sine[665]=3688;
		sine[666]=3692;
		sine[667]=3691;
		sine[668]=3695;
		sine[669]=3693;
		sine[670]=3698;
		sine[671]=3696;
		sine[672]=3700;
		sine[673]=3699;
		sine[674]=3703;
		sine[675]=3702;
		sine[676]=3706;
		sine[677]=3705;
		sine[678]=3709;
		sine[679]=3707;
		sine[680]=3711;
		sine[681]=3710;
		sine[682]=3714;
		sine[683]=3713;
		sine[684]=3717;
		sine[685]=3715;
		sine[686]=3719;
		sine[687]=3718;
		sine[688]=3722;
		sine[689]=3721;
		sine[690]=3725;
		sine[691]=3723;
		sine[692]=3727;
		sine[693]=3726;
		sine[694]=3730;
		sine[695]=3729;
		sine[696]=3732;
		sine[697]=3731;
		sine[698]=3735;
		sine[699]=3734;
		sine[700]=3738;
		sine[701]=3736;
		sine[702]=3740;
		sine[703]=3739;
		sine[704]=3743;
		sine[705]=3741;
		sine[706]=3745;
		sine[707]=3744;
		sine[708]=3748;
		sine[709]=3746;
		sine[710]=3750;
		sine[711]=3749;
		sine[712]=3753;
		sine[713]=3751;
		sine[714]=3755;
		sine[715]=3754;
		sine[716]=3758;
		sine[717]=3756;
		sine[718]=3760;
		sine[719]=3759;
		sine[720]=3762;
		sine[721]=3761;
		sine[722]=3765;
		sine[723]=3764;
		sine[724]=3767;
		sine[725]=3766;
		sine[726]=3770;
		sine[727]=3768;
		sine[728]=3772;
		sine[729]=3771;
		sine[730]=3774;
		sine[731]=3773;
		sine[732]=3777;
		sine[733]=3775;
		sine[734]=3779;
		sine[735]=3778;
		sine[736]=3781;
		sine[737]=3780;
		sine[738]=3783;
		sine[739]=3782;
		sine[740]=3786;
		sine[741]=3785;
		sine[742]=3788;
		sine[743]=3787;
		sine[744]=3790;
		sine[745]=3789;
		sine[746]=3792;
		sine[747]=3791;
		sine[748]=3795;
		sine[749]=3793;
		sine[750]=3797;
		sine[751]=3796;
		sine[752]=3799;
		sine[753]=3798;
		sine[754]=3801;
		sine[755]=3800;
		sine[756]=3803;
		sine[757]=3802;
		sine[758]=3805;
		sine[759]=3804;
		sine[760]=3808;
		sine[761]=3806;
		sine[762]=3810;
		sine[763]=3809;
		sine[764]=3812;
		sine[765]=3811;
		sine[766]=3814;
		sine[767]=3813;
		sine[768]=3816;
		sine[769]=3815;
		sine[770]=3818;
		sine[771]=3817;
		sine[772]=3820;
		sine[773]=3819;
		sine[774]=3822;
		sine[775]=3821;
		sine[776]=3824;
		sine[777]=3823;
		sine[778]=3826;
		sine[779]=3825;
		sine[780]=3828;
		sine[781]=3827;
		sine[782]=3830;
		sine[783]=3829;
		sine[784]=3832;
		sine[785]=3831;
		sine[786]=3834;
		sine[787]=3833;
		sine[788]=3836;
		sine[789]=3835;
		sine[790]=3837;
		sine[791]=3836;
		sine[792]=3839;
		sine[793]=3838;
		sine[794]=3841;
		sine[795]=3840;
		sine[796]=3843;
		sine[797]=3842;
		sine[798]=3845;
		sine[799]=3844;
		sine[800]=3847;
		sine[801]=3846;
		sine[802]=3848;
		sine[803]=3848;
		sine[804]=3850;
		sine[805]=3849;
		sine[806]=3852;
		sine[807]=3851;
		sine[808]=3854;
		sine[809]=3853;
		sine[810]=3855;
		sine[811]=3855;
		sine[812]=3857;
		sine[813]=3856;
		sine[814]=3859;
		sine[815]=3858;
		sine[816]=3861;
		sine[817]=3860;
		sine[818]=3862;
		sine[819]=3861;
		sine[820]=3864;
		sine[821]=3863;
		sine[822]=3865;
		sine[823]=3865;
		sine[824]=3867;
		sine[825]=3866;
		sine[826]=3869;
		sine[827]=3868;
		sine[828]=3870;
		sine[829]=3869;
		sine[830]=3872;
		sine[831]=3871;
		sine[832]=3873;
		sine[833]=3873;
		sine[834]=3875;
		sine[835]=3874;
		sine[836]=3876;
		sine[837]=3876;
		sine[838]=3878;
		sine[839]=3877;
		sine[840]=3879;
		sine[841]=3879;
		sine[842]=3881;
		sine[843]=3880;
		sine[844]=3882;
		sine[845]=3882;
		sine[846]=3884;
		sine[847]=3883;
		sine[848]=3885;
		sine[849]=3885;
		sine[850]=3887;
		sine[851]=3886;
		sine[852]=3888;
		sine[853]=3887;
		sine[854]=3890;
		sine[855]=3889;
		sine[856]=3891;
		sine[857]=3890;
		sine[858]=3892;
		sine[859]=3892;
		sine[860]=3894;
		sine[861]=3893;
		sine[862]=3895;
		sine[863]=3894;
		sine[864]=3896;
		sine[865]=3896;
		sine[866]=3897;
		sine[867]=3897;
		sine[868]=3899;
		sine[869]=3898;
		sine[870]=3900;
		sine[871]=3899;
		sine[872]=3901;
		sine[873]=3901;
		sine[874]=3902;
		sine[875]=3902;
		sine[876]=3904;
		sine[877]=3903;
		sine[878]=3905;
		sine[879]=3904;
		sine[880]=3906;
		sine[881]=3905;
		sine[882]=3907;
		sine[883]=3907;
		sine[884]=3908;
		sine[885]=3908;
		sine[886]=3909;
		sine[887]=3909;
		sine[888]=3911;
		sine[889]=3910;
		sine[890]=3912;
		sine[891]=3911;
		sine[892]=3913;
		sine[893]=3912;
		sine[894]=3914;
		sine[895]=3913;
		sine[896]=3915;
		sine[897]=3914;
		sine[898]=3916;
		sine[899]=3915;
		sine[900]=3917;
		sine[901]=3916;
		sine[902]=3918;
		sine[903]=3917;
		sine[904]=3919;
		sine[905]=3918;
		sine[906]=3920;
		sine[907]=3919;
		sine[908]=3921;
		sine[909]=3920;
		sine[910]=3922;
		sine[911]=3921;
		sine[912]=3923;
		sine[913]=3922;
		sine[914]=3924;
		sine[915]=3923;
		sine[916]=3924;
		sine[917]=3924;
		sine[918]=3925;
		sine[919]=3925;
		sine[920]=3926;
		sine[921]=3926;
		sine[922]=3927;
		sine[923]=3927;
		sine[924]=3928;
		sine[925]=3927;
		sine[926]=3929;
		sine[927]=3928;
		sine[928]=3929;
		sine[929]=3929;
		sine[930]=3930;
		sine[931]=3930;
		sine[932]=3931;
		sine[933]=3931;
		sine[934]=3932;
		sine[935]=3931;
		sine[936]=3932;
		sine[937]=3932;
		sine[938]=3933;
		sine[939]=3933;
		sine[940]=3934;
		sine[941]=3933;
		sine[942]=3935;
		sine[943]=3934;
		sine[944]=3935;
		sine[945]=3935;
		sine[946]=3936;
		sine[947]=3935;
		sine[948]=3936;
		sine[949]=3936;
		sine[950]=3937;
		sine[951]=3937;
		sine[952]=3938;
		sine[953]=3937;
		sine[954]=3938;
		sine[955]=3938;
		sine[956]=3939;
		sine[957]=3938;
		sine[958]=3939;
		sine[959]=3939;
		sine[960]=3940;
		sine[961]=3940;
		sine[962]=3940;
		sine[963]=3940;
		sine[964]=3941;
		sine[965]=3941;
		sine[966]=3941;
		sine[967]=3941;
		sine[968]=3942;
		sine[969]=3942;
		sine[970]=3942;
		sine[971]=3942;
		sine[972]=3943;
		sine[973]=3942;
		sine[974]=3943;
		sine[975]=3943;
		sine[976]=3943;
		sine[977]=3943;
		sine[978]=3944;
		sine[979]=3944;
		sine[980]=3944;
		sine[981]=3944;
		sine[982]=3945;
		sine[983]=3944;
		sine[984]=3945;
		sine[985]=3945;
		sine[986]=3945;
		sine[987]=3945;
		sine[988]=3945;
		sine[989]=3945;
		sine[990]=3946;
		sine[991]=3946;
		sine[992]=3946;
		sine[993]=3946;
		sine[994]=3946;
		sine[995]=3946;
		sine[996]=3946;
		sine[997]=3946;
		sine[998]=3947;
		sine[999]=3947;
		sine[1000]=3947;
		sine[1001]=3947;
		sine[1002]=3947;
		sine[1003]=3947;
		sine[1004]=3947;
		sine[1005]=3947;
		sine[1006]=3947;
		sine[1007]=3947;
		sine[1008]=3948;
		sine[1009]=3947;
		sine[1010]=3948;
		sine[1011]=3948;
		sine[1012]=3948;
		sine[1013]=3948;
		sine[1014]=3948;
		sine[1015]=3948;
		sine[1016]=3948;
		sine[1017]=3948;
		sine[1018]=3948;
		sine[1019]=3948;
		sine[1020]=3948;
		sine[1021]=3948;
		sine[1022]=3948;
		sine[1023]=3948;
		sine[1024]=3948;
		sine[1025]=3948;
		sine[1026]=3948;
		sine[1027]=3948;
		sine[1028]=3948;
		sine[1029]=3948;
		sine[1030]=3948;
		sine[1031]=3948;
		sine[1032]=3948;
		sine[1033]=3948;
		sine[1034]=3948;
		sine[1035]=3948;
		sine[1036]=3948;
		sine[1037]=3948;
		sine[1038]=3948;
		sine[1039]=3948;
		sine[1040]=3947;
		sine[1041]=3947;
		sine[1042]=3947;
		sine[1043]=3947;
		sine[1044]=3947;
		sine[1045]=3947;
		sine[1046]=3947;
		sine[1047]=3947;
		sine[1048]=3947;
		sine[1049]=3947;
		sine[1050]=3946;
		sine[1051]=3947;
		sine[1052]=3946;
		sine[1053]=3946;
		sine[1054]=3946;
		sine[1055]=3946;
		sine[1056]=3946;
		sine[1057]=3946;
		sine[1058]=3945;
		sine[1059]=3946;
		sine[1060]=3945;
		sine[1061]=3945;
		sine[1062]=3945;
		sine[1063]=3945;
		sine[1064]=3945;
		sine[1065]=3945;
		sine[1066]=3944;
		sine[1067]=3944;
		sine[1068]=3944;
		sine[1069]=3944;
		sine[1070]=3943;
		sine[1071]=3944;
		sine[1072]=3943;
		sine[1073]=3943;
		sine[1074]=3943;
		sine[1075]=3943;
		sine[1076]=3942;
		sine[1077]=3942;
		sine[1078]=3942;
		sine[1079]=3942;
		sine[1080]=3941;
		sine[1081]=3942;
		sine[1082]=3941;
		sine[1083]=3941;
		sine[1084]=3940;
		sine[1085]=3941;
		sine[1086]=3940;
		sine[1087]=3940;
		sine[1088]=3939;
		sine[1089]=3940;
		sine[1090]=3939;
		sine[1091]=3939;
		sine[1092]=3938;
		sine[1093]=3938;
		sine[1094]=3938;
		sine[1095]=3938;
		sine[1096]=3937;
		sine[1097]=3937;
		sine[1098]=3936;
		sine[1099]=3937;
		sine[1100]=3936;
		sine[1101]=3936;
		sine[1102]=3935;
		sine[1103]=3935;
		sine[1104]=3935;
		sine[1105]=3935;
		sine[1106]=3934;
		sine[1107]=3934;
		sine[1108]=3933;
		sine[1109]=3933;
		sine[1110]=3932;
		sine[1111]=3933;
		sine[1112]=3932;
		sine[1113]=3932;
		sine[1114]=3931;
		sine[1115]=3931;
		sine[1116]=3930;
		sine[1117]=3931;
		sine[1118]=3929;
		sine[1119]=3930;
		sine[1120]=3929;
		sine[1121]=3929;
		sine[1122]=3928;
		sine[1123]=3928;
		sine[1124]=3927;
		sine[1125]=3927;
		sine[1126]=3926;
		sine[1127]=3927;
		sine[1128]=3925;
		sine[1129]=3926;
		sine[1130]=3924;
		sine[1131]=3925;
		sine[1132]=3924;
		sine[1133]=3924;
		sine[1134]=3923;
		sine[1135]=3923;
		sine[1136]=3922;
		sine[1137]=3922;
		sine[1138]=3921;
		sine[1139]=3921;
		sine[1140]=3920;
		sine[1141]=3920;
		sine[1142]=3919;
		sine[1143]=3919;
		sine[1144]=3918;
		sine[1145]=3918;
		sine[1146]=3917;
		sine[1147]=3917;
		sine[1148]=3916;
		sine[1149]=3916;
		sine[1150]=3915;
		sine[1151]=3915;
		sine[1152]=3914;
		sine[1153]=3914;
		sine[1154]=3913;
		sine[1155]=3913;
		sine[1156]=3912;
		sine[1157]=3912;
		sine[1158]=3911;
		sine[1159]=3911;
		sine[1160]=3909;
		sine[1161]=3910;
		sine[1162]=3908;
		sine[1163]=3909;
		sine[1164]=3907;
		sine[1165]=3908;
		sine[1166]=3906;
		sine[1167]=3907;
		sine[1168]=3905;
		sine[1169]=3905;
		sine[1170]=3904;
		sine[1171]=3904;
		sine[1172]=3902;
		sine[1173]=3903;
		sine[1174]=3901;
		sine[1175]=3902;
		sine[1176]=3900;
		sine[1177]=3901;
		sine[1178]=3899;
		sine[1179]=3899;
		sine[1180]=3897;
		sine[1181]=3898;
		sine[1182]=3896;
		sine[1183]=3897;
		sine[1184]=3895;
		sine[1185]=3896;
		sine[1186]=3894;
		sine[1187]=3894;
		sine[1188]=3892;
		sine[1189]=3893;
		sine[1190]=3891;
		sine[1191]=3892;
		sine[1192]=3890;
		sine[1193]=3890;
		sine[1194]=3888;
		sine[1195]=3889;
		sine[1196]=3887;
		sine[1197]=3887;
		sine[1198]=3885;
		sine[1199]=3886;
		sine[1200]=3884;
		sine[1201]=3885;
		sine[1202]=3882;
		sine[1203]=3883;
		sine[1204]=3881;
		sine[1205]=3882;
		sine[1206]=3879;
		sine[1207]=3880;
		sine[1208]=3878;
		sine[1209]=3879;
		sine[1210]=3876;
		sine[1211]=3877;
		sine[1212]=3875;
		sine[1213]=3876;
		sine[1214]=3873;
		sine[1215]=3874;
		sine[1216]=3872;
		sine[1217]=3873;
		sine[1218]=3870;
		sine[1219]=3871;
		sine[1220]=3869;
		sine[1221]=3869;
		sine[1222]=3867;
		sine[1223]=3868;
		sine[1224]=3865;
		sine[1225]=3866;
		sine[1226]=3864;
		sine[1227]=3865;
		sine[1228]=3862;
		sine[1229]=3863;
		sine[1230]=3861;
		sine[1231]=3861;
		sine[1232]=3859;
		sine[1233]=3860;
		sine[1234]=3857;
		sine[1235]=3858;
		sine[1236]=3855;
		sine[1237]=3856;
		sine[1238]=3854;
		sine[1239]=3855;
		sine[1240]=3852;
		sine[1241]=3853;
		sine[1242]=3850;
		sine[1243]=3851;
		sine[1244]=3848;
		sine[1245]=3849;
		sine[1246]=3847;
		sine[1247]=3848;
		sine[1248]=3845;
		sine[1249]=3846;
		sine[1250]=3843;
		sine[1251]=3844;
		sine[1252]=3841;
		sine[1253]=3842;
		sine[1254]=3839;
		sine[1255]=3840;
		sine[1256]=3837;
		sine[1257]=3838;
		sine[1258]=3836;
		sine[1259]=3836;
		sine[1260]=3834;
		sine[1261]=3835;
		sine[1262]=3832;
		sine[1263]=3833;
		sine[1264]=3830;
		sine[1265]=3831;
		sine[1266]=3828;
		sine[1267]=3829;
		sine[1268]=3826;
		sine[1269]=3827;
		sine[1270]=3824;
		sine[1271]=3825;
		sine[1272]=3822;
		sine[1273]=3823;
		sine[1274]=3820;
		sine[1275]=3821;
		sine[1276]=3818;
		sine[1277]=3819;
		sine[1278]=3816;
		sine[1279]=3817;
		sine[1280]=3814;
		sine[1281]=3815;
		sine[1282]=3812;
		sine[1283]=3813;
		sine[1284]=3810;
		sine[1285]=3811;
		sine[1286]=3808;
		sine[1287]=3809;
		sine[1288]=3805;
		sine[1289]=3806;
		sine[1290]=3803;
		sine[1291]=3804;
		sine[1292]=3801;
		sine[1293]=3802;
		sine[1294]=3799;
		sine[1295]=3800;
		sine[1296]=3797;
		sine[1297]=3798;
		sine[1298]=3795;
		sine[1299]=3796;
		sine[1300]=3792;
		sine[1301]=3793;
		sine[1302]=3790;
		sine[1303]=3791;
		sine[1304]=3788;
		sine[1305]=3789;
		sine[1306]=3786;
		sine[1307]=3787;
		sine[1308]=3783;
		sine[1309]=3785;
		sine[1310]=3781;
		sine[1311]=3782;
		sine[1312]=3779;
		sine[1313]=3780;
		sine[1314]=3777;
		sine[1315]=3778;
		sine[1316]=3774;
		sine[1317]=3775;
		sine[1318]=3772;
		sine[1319]=3773;
		sine[1320]=3770;
		sine[1321]=3771;
		sine[1322]=3767;
		sine[1323]=3768;
		sine[1324]=3765;
		sine[1325]=3766;
		sine[1326]=3762;
		sine[1327]=3764;
		sine[1328]=3760;
		sine[1329]=3761;
		sine[1330]=3758;
		sine[1331]=3759;
		sine[1332]=3755;
		sine[1333]=3756;
		sine[1334]=3753;
		sine[1335]=3754;
		sine[1336]=3750;
		sine[1337]=3751;
		sine[1338]=3748;
		sine[1339]=3749;
		sine[1340]=3745;
		sine[1341]=3746;
		sine[1342]=3743;
		sine[1343]=3744;
		sine[1344]=3740;
		sine[1345]=3741;
		sine[1346]=3738;
		sine[1347]=3739;
		sine[1348]=3735;
		sine[1349]=3736;
		sine[1350]=3732;
		sine[1351]=3734;
		sine[1352]=3730;
		sine[1353]=3731;
		sine[1354]=3727;
		sine[1355]=3729;
		sine[1356]=3725;
		sine[1357]=3726;
		sine[1358]=3722;
		sine[1359]=3723;
		sine[1360]=3719;
		sine[1361]=3721;
		sine[1362]=3717;
		sine[1363]=3718;
		sine[1364]=3714;
		sine[1365]=3715;
		sine[1366]=3711;
		sine[1367]=3713;
		sine[1368]=3709;
		sine[1369]=3710;
		sine[1370]=3706;
		sine[1371]=3707;
		sine[1372]=3703;
		sine[1373]=3705;
		sine[1374]=3700;
		sine[1375]=3702;
		sine[1376]=3698;
		sine[1377]=3699;
		sine[1378]=3695;
		sine[1379]=3696;
		sine[1380]=3692;
		sine[1381]=3693;
		sine[1382]=3689;
		sine[1383]=3691;
		sine[1384]=3686;
		sine[1385]=3688;
		sine[1386]=3684;
		sine[1387]=3685;
		sine[1388]=3681;
		sine[1389]=3682;
		sine[1390]=3678;
		sine[1391]=3679;
		sine[1392]=3675;
		sine[1393]=3676;
		sine[1394]=3672;
		sine[1395]=3674;
		sine[1396]=3669;
		sine[1397]=3671;
		sine[1398]=3666;
		sine[1399]=3668;
		sine[1400]=3663;
		sine[1401]=3665;
		sine[1402]=3660;
		sine[1403]=3662;
		sine[1404]=3658;
		sine[1405]=3659;
		sine[1406]=3655;
		sine[1407]=3656;
		sine[1408]=3652;
		sine[1409]=3653;
		sine[1410]=3649;
		sine[1411]=3650;
		sine[1412]=3646;
		sine[1413]=3647;
		sine[1414]=3643;
		sine[1415]=3644;
		sine[1416]=3640;
		sine[1417]=3641;
		sine[1418]=3636;
		sine[1419]=3638;
		sine[1420]=3633;
		sine[1421]=3635;
		sine[1422]=3630;
		sine[1423]=3632;
		sine[1424]=3627;
		sine[1425]=3629;
		sine[1426]=3624;
		sine[1427]=3626;
		sine[1428]=3621;
		sine[1429]=3623;
		sine[1430]=3618;
		sine[1431]=3619;
		sine[1432]=3615;
		sine[1433]=3616;
		sine[1434]=3612;
		sine[1435]=3613;
		sine[1436]=3608;
		sine[1437]=3610;
		sine[1438]=3605;
		sine[1439]=3607;
		sine[1440]=3602;
		sine[1441]=3604;
		sine[1442]=3599;
		sine[1443]=3600;
		sine[1444]=3596;
		sine[1445]=3597;
		sine[1446]=3592;
		sine[1447]=3594;
		sine[1448]=3589;
		sine[1449]=3591;
		sine[1450]=3586;
		sine[1451]=3587;
		sine[1452]=3583;
		sine[1453]=3584;
		sine[1454]=3579;
		sine[1455]=3581;
		sine[1456]=3576;
		sine[1457]=3578;
		sine[1458]=3573;
		sine[1459]=3574;
		sine[1460]=3569;
		sine[1461]=3571;
		sine[1462]=3566;
		sine[1463]=3568;
		sine[1464]=3563;
		sine[1465]=3564;
		sine[1466]=3559;
		sine[1467]=3561;
		sine[1468]=3556;
		sine[1469]=3558;
		sine[1470]=3552;
		sine[1471]=3554;
		sine[1472]=3549;
		sine[1473]=3551;
		sine[1474]=3546;
		sine[1475]=3547;
		sine[1476]=3542;
		sine[1477]=3544;
		sine[1478]=3539;
		sine[1479]=3540;
		sine[1480]=3535;
		sine[1481]=3537;
		sine[1482]=3532;
		sine[1483]=3534;
		sine[1484]=3528;
		sine[1485]=3530;
		sine[1486]=3525;
		sine[1487]=3527;
		sine[1488]=3521;
		sine[1489]=3523;
		sine[1490]=3518;
		sine[1491]=3520;
		sine[1492]=3514;
		sine[1493]=3516;
		sine[1494]=3511;
		sine[1495]=3513;
		sine[1496]=3507;
		sine[1497]=3509;
		sine[1498]=3504;
		sine[1499]=3505;
		sine[1500]=3500;
		sine[1501]=3502;
		sine[1502]=3496;
		sine[1503]=3498;
		sine[1504]=3493;
		sine[1505]=3495;
		sine[1506]=3489;
		sine[1507]=3491;
		sine[1508]=3486;
		sine[1509]=3487;
		sine[1510]=3482;
		sine[1511]=3484;
		sine[1512]=3478;
		sine[1513]=3480;
		sine[1514]=3475;
		sine[1515]=3476;
		sine[1516]=3471;
		sine[1517]=3473;
		sine[1518]=3467;
		sine[1519]=3469;
		sine[1520]=3464;
		sine[1521]=3465;
		sine[1522]=3460;
		sine[1523]=3462;
		sine[1524]=3456;
		sine[1525]=3458;
		sine[1526]=3452;
		sine[1527]=3454;
		sine[1528]=3449;
		sine[1529]=3451;
		sine[1530]=3445;
		sine[1531]=3447;
		sine[1532]=3441;
		sine[1533]=3443;
		sine[1534]=3437;
		sine[1535]=3439;
		sine[1536]=3434;
		sine[1537]=3435;
		sine[1538]=3430;
		sine[1539]=3432;
		sine[1540]=3426;
		sine[1541]=3428;
		sine[1542]=3422;
		sine[1543]=3424;
		sine[1544]=3418;
		sine[1545]=3420;
		sine[1546]=3414;
		sine[1547]=3416;
		sine[1548]=3411;
		sine[1549]=3412;
		sine[1550]=3407;
		sine[1551]=3409;
		sine[1552]=3403;
		sine[1553]=3405;
		sine[1554]=3399;
		sine[1555]=3401;
		sine[1556]=3395;
		sine[1557]=3397;
		sine[1558]=3391;
		sine[1559]=3393;
		sine[1560]=3387;
		sine[1561]=3389;
		sine[1562]=3383;
		sine[1563]=3385;
		sine[1564]=3379;
		sine[1565]=3381;
		sine[1566]=3375;
		sine[1567]=3377;
		sine[1568]=3371;
		sine[1569]=3373;
		sine[1570]=3367;
		sine[1571]=3369;
		sine[1572]=3363;
		sine[1573]=3365;
		sine[1574]=3359;
		sine[1575]=3361;
		sine[1576]=3355;
		sine[1577]=3357;
		sine[1578]=3351;
		sine[1579]=3353;
		sine[1580]=3347;
		sine[1581]=3349;
		sine[1582]=3343;
		sine[1583]=3345;
		sine[1584]=3339;
		sine[1585]=3341;
		sine[1586]=3335;
		sine[1587]=3337;
		sine[1588]=3331;
		sine[1589]=3333;
		sine[1590]=3327;
		sine[1591]=3329;
		sine[1592]=3323;
		sine[1593]=3325;
		sine[1594]=3319;
		sine[1595]=3321;
		sine[1596]=3314;
		sine[1597]=3316;
		sine[1598]=3310;
		sine[1599]=3312;
		sine[1600]=3306;
		sine[1601]=3308;
		sine[1602]=3302;
		sine[1603]=3304;
		sine[1604]=3298;
		sine[1605]=3300;
		sine[1606]=3294;
		sine[1607]=3296;
		sine[1608]=3289;
		sine[1609]=3292;
		sine[1610]=3285;
		sine[1611]=3287;
		sine[1612]=3281;
		sine[1613]=3283;
		sine[1614]=3277;
		sine[1615]=3279;
		sine[1616]=3273;
		sine[1617]=3275;
		sine[1618]=3268;
		sine[1619]=3270;
		sine[1620]=3264;
		sine[1621]=3266;
		sine[1622]=3260;
		sine[1623]=3262;
		sine[1624]=3256;
		sine[1625]=3258;
		sine[1626]=3251;
		sine[1627]=3253;
		sine[1628]=3247;
		sine[1629]=3249;
		sine[1630]=3243;
		sine[1631]=3245;
		sine[1632]=3238;
		sine[1633]=3240;
		sine[1634]=3234;
		sine[1635]=3236;
		sine[1636]=3230;
		sine[1637]=3232;
		sine[1638]=3225;
		sine[1639]=3227;
		sine[1640]=3221;
		sine[1641]=3223;
		sine[1642]=3217;
		sine[1643]=3219;
		sine[1644]=3212;
		sine[1645]=3214;
		sine[1646]=3208;
		sine[1647]=3210;
		sine[1648]=3203;
		sine[1649]=3206;
		sine[1650]=3199;
		sine[1651]=3201;
		sine[1652]=3195;
		sine[1653]=3197;
		sine[1654]=3190;
		sine[1655]=3192;
		sine[1656]=3186;
		sine[1657]=3188;
		sine[1658]=3181;
		sine[1659]=3184;
		sine[1660]=3177;
		sine[1661]=3179;
		sine[1662]=3172;
		sine[1663]=3175;
		sine[1664]=3168;
		sine[1665]=3170;
		sine[1666]=3164;
		sine[1667]=3166;
		sine[1668]=3159;
		sine[1669]=3161;
		sine[1670]=3155;
		sine[1671]=3157;
		sine[1672]=3150;
		sine[1673]=3152;
		sine[1674]=3146;
		sine[1675]=3148;
		sine[1676]=3141;
		sine[1677]=3143;
		sine[1678]=3137;
		sine[1679]=3139;
		sine[1680]=3132;
		sine[1681]=3134;
		sine[1682]=3127;
		sine[1683]=3130;
		sine[1684]=3123;
		sine[1685]=3125;
		sine[1686]=3118;
		sine[1687]=3121;
		sine[1688]=3114;
		sine[1689]=3116;
		sine[1690]=3109;
		sine[1691]=3111;
		sine[1692]=3105;
		sine[1693]=3107;
		sine[1694]=3100;
		sine[1695]=3102;
		sine[1696]=3095;
		sine[1697]=3098;
		sine[1698]=3091;
		sine[1699]=3093;
		sine[1700]=3086;
		sine[1701]=3088;
		sine[1702]=3082;
		sine[1703]=3084;
		sine[1704]=3077;
		sine[1705]=3079;
		sine[1706]=3072;
		sine[1707]=3075;
		sine[1708]=3068;
		sine[1709]=3070;
		sine[1710]=3063;
		sine[1711]=3065;
		sine[1712]=3058;
		sine[1713]=3061;
		sine[1714]=3054;
		sine[1715]=3056;
		sine[1716]=3049;
		sine[1717]=3051;
		sine[1718]=3044;
		sine[1719]=3047;
		sine[1720]=3039;
		sine[1721]=3042;
		sine[1722]=3035;
		sine[1723]=3037;
		sine[1724]=3030;
		sine[1725]=3032;
		sine[1726]=3025;
		sine[1727]=3028;
		sine[1728]=3021;
		sine[1729]=3023;
		sine[1730]=3016;
		sine[1731]=3018;
		sine[1732]=3011;
		sine[1733]=3013;
		sine[1734]=3006;
		sine[1735]=3009;
		sine[1736]=3002;
		sine[1737]=3004;
		sine[1738]=2997;
		sine[1739]=2999;
		sine[1740]=2992;
		sine[1741]=2994;
		sine[1742]=2987;
		sine[1743]=2990;
		sine[1744]=2982;
		sine[1745]=2985;
		sine[1746]=2978;
		sine[1747]=2980;
		sine[1748]=2973;
		sine[1749]=2975;
		sine[1750]=2968;
		sine[1751]=2970;
		sine[1752]=2963;
		sine[1753]=2966;
		sine[1754]=2958;
		sine[1755]=2961;
		sine[1756]=2953;
		sine[1757]=2956;
		sine[1758]=2949;
		sine[1759]=2951;
		sine[1760]=2944;
		sine[1761]=2946;
		sine[1762]=2939;
		sine[1763]=2941;
		sine[1764]=2934;
		sine[1765]=2937;
		sine[1766]=2929;
		sine[1767]=2932;
		sine[1768]=2924;
		sine[1769]=2927;
		sine[1770]=2919;
		sine[1771]=2922;
		sine[1772]=2915;
		sine[1773]=2917;
		sine[1774]=2910;
		sine[1775]=2912;
		sine[1776]=2905;
		sine[1777]=2907;
		sine[1778]=2900;
		sine[1779]=2902;
		sine[1780]=2895;
		sine[1781]=2897;
		sine[1782]=2890;
		sine[1783]=2892;
		sine[1784]=2885;
		sine[1785]=2887;
		sine[1786]=2880;
		sine[1787]=2883;
		sine[1788]=2875;
		sine[1789]=2878;
		sine[1790]=2870;
		sine[1791]=2873;
		sine[1792]=2865;
		sine[1793]=2868;
		sine[1794]=2860;
		sine[1795]=2863;
		sine[1796]=2855;
		sine[1797]=2858;
		sine[1798]=2850;
		sine[1799]=2853;
		sine[1800]=2845;
		sine[1801]=2848;
		sine[1802]=2840;
		sine[1803]=2843;
		sine[1804]=2835;
		sine[1805]=2838;
		sine[1806]=2830;
		sine[1807]=2833;
		sine[1808]=2825;
		sine[1809]=2828;
		sine[1810]=2820;
		sine[1811]=2823;
		sine[1812]=2815;
		sine[1813]=2818;
		sine[1814]=2810;
		sine[1815]=2813;
		sine[1816]=2805;
		sine[1817]=2808;
		sine[1818]=2800;
		sine[1819]=2803;
		sine[1820]=2795;
		sine[1821]=2798;
		sine[1822]=2790;
		sine[1823]=2793;
		sine[1824]=2785;
		sine[1825]=2788;
		sine[1826]=2780;
		sine[1827]=2782;
		sine[1828]=2775;
		sine[1829]=2777;
		sine[1830]=2770;
		sine[1831]=2772;
		sine[1832]=2765;
		sine[1833]=2767;
		sine[1834]=2760;
		sine[1835]=2762;
		sine[1836]=2755;
		sine[1837]=2757;
		sine[1838]=2749;
		sine[1839]=2752;
		sine[1840]=2744;
		sine[1841]=2747;
		sine[1842]=2739;
		sine[1843]=2742;
		sine[1844]=2734;
		sine[1845]=2737;
		sine[1846]=2729;
		sine[1847]=2732;
		sine[1848]=2724;
		sine[1849]=2727;
		sine[1850]=2719;
		sine[1851]=2721;
		sine[1852]=2714;
		sine[1853]=2716;
		sine[1854]=2709;
		sine[1855]=2711;
		sine[1856]=2703;
		sine[1857]=2706;
		sine[1858]=2698;
		sine[1859]=2701;
		sine[1860]=2693;
		sine[1861]=2696;
		sine[1862]=2688;
		sine[1863]=2691;
		sine[1864]=2683;
		sine[1865]=2685;
		sine[1866]=2678;
		sine[1867]=2680;
		sine[1868]=2673;
		sine[1869]=2675;
		sine[1870]=2667;
		sine[1871]=2670;
		sine[1872]=2662;
		sine[1873]=2665;
		sine[1874]=2657;
		sine[1875]=2660;
		sine[1876]=2652;
		sine[1877]=2654;
		sine[1878]=2647;
		sine[1879]=2649;
		sine[1880]=2641;
		sine[1881]=2644;
		sine[1882]=2636;
		sine[1883]=2639;
		sine[1884]=2631;
		sine[1885]=2634;
		sine[1886]=2626;
		sine[1887]=2628;
		sine[1888]=2621;
		sine[1889]=2623;
		sine[1890]=2615;
		sine[1891]=2618;
		sine[1892]=2610;
		sine[1893]=2613;
		sine[1894]=2605;
		sine[1895]=2608;
		sine[1896]=2600;
		sine[1897]=2602;
		sine[1898]=2595;
		sine[1899]=2597;
		sine[1900]=2589;
		sine[1901]=2592;
		sine[1902]=2584;
		sine[1903]=2587;
		sine[1904]=2579;
		sine[1905]=2581;
		sine[1906]=2574;
		sine[1907]=2576;
		sine[1908]=2568;
		sine[1909]=2571;
		sine[1910]=2563;
		sine[1911]=2566;
		sine[1912]=2558;
		sine[1913]=2560;
		sine[1914]=2553;
		sine[1915]=2555;
		sine[1916]=2547;
		sine[1917]=2550;
		sine[1918]=2542;
		sine[1919]=2545;
		sine[1920]=2537;
		sine[1921]=2539;
		sine[1922]=2532;
		sine[1923]=2534;
		sine[1924]=2526;
		sine[1925]=2529;
		sine[1926]=2521;
		sine[1927]=2524;
		sine[1928]=2516;
		sine[1929]=2518;
		sine[1930]=2510;
		sine[1931]=2513;
		sine[1932]=2505;
		sine[1933]=2508;
		sine[1934]=2500;
		sine[1935]=2502;
		sine[1936]=2495;
		sine[1937]=2497;
		sine[1938]=2489;
		sine[1939]=2492;
		sine[1940]=2484;
		sine[1941]=2487;
		sine[1942]=2479;
		sine[1943]=2481;
		sine[1944]=2473;
		sine[1945]=2476;
		sine[1946]=2468;
		sine[1947]=2471;
		sine[1948]=2463;
		sine[1949]=2465;
		sine[1950]=2457;
		sine[1951]=2460;
		sine[1952]=2452;
		sine[1953]=2455;
		sine[1954]=2447;
		sine[1955]=2449;
		sine[1956]=2441;
		sine[1957]=2444;
		sine[1958]=2436;
		sine[1959]=2439;
		sine[1960]=2431;
		sine[1961]=2434;
		sine[1962]=2426;
		sine[1963]=2428;
		sine[1964]=2420;
		sine[1965]=2423;
		sine[1966]=2415;
		sine[1967]=2418;
		sine[1968]=2410;
		sine[1969]=2412;
		sine[1970]=2404;
		sine[1971]=2407;
		sine[1972]=2399;
		sine[1973]=2402;
		sine[1974]=2394;
		sine[1975]=2396;
		sine[1976]=2388;
		sine[1977]=2391;
		sine[1978]=2383;
		sine[1979]=2386;
		sine[1980]=2378;
		sine[1981]=2380;
		sine[1982]=2372;
		sine[1983]=2375;
		sine[1984]=2367;
		sine[1985]=2370;
		sine[1986]=2362;
		sine[1987]=2364;
		sine[1988]=2356;
		sine[1989]=2359;
		sine[1990]=2351;
		sine[1991]=2353;
		sine[1992]=2345;
		sine[1993]=2348;
		sine[1994]=2340;
		sine[1995]=2343;
		sine[1996]=2335;
		sine[1997]=2337;
		sine[1998]=2329;
		sine[1999]=2332;
		sine[2000]=2324;
		sine[2001]=2327;
		sine[2002]=2319;
		sine[2003]=2321;
		sine[2004]=2313;
		sine[2005]=2316;
		sine[2006]=2308;
		sine[2007]=2311;
		sine[2008]=2303;
		sine[2009]=2305;
		sine[2010]=2297;
		sine[2011]=2300;
		sine[2012]=2292;
		sine[2013]=2295;
		sine[2014]=2287;
		sine[2015]=2289;
		sine[2016]=2281;
		sine[2017]=2284;
		sine[2018]=2276;
		sine[2019]=2279;
		sine[2020]=2270;
		sine[2021]=2273;
		sine[2022]=2265;
		sine[2023]=2268;
		sine[2024]=2260;
		sine[2025]=2262;
		sine[2026]=2254;
		sine[2027]=2257;
		sine[2028]=2249;
		sine[2029]=2252;
		sine[2030]=2244;
		sine[2031]=2246;
		sine[2032]=2238;
		sine[2033]=2241;
		sine[2034]=2233;
		sine[2035]=2236;
		sine[2036]=2228;
		sine[2037]=2230;
		sine[2038]=2222;
		sine[2039]=2225;
		sine[2040]=2217;
		sine[2041]=2219;
		sine[2042]=2211;
		sine[2043]=2214;
		sine[2044]=2206;
		sine[2045]=2209;
		sine[2046]=2201;
		sine[2047]=2203;
		sine[2048]=2195;
		sine[2049]=2198;
		sine[2050]=2190;
		sine[2051]=2193;
		sine[2052]=2185;
		sine[2053]=2187;
		sine[2054]=2179;
		sine[2055]=2182;
		sine[2056]=2174;
		sine[2057]=2177;
		sine[2058]=2168;
		sine[2059]=2171;
		sine[2060]=2163;
		sine[2061]=2166;
		sine[2062]=2158;
		sine[2063]=2160;
		sine[2064]=2152;
		sine[2065]=2155;
		sine[2066]=2147;
		sine[2067]=2150;
		sine[2068]=2142;
		sine[2069]=2144;
		sine[2070]=2136;
		sine[2071]=2139;
		sine[2072]=2131;
		sine[2073]=2134;
		sine[2074]=2126;
		sine[2075]=2128;
		sine[2076]=2120;
		sine[2077]=2123;
		sine[2078]=2115;
		sine[2079]=2117;
		sine[2080]=2109;
		sine[2081]=2112;
		sine[2082]=2104;
		sine[2083]=2107;
		sine[2084]=2099;
		sine[2085]=2101;
		sine[2086]=2093;
		sine[2087]=2096;
		sine[2088]=2088;
		sine[2089]=2091;
		sine[2090]=2083;
		sine[2091]=2085;
		sine[2092]=2077;
		sine[2093]=2080;
		sine[2094]=2072;
		sine[2095]=2075;
		sine[2096]=2067;
		sine[2097]=2069;
		sine[2098]=2061;
		sine[2099]=2064;
		sine[2100]=2056;
		sine[2101]=2059;
		sine[2102]=2051;
		sine[2103]=2053;
		sine[2104]=2045;
		sine[2105]=2048;
		sine[2106]=2040;
		sine[2107]=2043;
		sine[2108]=2034;
		sine[2109]=2037;
		sine[2110]=2029;
		sine[2111]=2032;
		sine[2112]=2024;
		sine[2113]=2026;
		sine[2114]=2018;
		sine[2115]=2021;
		sine[2116]=2013;
		sine[2117]=2016;
		sine[2118]=2008;
		sine[2119]=2010;
		sine[2120]=2002;
		sine[2121]=2005;
		sine[2122]=1997;
		sine[2123]=2000;
		sine[2124]=1992;
		sine[2125]=1994;
		sine[2126]=1986;
		sine[2127]=1989;
		sine[2128]=1981;
		sine[2129]=1984;
		sine[2130]=1976;
		sine[2131]=1978;
		sine[2132]=1970;
		sine[2133]=1973;
		sine[2134]=1965;
		sine[2135]=1968;
		sine[2136]=1960;
		sine[2137]=1962;
		sine[2138]=1955;
		sine[2139]=1957;
		sine[2140]=1949;
		sine[2141]=1952;
		sine[2142]=1944;
		sine[2143]=1947;
		sine[2144]=1939;
		sine[2145]=1941;
		sine[2146]=1933;
		sine[2147]=1936;
		sine[2148]=1928;
		sine[2149]=1931;
		sine[2150]=1923;
		sine[2151]=1925;
		sine[2152]=1917;
		sine[2153]=1920;
		sine[2154]=1912;
		sine[2155]=1915;
		sine[2156]=1907;
		sine[2157]=1909;
		sine[2158]=1901;
		sine[2159]=1904;
		sine[2160]=1896;
		sine[2161]=1899;
		sine[2162]=1891;
		sine[2163]=1894;
		sine[2164]=1886;
		sine[2165]=1888;
		sine[2166]=1880;
		sine[2167]=1883;
		sine[2168]=1875;
		sine[2169]=1878;
		sine[2170]=1870;
		sine[2171]=1872;
		sine[2172]=1864;
		sine[2173]=1867;
		sine[2174]=1859;
		sine[2175]=1862;
		sine[2176]=1854;
		sine[2177]=1857;
		sine[2178]=1849;
		sine[2179]=1851;
		sine[2180]=1843;
		sine[2181]=1846;
		sine[2182]=1838;
		sine[2183]=1841;
		sine[2184]=1833;
		sine[2185]=1836;
		sine[2186]=1828;
		sine[2187]=1830;
		sine[2188]=1822;
		sine[2189]=1825;
		sine[2190]=1817;
		sine[2191]=1820;
		sine[2192]=1812;
		sine[2193]=1815;
		sine[2194]=1807;
		sine[2195]=1809;
		sine[2196]=1801;
		sine[2197]=1804;
		sine[2198]=1796;
		sine[2199]=1799;
		sine[2200]=1791;
		sine[2201]=1794;
		sine[2202]=1786;
		sine[2203]=1788;
		sine[2204]=1781;
		sine[2205]=1783;
		sine[2206]=1775;
		sine[2207]=1778;
		sine[2208]=1770;
		sine[2209]=1773;
		sine[2210]=1765;
		sine[2211]=1768;
		sine[2212]=1760;
		sine[2213]=1762;
		sine[2214]=1755;
		sine[2215]=1757;
		sine[2216]=1749;
		sine[2217]=1752;
		sine[2218]=1744;
		sine[2219]=1747;
		sine[2220]=1739;
		sine[2221]=1742;
		sine[2222]=1734;
		sine[2223]=1736;
		sine[2224]=1729;
		sine[2225]=1731;
		sine[2226]=1723;
		sine[2227]=1726;
		sine[2228]=1718;
		sine[2229]=1721;
		sine[2230]=1713;
		sine[2231]=1716;
		sine[2232]=1708;
		sine[2233]=1711;
		sine[2234]=1703;
		sine[2235]=1705;
		sine[2236]=1698;
		sine[2237]=1700;
		sine[2238]=1693;
		sine[2239]=1695;
		sine[2240]=1687;
		sine[2241]=1690;
		sine[2242]=1682;
		sine[2243]=1685;
		sine[2244]=1677;
		sine[2245]=1680;
		sine[2246]=1672;
		sine[2247]=1675;
		sine[2248]=1667;
		sine[2249]=1669;
		sine[2250]=1662;
		sine[2251]=1664;
		sine[2252]=1657;
		sine[2253]=1659;
		sine[2254]=1652;
		sine[2255]=1654;
		sine[2256]=1647;
		sine[2257]=1649;
		sine[2258]=1641;
		sine[2259]=1644;
		sine[2260]=1636;
		sine[2261]=1639;
		sine[2262]=1631;
		sine[2263]=1634;
		sine[2264]=1626;
		sine[2265]=1629;
		sine[2266]=1621;
		sine[2267]=1624;
		sine[2268]=1616;
		sine[2269]=1619;
		sine[2270]=1611;
		sine[2271]=1614;
		sine[2272]=1606;
		sine[2273]=1608;
		sine[2274]=1601;
		sine[2275]=1603;
		sine[2276]=1596;
		sine[2277]=1598;
		sine[2278]=1591;
		sine[2279]=1593;
		sine[2280]=1586;
		sine[2281]=1588;
		sine[2282]=1581;
		sine[2283]=1583;
		sine[2284]=1576;
		sine[2285]=1578;
		sine[2286]=1571;
		sine[2287]=1573;
		sine[2288]=1566;
		sine[2289]=1568;
		sine[2290]=1561;
		sine[2291]=1563;
		sine[2292]=1556;
		sine[2293]=1558;
		sine[2294]=1551;
		sine[2295]=1553;
		sine[2296]=1546;
		sine[2297]=1548;
		sine[2298]=1541;
		sine[2299]=1543;
		sine[2300]=1536;
		sine[2301]=1538;
		sine[2302]=1531;
		sine[2303]=1533;
		sine[2304]=1526;
		sine[2305]=1528;
		sine[2306]=1521;
		sine[2307]=1523;
		sine[2308]=1516;
		sine[2309]=1518;
		sine[2310]=1511;
		sine[2311]=1513;
		sine[2312]=1506;
		sine[2313]=1509;
		sine[2314]=1501;
		sine[2315]=1504;
		sine[2316]=1496;
		sine[2317]=1499;
		sine[2318]=1491;
		sine[2319]=1494;
		sine[2320]=1486;
		sine[2321]=1489;
		sine[2322]=1481;
		sine[2323]=1484;
		sine[2324]=1477;
		sine[2325]=1479;
		sine[2326]=1472;
		sine[2327]=1474;
		sine[2328]=1467;
		sine[2329]=1469;
		sine[2330]=1462;
		sine[2331]=1464;
		sine[2332]=1457;
		sine[2333]=1459;
		sine[2334]=1452;
		sine[2335]=1455;
		sine[2336]=1447;
		sine[2337]=1450;
		sine[2338]=1443;
		sine[2339]=1445;
		sine[2340]=1438;
		sine[2341]=1440;
		sine[2342]=1433;
		sine[2343]=1435;
		sine[2344]=1428;
		sine[2345]=1430;
		sine[2346]=1423;
		sine[2347]=1426;
		sine[2348]=1418;
		sine[2349]=1421;
		sine[2350]=1414;
		sine[2351]=1416;
		sine[2352]=1409;
		sine[2353]=1411;
		sine[2354]=1404;
		sine[2355]=1406;
		sine[2356]=1399;
		sine[2357]=1402;
		sine[2358]=1394;
		sine[2359]=1397;
		sine[2360]=1390;
		sine[2361]=1392;
		sine[2362]=1385;
		sine[2363]=1387;
		sine[2364]=1380;
		sine[2365]=1383;
		sine[2366]=1375;
		sine[2367]=1378;
		sine[2368]=1371;
		sine[2369]=1373;
		sine[2370]=1366;
		sine[2371]=1368;
		sine[2372]=1361;
		sine[2373]=1364;
		sine[2374]=1357;
		sine[2375]=1359;
		sine[2376]=1352;
		sine[2377]=1354;
		sine[2378]=1347;
		sine[2379]=1349;
		sine[2380]=1342;
		sine[2381]=1345;
		sine[2382]=1338;
		sine[2383]=1340;
		sine[2384]=1333;
		sine[2385]=1335;
		sine[2386]=1328;
		sine[2387]=1331;
		sine[2388]=1324;
		sine[2389]=1326;
		sine[2390]=1319;
		sine[2391]=1321;
		sine[2392]=1314;
		sine[2393]=1317;
		sine[2394]=1310;
		sine[2395]=1312;
		sine[2396]=1305;
		sine[2397]=1308;
		sine[2398]=1301;
		sine[2399]=1303;
		sine[2400]=1296;
		sine[2401]=1298;
		sine[2402]=1291;
		sine[2403]=1294;
		sine[2404]=1287;
		sine[2405]=1289;
		sine[2406]=1282;
		sine[2407]=1285;
		sine[2408]=1278;
		sine[2409]=1280;
		sine[2410]=1273;
		sine[2411]=1275;
		sine[2412]=1269;
		sine[2413]=1271;
		sine[2414]=1264;
		sine[2415]=1266;
		sine[2416]=1259;
		sine[2417]=1262;
		sine[2418]=1255;
		sine[2419]=1257;
		sine[2420]=1250;
		sine[2421]=1253;
		sine[2422]=1246;
		sine[2423]=1248;
		sine[2424]=1241;
		sine[2425]=1244;
		sine[2426]=1237;
		sine[2427]=1239;
		sine[2428]=1232;
		sine[2429]=1235;
		sine[2430]=1228;
		sine[2431]=1230;
		sine[2432]=1224;
		sine[2433]=1226;
		sine[2434]=1219;
		sine[2435]=1221;
		sine[2436]=1215;
		sine[2437]=1217;
		sine[2438]=1210;
		sine[2439]=1212;
		sine[2440]=1206;
		sine[2441]=1208;
		sine[2442]=1201;
		sine[2443]=1204;
		sine[2444]=1197;
		sine[2445]=1199;
		sine[2446]=1193;
		sine[2447]=1195;
		sine[2448]=1188;
		sine[2449]=1190;
		sine[2450]=1184;
		sine[2451]=1186;
		sine[2452]=1179;
		sine[2453]=1182;
		sine[2454]=1175;
		sine[2455]=1177;
		sine[2456]=1171;
		sine[2457]=1173;
		sine[2458]=1166;
		sine[2459]=1169;
		sine[2460]=1162;
		sine[2461]=1164;
		sine[2462]=1158;
		sine[2463]=1160;
		sine[2464]=1153;
		sine[2465]=1156;
		sine[2466]=1149;
		sine[2467]=1151;
		sine[2468]=1145;
		sine[2469]=1147;
		sine[2470]=1140;
		sine[2471]=1143;
		sine[2472]=1136;
		sine[2473]=1138;
		sine[2474]=1132;
		sine[2475]=1134;
		sine[2476]=1128;
		sine[2477]=1130;
		sine[2478]=1123;
		sine[2479]=1126;
		sine[2480]=1119;
		sine[2481]=1121;
		sine[2482]=1115;
		sine[2483]=1117;
		sine[2484]=1111;
		sine[2485]=1113;
		sine[2486]=1107;
		sine[2487]=1109;
		sine[2488]=1102;
		sine[2489]=1104;
		sine[2490]=1098;
		sine[2491]=1100;
		sine[2492]=1094;
		sine[2493]=1096;
		sine[2494]=1090;
		sine[2495]=1092;
		sine[2496]=1086;
		sine[2497]=1088;
		sine[2498]=1082;
		sine[2499]=1084;
		sine[2500]=1077;
		sine[2501]=1080;
		sine[2502]=1073;
		sine[2503]=1075;
		sine[2504]=1069;
		sine[2505]=1071;
		sine[2506]=1065;
		sine[2507]=1067;
		sine[2508]=1061;
		sine[2509]=1063;
		sine[2510]=1057;
		sine[2511]=1059;
		sine[2512]=1053;
		sine[2513]=1055;
		sine[2514]=1049;
		sine[2515]=1051;
		sine[2516]=1045;
		sine[2517]=1047;
		sine[2518]=1041;
		sine[2519]=1043;
		sine[2520]=1037;
		sine[2521]=1039;
		sine[2522]=1033;
		sine[2523]=1035;
		sine[2524]=1029;
		sine[2525]=1031;
		sine[2526]=1025;
		sine[2527]=1027;
		sine[2528]=1021;
		sine[2529]=1023;
		sine[2530]=1017;
		sine[2531]=1019;
		sine[2532]=1013;
		sine[2533]=1015;
		sine[2534]=1009;
		sine[2535]=1011;
		sine[2536]=1005;
		sine[2537]=1007;
		sine[2538]=1001;
		sine[2539]=1003;
		sine[2540]=997;
		sine[2541]=999;
		sine[2542]=993;
		sine[2543]=995;
		sine[2544]=989;
		sine[2545]=991;
		sine[2546]=985;
		sine[2547]=987;
		sine[2548]=982;
		sine[2549]=984;
		sine[2550]=978;
		sine[2551]=980;
		sine[2552]=974;
		sine[2553]=976;
		sine[2554]=970;
		sine[2555]=972;
		sine[2556]=966;
		sine[2557]=968;
		sine[2558]=962;
		sine[2559]=964;
		sine[2560]=959;
		sine[2561]=961;
		sine[2562]=955;
		sine[2563]=957;
		sine[2564]=951;
		sine[2565]=953;
		sine[2566]=947;
		sine[2567]=949;
		sine[2568]=944;
		sine[2569]=945;
		sine[2570]=940;
		sine[2571]=942;
		sine[2572]=936;
		sine[2573]=938;
		sine[2574]=932;
		sine[2575]=934;
		sine[2576]=929;
		sine[2577]=931;
		sine[2578]=925;
		sine[2579]=927;
		sine[2580]=921;
		sine[2581]=923;
		sine[2582]=918;
		sine[2583]=920;
		sine[2584]=914;
		sine[2585]=916;
		sine[2586]=910;
		sine[2587]=912;
		sine[2588]=907;
		sine[2589]=909;
		sine[2590]=903;
		sine[2591]=905;
		sine[2592]=900;
		sine[2593]=901;
		sine[2594]=896;
		sine[2595]=898;
		sine[2596]=892;
		sine[2597]=894;
		sine[2598]=889;
		sine[2599]=891;
		sine[2600]=885;
		sine[2601]=887;
		sine[2602]=882;
		sine[2603]=883;
		sine[2604]=878;
		sine[2605]=880;
		sine[2606]=875;
		sine[2607]=876;
		sine[2608]=871;
		sine[2609]=873;
		sine[2610]=868;
		sine[2611]=869;
		sine[2612]=864;
		sine[2613]=866;
		sine[2614]=861;
		sine[2615]=862;
		sine[2616]=857;
		sine[2617]=859;
		sine[2618]=854;
		sine[2619]=856;
		sine[2620]=850;
		sine[2621]=852;
		sine[2622]=847;
		sine[2623]=849;
		sine[2624]=844;
		sine[2625]=845;
		sine[2626]=840;
		sine[2627]=842;
		sine[2628]=837;
		sine[2629]=838;
		sine[2630]=833;
		sine[2631]=835;
		sine[2632]=830;
		sine[2633]=832;
		sine[2634]=827;
		sine[2635]=828;
		sine[2636]=823;
		sine[2637]=825;
		sine[2638]=820;
		sine[2639]=822;
		sine[2640]=817;
		sine[2641]=818;
		sine[2642]=813;
		sine[2643]=815;
		sine[2644]=810;
		sine[2645]=812;
		sine[2646]=807;
		sine[2647]=809;
		sine[2648]=804;
		sine[2649]=805;
		sine[2650]=800;
		sine[2651]=802;
		sine[2652]=797;
		sine[2653]=799;
		sine[2654]=794;
		sine[2655]=796;
		sine[2656]=791;
		sine[2657]=792;
		sine[2658]=788;
		sine[2659]=789;
		sine[2660]=784;
		sine[2661]=786;
		sine[2662]=781;
		sine[2663]=783;
		sine[2664]=778;
		sine[2665]=780;
		sine[2666]=775;
		sine[2667]=777;
		sine[2668]=772;
		sine[2669]=773;
		sine[2670]=769;
		sine[2671]=770;
		sine[2672]=766;
		sine[2673]=767;
		sine[2674]=763;
		sine[2675]=764;
		sine[2676]=760;
		sine[2677]=761;
		sine[2678]=756;
		sine[2679]=758;
		sine[2680]=753;
		sine[2681]=755;
		sine[2682]=750;
		sine[2683]=752;
		sine[2684]=747;
		sine[2685]=749;
		sine[2686]=744;
		sine[2687]=746;
		sine[2688]=741;
		sine[2689]=743;
		sine[2690]=738;
		sine[2691]=740;
		sine[2692]=736;
		sine[2693]=737;
		sine[2694]=733;
		sine[2695]=734;
		sine[2696]=730;
		sine[2697]=731;
		sine[2698]=727;
		sine[2699]=728;
		sine[2700]=724;
		sine[2701]=725;
		sine[2702]=721;
		sine[2703]=722;
		sine[2704]=718;
		sine[2705]=720;
		sine[2706]=715;
		sine[2707]=717;
		sine[2708]=712;
		sine[2709]=714;
		sine[2710]=710;
		sine[2711]=711;
		sine[2712]=707;
		sine[2713]=708;
		sine[2714]=704;
		sine[2715]=705;
		sine[2716]=701;
		sine[2717]=703;
		sine[2718]=698;
		sine[2719]=700;
		sine[2720]=696;
		sine[2721]=697;
		sine[2722]=693;
		sine[2723]=694;
		sine[2724]=690;
		sine[2725]=691;
		sine[2726]=687;
		sine[2727]=689;
		sine[2728]=685;
		sine[2729]=686;
		sine[2730]=682;
		sine[2731]=683;
		sine[2732]=679;
		sine[2733]=681;
		sine[2734]=677;
		sine[2735]=678;
		sine[2736]=674;
		sine[2737]=675;
		sine[2738]=671;
		sine[2739]=673;
		sine[2740]=669;
		sine[2741]=670;
		sine[2742]=666;
		sine[2743]=667;
		sine[2744]=664;
		sine[2745]=665;
		sine[2746]=661;
		sine[2747]=662;
		sine[2748]=658;
		sine[2749]=660;
		sine[2750]=656;
		sine[2751]=657;
		sine[2752]=653;
		sine[2753]=655;
		sine[2754]=651;
		sine[2755]=652;
		sine[2756]=648;
		sine[2757]=650;
		sine[2758]=646;
		sine[2759]=647;
		sine[2760]=643;
		sine[2761]=645;
		sine[2762]=641;
		sine[2763]=642;
		sine[2764]=638;
		sine[2765]=640;
		sine[2766]=636;
		sine[2767]=637;
		sine[2768]=634;
		sine[2769]=635;
		sine[2770]=631;
		sine[2771]=632;
		sine[2772]=629;
		sine[2773]=630;
		sine[2774]=626;
		sine[2775]=628;
		sine[2776]=624;
		sine[2777]=625;
		sine[2778]=622;
		sine[2779]=623;
		sine[2780]=619;
		sine[2781]=621;
		sine[2782]=617;
		sine[2783]=618;
		sine[2784]=615;
		sine[2785]=616;
		sine[2786]=613;
		sine[2787]=614;
		sine[2788]=610;
		sine[2789]=611;
		sine[2790]=608;
		sine[2791]=609;
		sine[2792]=606;
		sine[2793]=607;
		sine[2794]=604;
		sine[2795]=605;
		sine[2796]=601;
		sine[2797]=603;
		sine[2798]=599;
		sine[2799]=600;
		sine[2800]=597;
		sine[2801]=598;
		sine[2802]=595;
		sine[2803]=596;
		sine[2804]=593;
		sine[2805]=594;
		sine[2806]=591;
		sine[2807]=592;
		sine[2808]=588;
		sine[2809]=590;
		sine[2810]=586;
		sine[2811]=587;
		sine[2812]=584;
		sine[2813]=585;
		sine[2814]=582;
		sine[2815]=583;
		sine[2816]=580;
		sine[2817]=581;
		sine[2818]=578;
		sine[2819]=579;
		sine[2820]=576;
		sine[2821]=577;
		sine[2822]=574;
		sine[2823]=575;
		sine[2824]=572;
		sine[2825]=573;
		sine[2826]=570;
		sine[2827]=571;
		sine[2828]=568;
		sine[2829]=569;
		sine[2830]=566;
		sine[2831]=567;
		sine[2832]=564;
		sine[2833]=565;
		sine[2834]=562;
		sine[2835]=563;
		sine[2836]=560;
		sine[2837]=561;
		sine[2838]=559;
		sine[2839]=560;
		sine[2840]=557;
		sine[2841]=558;
		sine[2842]=555;
		sine[2843]=556;
		sine[2844]=553;
		sine[2845]=554;
		sine[2846]=551;
		sine[2847]=552;
		sine[2848]=549;
		sine[2849]=550;
		sine[2850]=548;
		sine[2851]=548;
		sine[2852]=546;
		sine[2853]=547;
		sine[2854]=544;
		sine[2855]=545;
		sine[2856]=542;
		sine[2857]=543;
		sine[2858]=541;
		sine[2859]=541;
		sine[2860]=539;
		sine[2861]=540;
		sine[2862]=537;
		sine[2863]=538;
		sine[2864]=535;
		sine[2865]=536;
		sine[2866]=534;
		sine[2867]=535;
		sine[2868]=532;
		sine[2869]=533;
		sine[2870]=531;
		sine[2871]=531;
		sine[2872]=529;
		sine[2873]=530;
		sine[2874]=527;
		sine[2875]=528;
		sine[2876]=526;
		sine[2877]=527;
		sine[2878]=524;
		sine[2879]=525;
		sine[2880]=523;
		sine[2881]=523;
		sine[2882]=521;
		sine[2883]=522;
		sine[2884]=520;
		sine[2885]=520;
		sine[2886]=518;
		sine[2887]=519;
		sine[2888]=517;
		sine[2889]=517;
		sine[2890]=515;
		sine[2891]=516;
		sine[2892]=514;
		sine[2893]=514;
		sine[2894]=512;
		sine[2895]=513;
		sine[2896]=511;
		sine[2897]=511;
		sine[2898]=509;
		sine[2899]=510;
		sine[2900]=508;
		sine[2901]=509;
		sine[2902]=506;
		sine[2903]=507;
		sine[2904]=505;
		sine[2905]=506;
		sine[2906]=504;
		sine[2907]=504;
		sine[2908]=502;
		sine[2909]=503;
		sine[2910]=501;
		sine[2911]=502;
		sine[2912]=500;
		sine[2913]=500;
		sine[2914]=499;
		sine[2915]=499;
		sine[2916]=497;
		sine[2917]=498;
		sine[2918]=496;
		sine[2919]=497;
		sine[2920]=495;
		sine[2921]=495;
		sine[2922]=494;
		sine[2923]=494;
		sine[2924]=492;
		sine[2925]=493;
		sine[2926]=491;
		sine[2927]=492;
		sine[2928]=490;
		sine[2929]=491;
		sine[2930]=489;
		sine[2931]=489;
		sine[2932]=488;
		sine[2933]=488;
		sine[2934]=487;
		sine[2935]=487;
		sine[2936]=485;
		sine[2937]=486;
		sine[2938]=484;
		sine[2939]=485;
		sine[2940]=483;
		sine[2941]=484;
		sine[2942]=482;
		sine[2943]=483;
		sine[2944]=481;
		sine[2945]=482;
		sine[2946]=480;
		sine[2947]=481;
		sine[2948]=479;
		sine[2949]=480;
		sine[2950]=478;
		sine[2951]=479;
		sine[2952]=477;
		sine[2953]=478;
		sine[2954]=476;
		sine[2955]=477;
		sine[2956]=475;
		sine[2957]=476;
		sine[2958]=474;
		sine[2959]=475;
		sine[2960]=473;
		sine[2961]=474;
		sine[2962]=472;
		sine[2963]=473;
		sine[2964]=472;
		sine[2965]=472;
		sine[2966]=471;
		sine[2967]=471;
		sine[2968]=470;
		sine[2969]=470;
		sine[2970]=469;
		sine[2971]=469;
		sine[2972]=468;
		sine[2973]=469;
		sine[2974]=467;
		sine[2975]=468;
		sine[2976]=467;
		sine[2977]=467;
		sine[2978]=466;
		sine[2979]=466;
		sine[2980]=465;
		sine[2981]=465;
		sine[2982]=464;
		sine[2983]=465;
		sine[2984]=464;
		sine[2985]=464;
		sine[2986]=463;
		sine[2987]=463;
		sine[2988]=462;
		sine[2989]=463;
		sine[2990]=461;
		sine[2991]=462;
		sine[2992]=461;
		sine[2993]=461;
		sine[2994]=460;
		sine[2995]=461;
		sine[2996]=460;
		sine[2997]=460;
		sine[2998]=459;
		sine[2999]=459;
		sine[3000]=458;
		sine[3001]=459;
		sine[3002]=458;
		sine[3003]=458;
		sine[3004]=457;
		sine[3005]=458;
		sine[3006]=457;
		sine[3007]=457;
		sine[3008]=456;
		sine[3009]=456;
		sine[3010]=456;
		sine[3011]=456;
		sine[3012]=455;
		sine[3013]=455;
		sine[3014]=455;
		sine[3015]=455;
		sine[3016]=454;
		sine[3017]=454;
		sine[3018]=454;
		sine[3019]=454;
		sine[3020]=453;
		sine[3021]=454;
		sine[3022]=453;
		sine[3023]=453;
		sine[3024]=453;
		sine[3025]=453;
		sine[3026]=452;
		sine[3027]=452;
		sine[3028]=452;
		sine[3029]=452;
		sine[3030]=451;
		sine[3031]=452;
		sine[3032]=451;
		sine[3033]=451;
		sine[3034]=451;
		sine[3035]=451;
		sine[3036]=451;
		sine[3037]=451;
		sine[3038]=450;
		sine[3039]=450;
		sine[3040]=450;
		sine[3041]=450;
		sine[3042]=450;
		sine[3043]=450;
		sine[3044]=450;
		sine[3045]=450;
		sine[3046]=449;
		sine[3047]=449;
		sine[3048]=449;
		sine[3049]=449;
		sine[3050]=449;
		sine[3051]=449;
		sine[3052]=449;
		sine[3053]=449;
		sine[3054]=449;
		sine[3055]=449;
		sine[3056]=448;
		sine[3057]=449;
		sine[3058]=448;
		sine[3059]=448;
		sine[3060]=448;
		sine[3061]=448;
		sine[3062]=448;
		sine[3063]=448;
		sine[3064]=448;
		sine[3065]=448;
		sine[3066]=448;
		sine[3067]=448;
		sine[3068]=448;
		sine[3069]=448;
		sine[3070]=448;
		sine[3071]=448;
		sine[3072]=448;
		sine[3073]=448;
		sine[3074]=448;
		sine[3075]=448;
		sine[3076]=448;
		sine[3077]=448;
		sine[3078]=448;
		sine[3079]=448;
		sine[3080]=448;
		sine[3081]=448;
		sine[3082]=448;
		sine[3083]=448;
		sine[3084]=448;
		sine[3085]=448;
		sine[3086]=448;
		sine[3087]=448;
		sine[3088]=449;
		sine[3089]=449;
		sine[3090]=449;
		sine[3091]=449;
		sine[3092]=449;
		sine[3093]=449;
		sine[3094]=449;
		sine[3095]=449;
		sine[3096]=449;
		sine[3097]=449;
		sine[3098]=450;
		sine[3099]=449;
		sine[3100]=450;
		sine[3101]=450;
		sine[3102]=450;
		sine[3103]=450;
		sine[3104]=450;
		sine[3105]=450;
		sine[3106]=451;
		sine[3107]=450;
		sine[3108]=451;
		sine[3109]=451;
		sine[3110]=451;
		sine[3111]=451;
		sine[3112]=451;
		sine[3113]=451;
		sine[3114]=452;
		sine[3115]=452;
		sine[3116]=452;
		sine[3117]=452;
		sine[3118]=453;
		sine[3119]=452;
		sine[3120]=453;
		sine[3121]=453;
		sine[3122]=453;
		sine[3123]=453;
		sine[3124]=454;
		sine[3125]=454;
		sine[3126]=454;
		sine[3127]=454;
		sine[3128]=455;
		sine[3129]=454;
		sine[3130]=455;
		sine[3131]=455;
		sine[3132]=456;
		sine[3133]=455;
		sine[3134]=456;
		sine[3135]=456;
		sine[3136]=457;
		sine[3137]=456;
		sine[3138]=457;
		sine[3139]=457;
		sine[3140]=458;
		sine[3141]=458;
		sine[3142]=458;
		sine[3143]=458;
		sine[3144]=459;
		sine[3145]=459;
		sine[3146]=460;
		sine[3147]=459;
		sine[3148]=460;
		sine[3149]=460;
		sine[3150]=461;
		sine[3151]=461;
		sine[3152]=461;
		sine[3153]=461;
		sine[3154]=462;
		sine[3155]=462;
		sine[3156]=463;
		sine[3157]=463;
		sine[3158]=464;
		sine[3159]=463;
		sine[3160]=464;
		sine[3161]=464;
		sine[3162]=465;
		sine[3163]=465;
		sine[3164]=466;
		sine[3165]=465;
		sine[3166]=467;
		sine[3167]=466;
		sine[3168]=467;
		sine[3169]=467;
		sine[3170]=468;
		sine[3171]=468;
		sine[3172]=469;
		sine[3173]=469;
		sine[3174]=470;
		sine[3175]=469;
		sine[3176]=471;
		sine[3177]=470;
		sine[3178]=472;
		sine[3179]=471;
		sine[3180]=472;
		sine[3181]=472;
		sine[3182]=473;
		sine[3183]=473;
		sine[3184]=474;
		sine[3185]=474;
		sine[3186]=475;
		sine[3187]=475;
		sine[3188]=476;
		sine[3189]=476;
		sine[3190]=477;
		sine[3191]=477;
		sine[3192]=478;
		sine[3193]=478;
		sine[3194]=479;
		sine[3195]=479;
		sine[3196]=480;
		sine[3197]=480;
		sine[3198]=481;
		sine[3199]=481;
		sine[3200]=482;
		sine[3201]=482;
		sine[3202]=483;
		sine[3203]=483;
		sine[3204]=484;
		sine[3205]=484;
		sine[3206]=485;
		sine[3207]=485;
		sine[3208]=487;
		sine[3209]=486;
		sine[3210]=488;
		sine[3211]=487;
		sine[3212]=489;
		sine[3213]=488;
		sine[3214]=490;
		sine[3215]=489;
		sine[3216]=491;
		sine[3217]=491;
		sine[3218]=492;
		sine[3219]=492;
		sine[3220]=494;
		sine[3221]=493;
		sine[3222]=495;
		sine[3223]=494;
		sine[3224]=496;
		sine[3225]=495;
		sine[3226]=497;
		sine[3227]=497;
		sine[3228]=499;
		sine[3229]=498;
		sine[3230]=500;
		sine[3231]=499;
		sine[3232]=501;
		sine[3233]=500;
		sine[3234]=502;
		sine[3235]=502;
		sine[3236]=504;
		sine[3237]=503;
		sine[3238]=505;
		sine[3239]=504;
		sine[3240]=506;
		sine[3241]=506;
		sine[3242]=508;
		sine[3243]=507;
		sine[3244]=509;
		sine[3245]=509;
		sine[3246]=511;
		sine[3247]=510;
		sine[3248]=512;
		sine[3249]=511;
		sine[3250]=514;
		sine[3251]=513;
		sine[3252]=515;
		sine[3253]=514;
		sine[3254]=517;
		sine[3255]=516;
		sine[3256]=518;
		sine[3257]=517;
		sine[3258]=520;
		sine[3259]=519;
		sine[3260]=521;
		sine[3261]=520;
		sine[3262]=523;
		sine[3263]=522;
		sine[3264]=524;
		sine[3265]=523;
		sine[3266]=526;
		sine[3267]=525;
		sine[3268]=527;
		sine[3269]=527;
		sine[3270]=529;
		sine[3271]=528;
		sine[3272]=531;
		sine[3273]=530;
		sine[3274]=532;
		sine[3275]=531;
		sine[3276]=534;
		sine[3277]=533;
		sine[3278]=535;
		sine[3279]=535;
		sine[3280]=537;
		sine[3281]=536;
		sine[3282]=539;
		sine[3283]=538;
		sine[3284]=541;
		sine[3285]=540;
		sine[3286]=542;
		sine[3287]=541;
		sine[3288]=544;
		sine[3289]=543;
		sine[3290]=546;
		sine[3291]=545;
		sine[3292]=548;
		sine[3293]=547;
		sine[3294]=549;
		sine[3295]=548;
		sine[3296]=551;
		sine[3297]=550;
		sine[3298]=553;
		sine[3299]=552;
		sine[3300]=555;
		sine[3301]=554;
		sine[3302]=557;
		sine[3303]=556;
		sine[3304]=559;
		sine[3305]=558;
		sine[3306]=560;
		sine[3307]=560;
		sine[3308]=562;
		sine[3309]=561;
		sine[3310]=564;
		sine[3311]=563;
		sine[3312]=566;
		sine[3313]=565;
		sine[3314]=568;
		sine[3315]=567;
		sine[3316]=570;
		sine[3317]=569;
		sine[3318]=572;
		sine[3319]=571;
		sine[3320]=574;
		sine[3321]=573;
		sine[3322]=576;
		sine[3323]=575;
		sine[3324]=578;
		sine[3325]=577;
		sine[3326]=580;
		sine[3327]=579;
		sine[3328]=582;
		sine[3329]=581;
		sine[3330]=584;
		sine[3331]=583;
		sine[3332]=586;
		sine[3333]=585;
		sine[3334]=588;
		sine[3335]=587;
		sine[3336]=591;
		sine[3337]=590;
		sine[3338]=593;
		sine[3339]=592;
		sine[3340]=595;
		sine[3341]=594;
		sine[3342]=597;
		sine[3343]=596;
		sine[3344]=599;
		sine[3345]=598;
		sine[3346]=601;
		sine[3347]=600;
		sine[3348]=604;
		sine[3349]=603;
		sine[3350]=606;
		sine[3351]=605;
		sine[3352]=608;
		sine[3353]=607;
		sine[3354]=610;
		sine[3355]=609;
		sine[3356]=613;
		sine[3357]=611;
		sine[3358]=615;
		sine[3359]=614;
		sine[3360]=617;
		sine[3361]=616;
		sine[3362]=619;
		sine[3363]=618;
		sine[3364]=622;
		sine[3365]=621;
		sine[3366]=624;
		sine[3367]=623;
		sine[3368]=626;
		sine[3369]=625;
		sine[3370]=629;
		sine[3371]=628;
		sine[3372]=631;
		sine[3373]=630;
		sine[3374]=634;
		sine[3375]=632;
		sine[3376]=636;
		sine[3377]=635;
		sine[3378]=638;
		sine[3379]=637;
		sine[3380]=641;
		sine[3381]=640;
		sine[3382]=643;
		sine[3383]=642;
		sine[3384]=646;
		sine[3385]=645;
		sine[3386]=648;
		sine[3387]=647;
		sine[3388]=651;
		sine[3389]=650;
		sine[3390]=653;
		sine[3391]=652;
		sine[3392]=656;
		sine[3393]=655;
		sine[3394]=658;
		sine[3395]=657;
		sine[3396]=661;
		sine[3397]=660;
		sine[3398]=664;
		sine[3399]=662;
		sine[3400]=666;
		sine[3401]=665;
		sine[3402]=669;
		sine[3403]=667;
		sine[3404]=671;
		sine[3405]=670;
		sine[3406]=674;
		sine[3407]=673;
		sine[3408]=677;
		sine[3409]=675;
		sine[3410]=679;
		sine[3411]=678;
		sine[3412]=682;
		sine[3413]=681;
		sine[3414]=685;
		sine[3415]=683;
		sine[3416]=687;
		sine[3417]=686;
		sine[3418]=690;
		sine[3419]=689;
		sine[3420]=693;
		sine[3421]=691;
		sine[3422]=696;
		sine[3423]=694;
		sine[3424]=698;
		sine[3425]=697;
		sine[3426]=701;
		sine[3427]=700;
		sine[3428]=704;
		sine[3429]=703;
		sine[3430]=707;
		sine[3431]=705;
		sine[3432]=710;
		sine[3433]=708;
		sine[3434]=712;
		sine[3435]=711;
		sine[3436]=715;
		sine[3437]=714;
		sine[3438]=718;
		sine[3439]=717;
		sine[3440]=721;
		sine[3441]=720;
		sine[3442]=724;
		sine[3443]=722;
		sine[3444]=727;
		sine[3445]=725;
		sine[3446]=730;
		sine[3447]=728;
		sine[3448]=733;
		sine[3449]=731;
		sine[3450]=736;
		sine[3451]=734;
		sine[3452]=738;
		sine[3453]=737;
		sine[3454]=741;
		sine[3455]=740;
		sine[3456]=744;
		sine[3457]=743;
		sine[3458]=747;
		sine[3459]=746;
		sine[3460]=750;
		sine[3461]=749;
		sine[3462]=753;
		sine[3463]=752;
		sine[3464]=756;
		sine[3465]=755;
		sine[3466]=760;
		sine[3467]=758;
		sine[3468]=763;
		sine[3469]=761;
		sine[3470]=766;
		sine[3471]=764;
		sine[3472]=769;
		sine[3473]=767;
		sine[3474]=772;
		sine[3475]=770;
		sine[3476]=775;
		sine[3477]=773;
		sine[3478]=778;
		sine[3479]=777;
		sine[3480]=781;
		sine[3481]=780;
		sine[3482]=784;
		sine[3483]=783;
		sine[3484]=788;
		sine[3485]=786;
		sine[3486]=791;
		sine[3487]=789;
		sine[3488]=794;
		sine[3489]=792;
		sine[3490]=797;
		sine[3491]=796;
		sine[3492]=800;
		sine[3493]=799;
		sine[3494]=804;
		sine[3495]=802;
		sine[3496]=807;
		sine[3497]=805;
		sine[3498]=810;
		sine[3499]=809;
		sine[3500]=813;
		sine[3501]=812;
		sine[3502]=817;
		sine[3503]=815;
		sine[3504]=820;
		sine[3505]=818;
		sine[3506]=823;
		sine[3507]=822;
		sine[3508]=827;
		sine[3509]=825;
		sine[3510]=830;
		sine[3511]=828;
		sine[3512]=833;
		sine[3513]=832;
		sine[3514]=837;
		sine[3515]=835;
		sine[3516]=840;
		sine[3517]=838;
		sine[3518]=844;
		sine[3519]=842;
		sine[3520]=847;
		sine[3521]=845;
		sine[3522]=850;
		sine[3523]=849;
		sine[3524]=854;
		sine[3525]=852;
		sine[3526]=857;
		sine[3527]=856;
		sine[3528]=861;
		sine[3529]=859;
		sine[3530]=864;
		sine[3531]=862;
		sine[3532]=868;
		sine[3533]=866;
		sine[3534]=871;
		sine[3535]=869;
		sine[3536]=875;
		sine[3537]=873;
		sine[3538]=878;
		sine[3539]=876;
		sine[3540]=882;
		sine[3541]=880;
		sine[3542]=885;
		sine[3543]=883;
		sine[3544]=889;
		sine[3545]=887;
		sine[3546]=892;
		sine[3547]=891;
		sine[3548]=896;
		sine[3549]=894;
		sine[3550]=900;
		sine[3551]=898;
		sine[3552]=903;
		sine[3553]=901;
		sine[3554]=907;
		sine[3555]=905;
		sine[3556]=910;
		sine[3557]=909;
		sine[3558]=914;
		sine[3559]=912;
		sine[3560]=918;
		sine[3561]=916;
		sine[3562]=921;
		sine[3563]=920;
		sine[3564]=925;
		sine[3565]=923;
		sine[3566]=929;
		sine[3567]=927;
		sine[3568]=932;
		sine[3569]=931;
		sine[3570]=936;
		sine[3571]=934;
		sine[3572]=940;
		sine[3573]=938;
		sine[3574]=944;
		sine[3575]=942;
		sine[3576]=947;
		sine[3577]=945;
		sine[3578]=951;
		sine[3579]=949;
		sine[3580]=955;
		sine[3581]=953;
		sine[3582]=959;
		sine[3583]=957;
		sine[3584]=962;
		sine[3585]=961;
		sine[3586]=966;
		sine[3587]=964;
		sine[3588]=970;
		sine[3589]=968;
		sine[3590]=974;
		sine[3591]=972;
		sine[3592]=978;
		sine[3593]=976;
		sine[3594]=982;
		sine[3595]=980;
		sine[3596]=985;
		sine[3597]=984;
		sine[3598]=989;
		sine[3599]=987;
		sine[3600]=993;
		sine[3601]=991;
		sine[3602]=997;
		sine[3603]=995;
		sine[3604]=1001;
		sine[3605]=999;
		sine[3606]=1005;
		sine[3607]=1003;
		sine[3608]=1009;
		sine[3609]=1007;
		sine[3610]=1013;
		sine[3611]=1011;
		sine[3612]=1017;
		sine[3613]=1015;
		sine[3614]=1021;
		sine[3615]=1019;
		sine[3616]=1025;
		sine[3617]=1023;
		sine[3618]=1029;
		sine[3619]=1027;
		sine[3620]=1033;
		sine[3621]=1031;
		sine[3622]=1037;
		sine[3623]=1035;
		sine[3624]=1041;
		sine[3625]=1039;
		sine[3626]=1045;
		sine[3627]=1043;
		sine[3628]=1049;
		sine[3629]=1047;
		sine[3630]=1053;
		sine[3631]=1051;
		sine[3632]=1057;
		sine[3633]=1055;
		sine[3634]=1061;
		sine[3635]=1059;
		sine[3636]=1065;
		sine[3637]=1063;
		sine[3638]=1069;
		sine[3639]=1067;
		sine[3640]=1073;
		sine[3641]=1071;
		sine[3642]=1077;
		sine[3643]=1075;
		sine[3644]=1082;
		sine[3645]=1080;
		sine[3646]=1086;
		sine[3647]=1084;
		sine[3648]=1090;
		sine[3649]=1088;
		sine[3650]=1094;
		sine[3651]=1092;
		sine[3652]=1098;
		sine[3653]=1096;
		sine[3654]=1102;
		sine[3655]=1100;
		sine[3656]=1107;
		sine[3657]=1104;
		sine[3658]=1111;
		sine[3659]=1109;
		sine[3660]=1115;
		sine[3661]=1113;
		sine[3662]=1119;
		sine[3663]=1117;
		sine[3664]=1123;
		sine[3665]=1121;
		sine[3666]=1128;
		sine[3667]=1126;
		sine[3668]=1132;
		sine[3669]=1130;
		sine[3670]=1136;
		sine[3671]=1134;
		sine[3672]=1140;
		sine[3673]=1138;
		sine[3674]=1145;
		sine[3675]=1143;
		sine[3676]=1149;
		sine[3677]=1147;
		sine[3678]=1153;
		sine[3679]=1151;
		sine[3680]=1158;
		sine[3681]=1156;
		sine[3682]=1162;
		sine[3683]=1160;
		sine[3684]=1166;
		sine[3685]=1164;
		sine[3686]=1171;
		sine[3687]=1169;
		sine[3688]=1175;
		sine[3689]=1173;
		sine[3690]=1179;
		sine[3691]=1177;
		sine[3692]=1184;
		sine[3693]=1182;
		sine[3694]=1188;
		sine[3695]=1186;
		sine[3696]=1193;
		sine[3697]=1190;
		sine[3698]=1197;
		sine[3699]=1195;
		sine[3700]=1201;
		sine[3701]=1199;
		sine[3702]=1206;
		sine[3703]=1204;
		sine[3704]=1210;
		sine[3705]=1208;
		sine[3706]=1215;
		sine[3707]=1212;
		sine[3708]=1219;
		sine[3709]=1217;
		sine[3710]=1224;
		sine[3711]=1221;
		sine[3712]=1228;
		sine[3713]=1226;
		sine[3714]=1232;
		sine[3715]=1230;
		sine[3716]=1237;
		sine[3717]=1235;
		sine[3718]=1241;
		sine[3719]=1239;
		sine[3720]=1246;
		sine[3721]=1244;
		sine[3722]=1250;
		sine[3723]=1248;
		sine[3724]=1255;
		sine[3725]=1253;
		sine[3726]=1259;
		sine[3727]=1257;
		sine[3728]=1264;
		sine[3729]=1262;
		sine[3730]=1269;
		sine[3731]=1266;
		sine[3732]=1273;
		sine[3733]=1271;
		sine[3734]=1278;
		sine[3735]=1275;
		sine[3736]=1282;
		sine[3737]=1280;
		sine[3738]=1287;
		sine[3739]=1285;
		sine[3740]=1291;
		sine[3741]=1289;
		sine[3742]=1296;
		sine[3743]=1294;
		sine[3744]=1301;
		sine[3745]=1298;
		sine[3746]=1305;
		sine[3747]=1303;
		sine[3748]=1310;
		sine[3749]=1308;
		sine[3750]=1314;
		sine[3751]=1312;
		sine[3752]=1319;
		sine[3753]=1317;
		sine[3754]=1324;
		sine[3755]=1321;
		sine[3756]=1328;
		sine[3757]=1326;
		sine[3758]=1333;
		sine[3759]=1331;
		sine[3760]=1338;
		sine[3761]=1335;
		sine[3762]=1342;
		sine[3763]=1340;
		sine[3764]=1347;
		sine[3765]=1345;
		sine[3766]=1352;
		sine[3767]=1349;
		sine[3768]=1357;
		sine[3769]=1354;
		sine[3770]=1361;
		sine[3771]=1359;
		sine[3772]=1366;
		sine[3773]=1364;
		sine[3774]=1371;
		sine[3775]=1368;
		sine[3776]=1375;
		sine[3777]=1373;
		sine[3778]=1380;
		sine[3779]=1378;
		sine[3780]=1385;
		sine[3781]=1383;
		sine[3782]=1390;
		sine[3783]=1387;
		sine[3784]=1394;
		sine[3785]=1392;
		sine[3786]=1399;
		sine[3787]=1397;
		sine[3788]=1404;
		sine[3789]=1402;
		sine[3790]=1409;
		sine[3791]=1406;
		sine[3792]=1414;
		sine[3793]=1411;
		sine[3794]=1418;
		sine[3795]=1416;
		sine[3796]=1423;
		sine[3797]=1421;
		sine[3798]=1428;
		sine[3799]=1426;
		sine[3800]=1433;
		sine[3801]=1430;
		sine[3802]=1438;
		sine[3803]=1435;
		sine[3804]=1443;
		sine[3805]=1440;
		sine[3806]=1447;
		sine[3807]=1445;
		sine[3808]=1452;
		sine[3809]=1450;
		sine[3810]=1457;
		sine[3811]=1455;
		sine[3812]=1462;
		sine[3813]=1459;
		sine[3814]=1467;
		sine[3815]=1464;
		sine[3816]=1472;
		sine[3817]=1469;
		sine[3818]=1477;
		sine[3819]=1474;
		sine[3820]=1481;
		sine[3821]=1479;
		sine[3822]=1486;
		sine[3823]=1484;
		sine[3824]=1491;
		sine[3825]=1489;
		sine[3826]=1496;
		sine[3827]=1494;
		sine[3828]=1501;
		sine[3829]=1499;
		sine[3830]=1506;
		sine[3831]=1504;
		sine[3832]=1511;
		sine[3833]=1509;
		sine[3834]=1516;
		sine[3835]=1513;
		sine[3836]=1521;
		sine[3837]=1518;
		sine[3838]=1526;
		sine[3839]=1523;
		sine[3840]=1531;
		sine[3841]=1528;
		sine[3842]=1536;
		sine[3843]=1533;
		sine[3844]=1541;
		sine[3845]=1538;
		sine[3846]=1546;
		sine[3847]=1543;
		sine[3848]=1551;
		sine[3849]=1548;
		sine[3850]=1556;
		sine[3851]=1553;
		sine[3852]=1561;
		sine[3853]=1558;
		sine[3854]=1566;
		sine[3855]=1563;
		sine[3856]=1571;
		sine[3857]=1568;
		sine[3858]=1576;
		sine[3859]=1573;
		sine[3860]=1581;
		sine[3861]=1578;
		sine[3862]=1586;
		sine[3863]=1583;
		sine[3864]=1591;
		sine[3865]=1588;
		sine[3866]=1596;
		sine[3867]=1593;
		sine[3868]=1601;
		sine[3869]=1598;
		sine[3870]=1606;
		sine[3871]=1603;
		sine[3872]=1611;
		sine[3873]=1608;
		sine[3874]=1616;
		sine[3875]=1614;
		sine[3876]=1621;
		sine[3877]=1619;
		sine[3878]=1626;
		sine[3879]=1624;
		sine[3880]=1631;
		sine[3881]=1629;
		sine[3882]=1636;
		sine[3883]=1634;
		sine[3884]=1641;
		sine[3885]=1639;
		sine[3886]=1647;
		sine[3887]=1644;
		sine[3888]=1652;
		sine[3889]=1649;
		sine[3890]=1657;
		sine[3891]=1654;
		sine[3892]=1662;
		sine[3893]=1659;
		sine[3894]=1667;
		sine[3895]=1664;
		sine[3896]=1672;
		sine[3897]=1669;
		sine[3898]=1677;
		sine[3899]=1675;
		sine[3900]=1682;
		sine[3901]=1680;
		sine[3902]=1687;
		sine[3903]=1685;
		sine[3904]=1693;
		sine[3905]=1690;
		sine[3906]=1698;
		sine[3907]=1695;
		sine[3908]=1703;
		sine[3909]=1700;
		sine[3910]=1708;
		sine[3911]=1705;
		sine[3912]=1713;
		sine[3913]=1711;
		sine[3914]=1718;
		sine[3915]=1716;
		sine[3916]=1723;
		sine[3917]=1721;
		sine[3918]=1729;
		sine[3919]=1726;
		sine[3920]=1734;
		sine[3921]=1731;
		sine[3922]=1739;
		sine[3923]=1736;
		sine[3924]=1744;
		sine[3925]=1742;
		sine[3926]=1749;
		sine[3927]=1747;
		sine[3928]=1755;
		sine[3929]=1752;
		sine[3930]=1760;
		sine[3931]=1757;
		sine[3932]=1765;
		sine[3933]=1762;
		sine[3934]=1770;
		sine[3935]=1768;
		sine[3936]=1775;
		sine[3937]=1773;
		sine[3938]=1781;
		sine[3939]=1778;
		sine[3940]=1786;
		sine[3941]=1783;
		sine[3942]=1791;
		sine[3943]=1788;
		sine[3944]=1796;
		sine[3945]=1794;
		sine[3946]=1801;
		sine[3947]=1799;
		sine[3948]=1807;
		sine[3949]=1804;
		sine[3950]=1812;
		sine[3951]=1809;
		sine[3952]=1817;
		sine[3953]=1815;
		sine[3954]=1822;
		sine[3955]=1820;
		sine[3956]=1828;
		sine[3957]=1825;
		sine[3958]=1833;
		sine[3959]=1830;
		sine[3960]=1838;
		sine[3961]=1836;
		sine[3962]=1843;
		sine[3963]=1841;
		sine[3964]=1849;
		sine[3965]=1846;
		sine[3966]=1854;
		sine[3967]=1851;
		sine[3968]=1859;
		sine[3969]=1857;
		sine[3970]=1864;
		sine[3971]=1862;
		sine[3972]=1870;
		sine[3973]=1867;
		sine[3974]=1875;
		sine[3975]=1872;
		sine[3976]=1880;
		sine[3977]=1878;
		sine[3978]=1886;
		sine[3979]=1883;
		sine[3980]=1891;
		sine[3981]=1888;
		sine[3982]=1896;
		sine[3983]=1894;
		sine[3984]=1901;
		sine[3985]=1899;
		sine[3986]=1907;
		sine[3987]=1904;
		sine[3988]=1912;
		sine[3989]=1909;
		sine[3990]=1917;
		sine[3991]=1915;
		sine[3992]=1923;
		sine[3993]=1920;
		sine[3994]=1928;
		sine[3995]=1925;
		sine[3996]=1933;
		sine[3997]=1931;
		sine[3998]=1939;
		sine[3999]=1936;
		sine[4000]=1944;
		sine[4001]=1941;
		sine[4002]=1949;
		sine[4003]=1947;
		sine[4004]=1955;
		sine[4005]=1952;
		sine[4006]=1960;
		sine[4007]=1957;
		sine[4008]=1965;
		sine[4009]=1962;
		sine[4010]=1970;
		sine[4011]=1968;
		sine[4012]=1976;
		sine[4013]=1973;
		sine[4014]=1981;
		sine[4015]=1978;
		sine[4016]=1986;
		sine[4017]=1984;
		sine[4018]=1992;
		sine[4019]=1989;
		sine[4020]=1997;
		sine[4021]=1994;
		sine[4022]=2002;
		sine[4023]=2000;
		sine[4024]=2008;
		sine[4025]=2005;
		sine[4026]=2013;
		sine[4027]=2010;
		sine[4028]=2018;
		sine[4029]=2016;
		sine[4030]=2024;
		sine[4031]=2021;
		sine[4032]=2029;
		sine[4033]=2026;
		sine[4034]=2034;
		sine[4035]=2032;
		sine[4036]=2040;
		sine[4037]=2037;
		sine[4038]=2045;
		sine[4039]=2043;
		sine[4040]=2051;
		sine[4041]=2048;
		sine[4042]=2056;
		sine[4043]=2053;
		sine[4044]=2061;
		sine[4045]=2059;
		sine[4046]=2067;
		sine[4047]=2064;
		sine[4048]=2072;
		sine[4049]=2069;
		sine[4050]=2077;
		sine[4051]=2075;
		sine[4052]=2083;
		sine[4053]=2080;
		sine[4054]=2088;
		sine[4055]=2085;
		sine[4056]=2093;
		sine[4057]=2091;
		sine[4058]=2099;
		sine[4059]=2096;
		sine[4060]=2104;
		sine[4061]=2101;
		sine[4062]=2109;
		sine[4063]=2107;
		sine[4064]=2115;
		sine[4065]=2112;
		sine[4066]=2120;
		sine[4067]=2117;
		sine[4068]=2126;
		sine[4069]=2123;
		sine[4070]=2131;
		sine[4071]=2128;
		sine[4072]=2136;
		sine[4073]=2134;
		sine[4074]=2142;
		sine[4075]=2139;
		sine[4076]=2147;
		sine[4077]=2144;
		sine[4078]=2152;
		sine[4079]=2150;
		sine[4080]=2158;
		sine[4081]=2155;
		sine[4082]=2163;
		sine[4083]=2160;
		sine[4084]=2168;
		sine[4085]=2166;
		sine[4086]=2174;
		sine[4087]=2171;
		sine[4088]=2179;
		sine[4089]=2177;
		sine[4090]=2185;
		sine[4091]=2182;
		sine[4092]=2190;
		sine[4093]=2187;
		sine[4094]=2195;
		sine[4095]=2193;
*/
/*
//ramp code
		pattern3[0]=0;
		pattern3[1]=1;
		pattern3[2]=2;
		pattern3[3]=3;
		pattern3[4]=4;
		pattern3[5]=5;
		pattern3[6]=6;
		pattern3[7]=7;
		pattern3[8]=8;
		pattern3[9]=9;
		pattern3[10]=10;
		pattern3[11]=11;
		pattern3[12]=12;
		pattern3[13]=13;
		pattern3[14]=14;
		pattern3[15]=15;
		pattern3[16]=16;
		pattern3[17]=17;
		pattern3[18]=18;
		pattern3[19]=19;
		pattern3[20]=20;
		pattern3[21]=21;
		pattern3[22]=22;
		pattern3[23]=23;
		pattern3[24]=24;
		pattern3[25]=25;
		pattern3[26]=26;
		pattern3[27]=27;
		pattern3[28]=28;
		pattern3[29]=29;
		pattern3[30]=30;
		pattern3[31]=31;
		pattern3[32]=32;
		pattern3[33]=33;
		pattern3[34]=34;
		pattern3[35]=35;
		pattern3[36]=36;
		pattern3[37]=37;
		pattern3[38]=38;
		pattern3[39]=39;
		pattern3[40]=40;
		pattern3[41]=41;
		pattern3[42]=42;
		pattern3[43]=43;
		pattern3[44]=44;
		pattern3[45]=45;
		pattern3[46]=46;
		pattern3[47]=47;
		pattern3[48]=48;
		pattern3[49]=49;
		pattern3[50]=50;
		pattern3[51]=51;
		pattern3[52]=52;
		pattern3[53]=53;
		pattern3[54]=54;
		pattern3[55]=55;
		pattern3[56]=56;
		pattern3[57]=57;
		pattern3[58]=58;
		pattern3[59]=59;
		pattern3[60]=60;
		pattern3[61]=61;
		pattern3[62]=62;
		pattern3[63]=63;
		pattern3[64]=64;
		pattern3[65]=65;
		pattern3[66]=66;
		pattern3[67]=67;
		pattern3[68]=68;
		pattern3[69]=69;
		pattern3[70]=70;
		pattern3[71]=71;
		pattern3[72]=72;
		pattern3[73]=73;
		pattern3[74]=74;
		pattern3[75]=75;
		pattern3[76]=76;
		pattern3[77]=77;
		pattern3[78]=78;
		pattern3[79]=79;
		pattern3[80]=80;
		pattern3[81]=81;
		pattern3[82]=82;
		pattern3[83]=83;
		pattern3[84]=84;
		pattern3[85]=85;
		pattern3[86]=86;
		pattern3[87]=87;
		pattern3[88]=88;
		pattern3[89]=89;
		pattern3[90]=90;
		pattern3[91]=91;
		pattern3[92]=92;
		pattern3[93]=93;
		pattern3[94]=94;
		pattern3[95]=95;
		pattern3[96]=96;
		pattern3[97]=97;
		pattern3[98]=98;
		pattern3[99]=99;
		pattern3[100]=100;
		pattern3[101]=101;
		pattern3[102]=102;
		pattern3[103]=103;
		pattern3[104]=104;
		pattern3[105]=105;
		pattern3[106]=106;
		pattern3[107]=107;
		pattern3[108]=108;
		pattern3[109]=109;
		pattern3[110]=110;
		pattern3[111]=111;
		pattern3[112]=112;
		pattern3[113]=113;
		pattern3[114]=114;
		pattern3[115]=115;
		pattern3[116]=116;
		pattern3[117]=117;
		pattern3[118]=118;
		pattern3[119]=119;
		pattern3[120]=120;
		pattern3[121]=121;
		pattern3[122]=122;
		pattern3[123]=123;
		pattern3[124]=124;
		pattern3[125]=125;
		pattern3[126]=126;
		pattern3[127]=127;
		pattern3[128]=128;
		pattern3[129]=129;
		pattern3[130]=130;
		pattern3[131]=131;
		pattern3[132]=132;
		pattern3[133]=133;
		pattern3[134]=134;
		pattern3[135]=135;
		pattern3[136]=136;
		pattern3[137]=137;
		pattern3[138]=138;
		pattern3[139]=139;
		pattern3[140]=140;
		pattern3[141]=141;
		pattern3[142]=142;
		pattern3[143]=143;
		pattern3[144]=144;
		pattern3[145]=145;
		pattern3[146]=146;
		pattern3[147]=147;
		pattern3[148]=148;
		pattern3[149]=149;
		pattern3[150]=150;
		pattern3[151]=151;
		pattern3[152]=152;
		pattern3[153]=153;
		pattern3[154]=154;
		pattern3[155]=155;
		pattern3[156]=156;
		pattern3[157]=157;
		pattern3[158]=158;
		pattern3[159]=159;
		pattern3[160]=160;
		pattern3[161]=161;
		pattern3[162]=162;
		pattern3[163]=163;
		pattern3[164]=164;
		pattern3[165]=165;
		pattern3[166]=166;
		pattern3[167]=167;
		pattern3[168]=168;
		pattern3[169]=169;
		pattern3[170]=170;
		pattern3[171]=171;
		pattern3[172]=172;
		pattern3[173]=173;
		pattern3[174]=174;
		pattern3[175]=175;
		pattern3[176]=176;
		pattern3[177]=177;
		pattern3[178]=178;
		pattern3[179]=179;
		pattern3[180]=180;
		pattern3[181]=181;
		pattern3[182]=182;
		pattern3[183]=183;
		pattern3[184]=184;
		pattern3[185]=185;
		pattern3[186]=186;
		pattern3[187]=187;
		pattern3[188]=188;
		pattern3[189]=189;
		pattern3[190]=190;
		pattern3[191]=191;
		pattern3[192]=192;
		pattern3[193]=193;
		pattern3[194]=194;
		pattern3[195]=195;
		pattern3[196]=196;
		pattern3[197]=197;
		pattern3[198]=198;
		pattern3[199]=199;
		pattern3[200]=200;
		pattern3[201]=201;
		pattern3[202]=202;
		pattern3[203]=203;
		pattern3[204]=204;
		pattern3[205]=205;
		pattern3[206]=206;
		pattern3[207]=207;
		pattern3[208]=208;
		pattern3[209]=209;
		pattern3[210]=210;
		pattern3[211]=211;
		pattern3[212]=212;
		pattern3[213]=213;
		pattern3[214]=214;
		pattern3[215]=215;
		pattern3[216]=216;
		pattern3[217]=217;
		pattern3[218]=218;
		pattern3[219]=219;
		pattern3[220]=220;
		pattern3[221]=221;
		pattern3[222]=222;
		pattern3[223]=223;
		pattern3[224]=224;
		pattern3[225]=225;
		pattern3[226]=226;
		pattern3[227]=227;
		pattern3[228]=228;
		pattern3[229]=229;
		pattern3[230]=230;
		pattern3[231]=231;
		pattern3[232]=232;
		pattern3[233]=233;
		pattern3[234]=234;
		pattern3[235]=235;
		pattern3[236]=236;
		pattern3[237]=237;
		pattern3[238]=238;
		pattern3[239]=239;
		pattern3[240]=240;
		pattern3[241]=241;
		pattern3[242]=242;
		pattern3[243]=243;
		pattern3[244]=244;
		pattern3[245]=245;
		pattern3[246]=246;
		pattern3[247]=247;
		pattern3[248]=248;
		pattern3[249]=249;
		pattern3[250]=250;
		pattern3[251]=251;
		pattern3[252]=252;
		pattern3[253]=253;
		pattern3[254]=254;
		pattern3[255]=255;
		pattern3[256]=256;
		pattern3[257]=257;
		pattern3[258]=258;
		pattern3[259]=259;
		pattern3[260]=260;
		pattern3[261]=261;
		pattern3[262]=262;
		pattern3[263]=263;
		pattern3[264]=264;
		pattern3[265]=265;
		pattern3[266]=266;
		pattern3[267]=267;
		pattern3[268]=268;
		pattern3[269]=269;
		pattern3[270]=270;
		pattern3[271]=271;
		pattern3[272]=272;
		pattern3[273]=273;
		pattern3[274]=274;
		pattern3[275]=275;
		pattern3[276]=276;
		pattern3[277]=277;
		pattern3[278]=278;
		pattern3[279]=279;
		pattern3[280]=280;
		pattern3[281]=281;
		pattern3[282]=282;
		pattern3[283]=283;
		pattern3[284]=284;
		pattern3[285]=285;
		pattern3[286]=286;
		pattern3[287]=287;
		pattern3[288]=288;
		pattern3[289]=289;
		pattern3[290]=290;
		pattern3[291]=291;
		pattern3[292]=292;
		pattern3[293]=293;
		pattern3[294]=294;
		pattern3[295]=295;
		pattern3[296]=296;
		pattern3[297]=297;
		pattern3[298]=298;
		pattern3[299]=299;
		pattern3[300]=300;
		pattern3[301]=301;
		pattern3[302]=302;
		pattern3[303]=303;
		pattern3[304]=304;
		pattern3[305]=305;
		pattern3[306]=306;
		pattern3[307]=307;
		pattern3[308]=308;
		pattern3[309]=309;
		pattern3[310]=310;
		pattern3[311]=311;
		pattern3[312]=312;
		pattern3[313]=313;
		pattern3[314]=314;
		pattern3[315]=315;
		pattern3[316]=316;
		pattern3[317]=317;
		pattern3[318]=318;
		pattern3[319]=319;
		pattern3[320]=320;
		pattern3[321]=321;
		pattern3[322]=322;
		pattern3[323]=323;
		pattern3[324]=324;
		pattern3[325]=325;
		pattern3[326]=326;
		pattern3[327]=327;
		pattern3[328]=328;
		pattern3[329]=329;
		pattern3[330]=330;
		pattern3[331]=331;
		pattern3[332]=332;
		pattern3[333]=333;
		pattern3[334]=334;
		pattern3[335]=335;
		pattern3[336]=336;
		pattern3[337]=337;
		pattern3[338]=338;
		pattern3[339]=339;
		pattern3[340]=340;
		pattern3[341]=341;
		pattern3[342]=342;
		pattern3[343]=343;
		pattern3[344]=344;
		pattern3[345]=345;
		pattern3[346]=346;
		pattern3[347]=347;
		pattern3[348]=348;
		pattern3[349]=349;
		pattern3[350]=350;
		pattern3[351]=351;
		pattern3[352]=352;
		pattern3[353]=353;
		pattern3[354]=354;
		pattern3[355]=355;
		pattern3[356]=356;
		pattern3[357]=357;
		pattern3[358]=358;
		pattern3[359]=359;
		pattern3[360]=360;
		pattern3[361]=361;
		pattern3[362]=362;
		pattern3[363]=363;
		pattern3[364]=364;
		pattern3[365]=365;
		pattern3[366]=366;
		pattern3[367]=367;
		pattern3[368]=368;
		pattern3[369]=369;
		pattern3[370]=370;
		pattern3[371]=371;
		pattern3[372]=372;
		pattern3[373]=373;
		pattern3[374]=374;
		pattern3[375]=375;
		pattern3[376]=376;
		pattern3[377]=377;
		pattern3[378]=378;
		pattern3[379]=379;
		pattern3[380]=380;
		pattern3[381]=381;
		pattern3[382]=382;
		pattern3[383]=383;
		pattern3[384]=384;
		pattern3[385]=385;
		pattern3[386]=386;
		pattern3[387]=387;
		pattern3[388]=388;
		pattern3[389]=389;
		pattern3[390]=390;
		pattern3[391]=391;
		pattern3[392]=392;
		pattern3[393]=393;
		pattern3[394]=394;
		pattern3[395]=395;
		pattern3[396]=396;
		pattern3[397]=397;
		pattern3[398]=398;
		pattern3[399]=399;
		pattern3[400]=400;
		pattern3[401]=401;
		pattern3[402]=402;
		pattern3[403]=403;
		pattern3[404]=404;
		pattern3[405]=405;
		pattern3[406]=406;
		pattern3[407]=407;
		pattern3[408]=408;
		pattern3[409]=409;
		pattern3[410]=410;
		pattern3[411]=411;
		pattern3[412]=412;
		pattern3[413]=413;
		pattern3[414]=414;
		pattern3[415]=415;
		pattern3[416]=416;
		pattern3[417]=417;
		pattern3[418]=418;
		pattern3[419]=419;
		pattern3[420]=420;
		pattern3[421]=421;
		pattern3[422]=422;
		pattern3[423]=423;
		pattern3[424]=424;
		pattern3[425]=425;
		pattern3[426]=426;
		pattern3[427]=427;
		pattern3[428]=428;
		pattern3[429]=429;
		pattern3[430]=430;
		pattern3[431]=431;
		pattern3[432]=432;
		pattern3[433]=433;
		pattern3[434]=434;
		pattern3[435]=435;
		pattern3[436]=436;
		pattern3[437]=437;
		pattern3[438]=438;
		pattern3[439]=439;
		pattern3[440]=440;
		pattern3[441]=441;
		pattern3[442]=442;
		pattern3[443]=443;
		pattern3[444]=444;
		pattern3[445]=445;
		pattern3[446]=446;
		pattern3[447]=447;
		pattern3[448]=448;
		pattern3[449]=449;
		pattern3[450]=450;
		pattern3[451]=451;
		pattern3[452]=452;
		pattern3[453]=453;
		pattern3[454]=454;
		pattern3[455]=455;
		pattern3[456]=456;
		pattern3[457]=457;
		pattern3[458]=458;
		pattern3[459]=459;
		pattern3[460]=460;
		pattern3[461]=461;
		pattern3[462]=462;
		pattern3[463]=463;
		pattern3[464]=464;
		pattern3[465]=465;
		pattern3[466]=466;
		pattern3[467]=467;
		pattern3[468]=468;
		pattern3[469]=469;
		pattern3[470]=470;
		pattern3[471]=471;
		pattern3[472]=472;
		pattern3[473]=473;
		pattern3[474]=474;
		pattern3[475]=475;
		pattern3[476]=476;
		pattern3[477]=477;
		pattern3[478]=478;
		pattern3[479]=479;
		pattern3[480]=480;
		pattern3[481]=481;
		pattern3[482]=482;
		pattern3[483]=483;
		pattern3[484]=484;
		pattern3[485]=485;
		pattern3[486]=486;
		pattern3[487]=487;
		pattern3[488]=488;
		pattern3[489]=489;
		pattern3[490]=490;
		pattern3[491]=491;
		pattern3[492]=492;
		pattern3[493]=493;
		pattern3[494]=494;
		pattern3[495]=495;
		pattern3[496]=496;
		pattern3[497]=497;
		pattern3[498]=498;
		pattern3[499]=499;
		pattern3[500]=500;
		pattern3[501]=501;
		pattern3[502]=502;
		pattern3[503]=503;
		pattern3[504]=504;
		pattern3[505]=505;
		pattern3[506]=506;
		pattern3[507]=507;
		pattern3[508]=508;
		pattern3[509]=509;
		pattern3[510]=510;
		pattern3[511]=511;
		pattern3[512]=512;
		pattern3[513]=513;
		pattern3[514]=514;
		pattern3[515]=515;
		pattern3[516]=516;
		pattern3[517]=517;
		pattern3[518]=518;
		pattern3[519]=519;
		pattern3[520]=520;
		pattern3[521]=521;
		pattern3[522]=522;
		pattern3[523]=523;
		pattern3[524]=524;
		pattern3[525]=525;
		pattern3[526]=526;
		pattern3[527]=527;
		pattern3[528]=528;
		pattern3[529]=529;
		pattern3[530]=530;
		pattern3[531]=531;
		pattern3[532]=532;
		pattern3[533]=533;
		pattern3[534]=534;
		pattern3[535]=535;
		pattern3[536]=536;
		pattern3[537]=537;
		pattern3[538]=538;
		pattern3[539]=539;
		pattern3[540]=540;
		pattern3[541]=541;
		pattern3[542]=542;
		pattern3[543]=543;
		pattern3[544]=544;
		pattern3[545]=545;
		pattern3[546]=546;
		pattern3[547]=547;
		pattern3[548]=548;
		pattern3[549]=549;
		pattern3[550]=550;
		pattern3[551]=551;
		pattern3[552]=552;
		pattern3[553]=553;
		pattern3[554]=554;
		pattern3[555]=555;
		pattern3[556]=556;
		pattern3[557]=557;
		pattern3[558]=558;
		pattern3[559]=559;
		pattern3[560]=560;
		pattern3[561]=561;
		pattern3[562]=562;
		pattern3[563]=563;
		pattern3[564]=564;
		pattern3[565]=565;
		pattern3[566]=566;
		pattern3[567]=567;
		pattern3[568]=568;
		pattern3[569]=569;
		pattern3[570]=570;
		pattern3[571]=571;
		pattern3[572]=572;
		pattern3[573]=573;
		pattern3[574]=574;
		pattern3[575]=575;
		pattern3[576]=576;
		pattern3[577]=577;
		pattern3[578]=578;
		pattern3[579]=579;
		pattern3[580]=580;
		pattern3[581]=581;
		pattern3[582]=582;
		pattern3[583]=583;
		pattern3[584]=584;
		pattern3[585]=585;
		pattern3[586]=586;
		pattern3[587]=587;
		pattern3[588]=588;
		pattern3[589]=589;
		pattern3[590]=590;
		pattern3[591]=591;
		pattern3[592]=592;
		pattern3[593]=593;
		pattern3[594]=594;
		pattern3[595]=595;
		pattern3[596]=596;
		pattern3[597]=597;
		pattern3[598]=598;
		pattern3[599]=599;
		pattern3[600]=600;
		pattern3[601]=601;
		pattern3[602]=602;
		pattern3[603]=603;
		pattern3[604]=604;
		pattern3[605]=605;
		pattern3[606]=606;
		pattern3[607]=607;
		pattern3[608]=608;
		pattern3[609]=609;
		pattern3[610]=610;
		pattern3[611]=611;
		pattern3[612]=612;
		pattern3[613]=613;
		pattern3[614]=614;
		pattern3[615]=615;
		pattern3[616]=616;
		pattern3[617]=617;
		pattern3[618]=618;
		pattern3[619]=619;
		pattern3[620]=620;
		pattern3[621]=621;
		pattern3[622]=622;
		pattern3[623]=623;
		pattern3[624]=624;
		pattern3[625]=625;
		pattern3[626]=626;
		pattern3[627]=627;
		pattern3[628]=628;
		pattern3[629]=629;
		pattern3[630]=630;
		pattern3[631]=631;
		pattern3[632]=632;
		pattern3[633]=633;
		pattern3[634]=634;
		pattern3[635]=635;
		pattern3[636]=636;
		pattern3[637]=637;
		pattern3[638]=638;
		pattern3[639]=639;
		pattern3[640]=640;
		pattern3[641]=641;
		pattern3[642]=642;
		pattern3[643]=643;
		pattern3[644]=644;
		pattern3[645]=645;
		pattern3[646]=646;
		pattern3[647]=647;
		pattern3[648]=648;
		pattern3[649]=649;
		pattern3[650]=650;
		pattern3[651]=651;
		pattern3[652]=652;
		pattern3[653]=653;
		pattern3[654]=654;
		pattern3[655]=655;
		pattern3[656]=656;
		pattern3[657]=657;
		pattern3[658]=658;
		pattern3[659]=659;
		pattern3[660]=660;
		pattern3[661]=661;
		pattern3[662]=662;
		pattern3[663]=663;
		pattern3[664]=664;
		pattern3[665]=665;
		pattern3[666]=666;
		pattern3[667]=667;
		pattern3[668]=668;
		pattern3[669]=669;
		pattern3[670]=670;
		pattern3[671]=671;
		pattern3[672]=672;
		pattern3[673]=673;
		pattern3[674]=674;
		pattern3[675]=675;
		pattern3[676]=676;
		pattern3[677]=677;
		pattern3[678]=678;
		pattern3[679]=679;
		pattern3[680]=680;
		pattern3[681]=681;
		pattern3[682]=682;
		pattern3[683]=683;
		pattern3[684]=684;
		pattern3[685]=685;
		pattern3[686]=686;
		pattern3[687]=687;
		pattern3[688]=688;
		pattern3[689]=689;
		pattern3[690]=690;
		pattern3[691]=691;
		pattern3[692]=692;
		pattern3[693]=693;
		pattern3[694]=694;
		pattern3[695]=695;
		pattern3[696]=696;
		pattern3[697]=697;
		pattern3[698]=698;
		pattern3[699]=699;
		pattern3[700]=700;
		pattern3[701]=701;
		pattern3[702]=702;
		pattern3[703]=703;
		pattern3[704]=704;
		pattern3[705]=705;
		pattern3[706]=706;
		pattern3[707]=707;
		pattern3[708]=708;
		pattern3[709]=709;
		pattern3[710]=710;
		pattern3[711]=711;
		pattern3[712]=712;
		pattern3[713]=713;
		pattern3[714]=714;
		pattern3[715]=715;
		pattern3[716]=716;
		pattern3[717]=717;
		pattern3[718]=718;
		pattern3[719]=719;
		pattern3[720]=720;
		pattern3[721]=721;
		pattern3[722]=722;
		pattern3[723]=723;
		pattern3[724]=724;
		pattern3[725]=725;
		pattern3[726]=726;
		pattern3[727]=727;
		pattern3[728]=728;
		pattern3[729]=729;
		pattern3[730]=730;
		pattern3[731]=731;
		pattern3[732]=732;
		pattern3[733]=733;
		pattern3[734]=734;
		pattern3[735]=735;
		pattern3[736]=736;
		pattern3[737]=737;
		pattern3[738]=738;
		pattern3[739]=739;
		pattern3[740]=740;
		pattern3[741]=741;
		pattern3[742]=742;
		pattern3[743]=743;
		pattern3[744]=744;
		pattern3[745]=745;
		pattern3[746]=746;
		pattern3[747]=747;
		pattern3[748]=748;
		pattern3[749]=749;
		pattern3[750]=750;
		pattern3[751]=751;
		pattern3[752]=752;
		pattern3[753]=753;
		pattern3[754]=754;
		pattern3[755]=755;
		pattern3[756]=756;
		pattern3[757]=757;
		pattern3[758]=758;
		pattern3[759]=759;
		pattern3[760]=760;
		pattern3[761]=761;
		pattern3[762]=762;
		pattern3[763]=763;
		pattern3[764]=764;
		pattern3[765]=765;
		pattern3[766]=766;
		pattern3[767]=767;
		pattern3[768]=768;
		pattern3[769]=769;
		pattern3[770]=770;
		pattern3[771]=771;
		pattern3[772]=772;
		pattern3[773]=773;
		pattern3[774]=774;
		pattern3[775]=775;
		pattern3[776]=776;
		pattern3[777]=777;
		pattern3[778]=778;
		pattern3[779]=779;
		pattern3[780]=780;
		pattern3[781]=781;
		pattern3[782]=782;
		pattern3[783]=783;
		pattern3[784]=784;
		pattern3[785]=785;
		pattern3[786]=786;
		pattern3[787]=787;
		pattern3[788]=788;
		pattern3[789]=789;
		pattern3[790]=790;
		pattern3[791]=791;
		pattern3[792]=792;
		pattern3[793]=793;
		pattern3[794]=794;
		pattern3[795]=795;
		pattern3[796]=796;
		pattern3[797]=797;
		pattern3[798]=798;
		pattern3[799]=799;
		pattern3[800]=800;
		pattern3[801]=801;
		pattern3[802]=802;
		pattern3[803]=803;
		pattern3[804]=804;
		pattern3[805]=805;
		pattern3[806]=806;
		pattern3[807]=807;
		pattern3[808]=808;
		pattern3[809]=809;
		pattern3[810]=810;
		pattern3[811]=811;
		pattern3[812]=812;
		pattern3[813]=813;
		pattern3[814]=814;
		pattern3[815]=815;
		pattern3[816]=816;
		pattern3[817]=817;
		pattern3[818]=818;
		pattern3[819]=819;
		pattern3[820]=820;
		pattern3[821]=821;
		pattern3[822]=822;
		pattern3[823]=823;
		pattern3[824]=824;
		pattern3[825]=825;
		pattern3[826]=826;
		pattern3[827]=827;
		pattern3[828]=828;
		pattern3[829]=829;
		pattern3[830]=830;
		pattern3[831]=831;
		pattern3[832]=832;
		pattern3[833]=833;
		pattern3[834]=834;
		pattern3[835]=835;
		pattern3[836]=836;
		pattern3[837]=837;
		pattern3[838]=838;
		pattern3[839]=839;
		pattern3[840]=840;
		pattern3[841]=841;
		pattern3[842]=842;
		pattern3[843]=843;
		pattern3[844]=844;
		pattern3[845]=845;
		pattern3[846]=846;
		pattern3[847]=847;
		pattern3[848]=848;
		pattern3[849]=849;
		pattern3[850]=850;
		pattern3[851]=851;
		pattern3[852]=852;
		pattern3[853]=853;
		pattern3[854]=854;
		pattern3[855]=855;
		pattern3[856]=856;
		pattern3[857]=857;
		pattern3[858]=858;
		pattern3[859]=859;
		pattern3[860]=860;
		pattern3[861]=861;
		pattern3[862]=862;
		pattern3[863]=863;
		pattern3[864]=864;
		pattern3[865]=865;
		pattern3[866]=866;
		pattern3[867]=867;
		pattern3[868]=868;
		pattern3[869]=869;
		pattern3[870]=870;
		pattern3[871]=871;
		pattern3[872]=872;
		pattern3[873]=873;
		pattern3[874]=874;
		pattern3[875]=875;
		pattern3[876]=876;
		pattern3[877]=877;
		pattern3[878]=878;
		pattern3[879]=879;
		pattern3[880]=880;
		pattern3[881]=881;
		pattern3[882]=882;
		pattern3[883]=883;
		pattern3[884]=884;
		pattern3[885]=885;
		pattern3[886]=886;
		pattern3[887]=887;
		pattern3[888]=888;
		pattern3[889]=889;
		pattern3[890]=890;
		pattern3[891]=891;
		pattern3[892]=892;
		pattern3[893]=893;
		pattern3[894]=894;
		pattern3[895]=895;
		pattern3[896]=896;
		pattern3[897]=897;
		pattern3[898]=898;
		pattern3[899]=899;
		pattern3[900]=900;
		pattern3[901]=901;
		pattern3[902]=902;
		pattern3[903]=903;
		pattern3[904]=904;
		pattern3[905]=905;
		pattern3[906]=906;
		pattern3[907]=907;
		pattern3[908]=908;
		pattern3[909]=909;
		pattern3[910]=910;
		pattern3[911]=911;
		pattern3[912]=912;
		pattern3[913]=913;
		pattern3[914]=914;
		pattern3[915]=915;
		pattern3[916]=916;
		pattern3[917]=917;
		pattern3[918]=918;
		pattern3[919]=919;
		pattern3[920]=920;
		pattern3[921]=921;
		pattern3[922]=922;
		pattern3[923]=923;
		pattern3[924]=924;
		pattern3[925]=925;
		pattern3[926]=926;
		pattern3[927]=927;
		pattern3[928]=928;
		pattern3[929]=929;
		pattern3[930]=930;
		pattern3[931]=931;
		pattern3[932]=932;
		pattern3[933]=933;
		pattern3[934]=934;
		pattern3[935]=935;
		pattern3[936]=936;
		pattern3[937]=937;
		pattern3[938]=938;
		pattern3[939]=939;
		pattern3[940]=940;
		pattern3[941]=941;
		pattern3[942]=942;
		pattern3[943]=943;
		pattern3[944]=944;
		pattern3[945]=945;
		pattern3[946]=946;
		pattern3[947]=947;
		pattern3[948]=948;
		pattern3[949]=949;
		pattern3[950]=950;
		pattern3[951]=951;
		pattern3[952]=952;
		pattern3[953]=953;
		pattern3[954]=954;
		pattern3[955]=955;
		pattern3[956]=956;
		pattern3[957]=957;
		pattern3[958]=958;
		pattern3[959]=959;
		pattern3[960]=960;
		pattern3[961]=961;
		pattern3[962]=962;
		pattern3[963]=963;
		pattern3[964]=964;
		pattern3[965]=965;
		pattern3[966]=966;
		pattern3[967]=967;
		pattern3[968]=968;
		pattern3[969]=969;
		pattern3[970]=970;
		pattern3[971]=971;
		pattern3[972]=972;
		pattern3[973]=973;
		pattern3[974]=974;
		pattern3[975]=975;
		pattern3[976]=976;
		pattern3[977]=977;
		pattern3[978]=978;
		pattern3[979]=979;
		pattern3[980]=980;
		pattern3[981]=981;
		pattern3[982]=982;
		pattern3[983]=983;
		pattern3[984]=984;
		pattern3[985]=985;
		pattern3[986]=986;
		pattern3[987]=987;
		pattern3[988]=988;
		pattern3[989]=989;
		pattern3[990]=990;
		pattern3[991]=991;
		pattern3[992]=992;
		pattern3[993]=993;
		pattern3[994]=994;
		pattern3[995]=995;
		pattern3[996]=996;
		pattern3[997]=997;
		pattern3[998]=998;
		pattern3[999]=999;
		pattern3[1000]=1000;
		pattern3[1001]=1001;
		pattern3[1002]=1002;
		pattern3[1003]=1003;
		pattern3[1004]=1004;
		pattern3[1005]=1005;
		pattern3[1006]=1006;
		pattern3[1007]=1007;
		pattern3[1008]=1008;
		pattern3[1009]=1009;
		pattern3[1010]=1010;
		pattern3[1011]=1011;
		pattern3[1012]=1012;
		pattern3[1013]=1013;
		pattern3[1014]=1014;
		pattern3[1015]=1015;
		pattern3[1016]=1016;
		pattern3[1017]=1017;
		pattern3[1018]=1018;
		pattern3[1019]=1019;
		pattern3[1020]=1020;
		pattern3[1021]=1021;
		pattern3[1022]=1022;
		pattern3[1023]=1023;
		pattern3[1024]=1024;
		pattern3[1025]=1025;
		pattern3[1026]=1026;
		pattern3[1027]=1027;
		pattern3[1028]=1028;
		pattern3[1029]=1029;
		pattern3[1030]=1030;
		pattern3[1031]=1031;
		pattern3[1032]=1032;
		pattern3[1033]=1033;
		pattern3[1034]=1034;
		pattern3[1035]=1035;
		pattern3[1036]=1036;
		pattern3[1037]=1037;
		pattern3[1038]=1038;
		pattern3[1039]=1039;
		pattern3[1040]=1040;
		pattern3[1041]=1041;
		pattern3[1042]=1042;
		pattern3[1043]=1043;
		pattern3[1044]=1044;
		pattern3[1045]=1045;
		pattern3[1046]=1046;
		pattern3[1047]=1047;
		pattern3[1048]=1048;
		pattern3[1049]=1049;
		pattern3[1050]=1050;
		pattern3[1051]=1051;
		pattern3[1052]=1052;
		pattern3[1053]=1053;
		pattern3[1054]=1054;
		pattern3[1055]=1055;
		pattern3[1056]=1056;
		pattern3[1057]=1057;
		pattern3[1058]=1058;
		pattern3[1059]=1059;
		pattern3[1060]=1060;
		pattern3[1061]=1061;
		pattern3[1062]=1062;
		pattern3[1063]=1063;
		pattern3[1064]=1064;
		pattern3[1065]=1065;
		pattern3[1066]=1066;
		pattern3[1067]=1067;
		pattern3[1068]=1068;
		pattern3[1069]=1069;
		pattern3[1070]=1070;
		pattern3[1071]=1071;
		pattern3[1072]=1072;
		pattern3[1073]=1073;
		pattern3[1074]=1074;
		pattern3[1075]=1075;
		pattern3[1076]=1076;
		pattern3[1077]=1077;
		pattern3[1078]=1078;
		pattern3[1079]=1079;
		pattern3[1080]=1080;
		pattern3[1081]=1081;
		pattern3[1082]=1082;
		pattern3[1083]=1083;
		pattern3[1084]=1084;
		pattern3[1085]=1085;
		pattern3[1086]=1086;
		pattern3[1087]=1087;
		pattern3[1088]=1088;
		pattern3[1089]=1089;
		pattern3[1090]=1090;
		pattern3[1091]=1091;
		pattern3[1092]=1092;
		pattern3[1093]=1093;
		pattern3[1094]=1094;
		pattern3[1095]=1095;
		pattern3[1096]=1096;
		pattern3[1097]=1097;
		pattern3[1098]=1098;
		pattern3[1099]=1099;
		pattern3[1100]=1100;
		pattern3[1101]=1101;
		pattern3[1102]=1102;
		pattern3[1103]=1103;
		pattern3[1104]=1104;
		pattern3[1105]=1105;
		pattern3[1106]=1106;
		pattern3[1107]=1107;
		pattern3[1108]=1108;
		pattern3[1109]=1109;
		pattern3[1110]=1110;
		pattern3[1111]=1111;
		pattern3[1112]=1112;
		pattern3[1113]=1113;
		pattern3[1114]=1114;
		pattern3[1115]=1115;
		pattern3[1116]=1116;
		pattern3[1117]=1117;
		pattern3[1118]=1118;
		pattern3[1119]=1119;
		pattern3[1120]=1120;
		pattern3[1121]=1121;
		pattern3[1122]=1122;
		pattern3[1123]=1123;
		pattern3[1124]=1124;
		pattern3[1125]=1125;
		pattern3[1126]=1126;
		pattern3[1127]=1127;
		pattern3[1128]=1128;
		pattern3[1129]=1129;
		pattern3[1130]=1130;
		pattern3[1131]=1131;
		pattern3[1132]=1132;
		pattern3[1133]=1133;
		pattern3[1134]=1134;
		pattern3[1135]=1135;
		pattern3[1136]=1136;
		pattern3[1137]=1137;
		pattern3[1138]=1138;
		pattern3[1139]=1139;
		pattern3[1140]=1140;
		pattern3[1141]=1141;
		pattern3[1142]=1142;
		pattern3[1143]=1143;
		pattern3[1144]=1144;
		pattern3[1145]=1145;
		pattern3[1146]=1146;
		pattern3[1147]=1147;
		pattern3[1148]=1148;
		pattern3[1149]=1149;
		pattern3[1150]=1150;
		pattern3[1151]=1151;
		pattern3[1152]=1152;
		pattern3[1153]=1153;
		pattern3[1154]=1154;
		pattern3[1155]=1155;
		pattern3[1156]=1156;
		pattern3[1157]=1157;
		pattern3[1158]=1158;
		pattern3[1159]=1159;
		pattern3[1160]=1160;
		pattern3[1161]=1161;
		pattern3[1162]=1162;
		pattern3[1163]=1163;
		pattern3[1164]=1164;
		pattern3[1165]=1165;
		pattern3[1166]=1166;
		pattern3[1167]=1167;
		pattern3[1168]=1168;
		pattern3[1169]=1169;
		pattern3[1170]=1170;
		pattern3[1171]=1171;
		pattern3[1172]=1172;
		pattern3[1173]=1173;
		pattern3[1174]=1174;
		pattern3[1175]=1175;
		pattern3[1176]=1176;
		pattern3[1177]=1177;
		pattern3[1178]=1178;
		pattern3[1179]=1179;
		pattern3[1180]=1180;
		pattern3[1181]=1181;
		pattern3[1182]=1182;
		pattern3[1183]=1183;
		pattern3[1184]=1184;
		pattern3[1185]=1185;
		pattern3[1186]=1186;
		pattern3[1187]=1187;
		pattern3[1188]=1188;
		pattern3[1189]=1189;
		pattern3[1190]=1190;
		pattern3[1191]=1191;
		pattern3[1192]=1192;
		pattern3[1193]=1193;
		pattern3[1194]=1194;
		pattern3[1195]=1195;
		pattern3[1196]=1196;
		pattern3[1197]=1197;
		pattern3[1198]=1198;
		pattern3[1199]=1199;
		pattern3[1200]=1200;
		pattern3[1201]=1201;
		pattern3[1202]=1202;
		pattern3[1203]=1203;
		pattern3[1204]=1204;
		pattern3[1205]=1205;
		pattern3[1206]=1206;
		pattern3[1207]=1207;
		pattern3[1208]=1208;
		pattern3[1209]=1209;
		pattern3[1210]=1210;
		pattern3[1211]=1211;
		pattern3[1212]=1212;
		pattern3[1213]=1213;
		pattern3[1214]=1214;
		pattern3[1215]=1215;
		pattern3[1216]=1216;
		pattern3[1217]=1217;
		pattern3[1218]=1218;
		pattern3[1219]=1219;
		pattern3[1220]=1220;
		pattern3[1221]=1221;
		pattern3[1222]=1222;
		pattern3[1223]=1223;
		pattern3[1224]=1224;
		pattern3[1225]=1225;
		pattern3[1226]=1226;
		pattern3[1227]=1227;
		pattern3[1228]=1228;
		pattern3[1229]=1229;
		pattern3[1230]=1230;
		pattern3[1231]=1231;
		pattern3[1232]=1232;
		pattern3[1233]=1233;
		pattern3[1234]=1234;
		pattern3[1235]=1235;
		pattern3[1236]=1236;
		pattern3[1237]=1237;
		pattern3[1238]=1238;
		pattern3[1239]=1239;
		pattern3[1240]=1240;
		pattern3[1241]=1241;
		pattern3[1242]=1242;
		pattern3[1243]=1243;
		pattern3[1244]=1244;
		pattern3[1245]=1245;
		pattern3[1246]=1246;
		pattern3[1247]=1247;
		pattern3[1248]=1248;
		pattern3[1249]=1249;
		pattern3[1250]=1250;
		pattern3[1251]=1251;
		pattern3[1252]=1252;
		pattern3[1253]=1253;
		pattern3[1254]=1254;
		pattern3[1255]=1255;
		pattern3[1256]=1256;
		pattern3[1257]=1257;
		pattern3[1258]=1258;
		pattern3[1259]=1259;
		pattern3[1260]=1260;
		pattern3[1261]=1261;
		pattern3[1262]=1262;
		pattern3[1263]=1263;
		pattern3[1264]=1264;
		pattern3[1265]=1265;
		pattern3[1266]=1266;
		pattern3[1267]=1267;
		pattern3[1268]=1268;
		pattern3[1269]=1269;
		pattern3[1270]=1270;
		pattern3[1271]=1271;
		pattern3[1272]=1272;
		pattern3[1273]=1273;
		pattern3[1274]=1274;
		pattern3[1275]=1275;
		pattern3[1276]=1276;
		pattern3[1277]=1277;
		pattern3[1278]=1278;
		pattern3[1279]=1279;
		pattern3[1280]=1280;
		pattern3[1281]=1281;
		pattern3[1282]=1282;
		pattern3[1283]=1283;
		pattern3[1284]=1284;
		pattern3[1285]=1285;
		pattern3[1286]=1286;
		pattern3[1287]=1287;
		pattern3[1288]=1288;
		pattern3[1289]=1289;
		pattern3[1290]=1290;
		pattern3[1291]=1291;
		pattern3[1292]=1292;
		pattern3[1293]=1293;
		pattern3[1294]=1294;
		pattern3[1295]=1295;
		pattern3[1296]=1296;
		pattern3[1297]=1297;
		pattern3[1298]=1298;
		pattern3[1299]=1299;
		pattern3[1300]=1300;
		pattern3[1301]=1301;
		pattern3[1302]=1302;
		pattern3[1303]=1303;
		pattern3[1304]=1304;
		pattern3[1305]=1305;
		pattern3[1306]=1306;
		pattern3[1307]=1307;
		pattern3[1308]=1308;
		pattern3[1309]=1309;
		pattern3[1310]=1310;
		pattern3[1311]=1311;
		pattern3[1312]=1312;
		pattern3[1313]=1313;
		pattern3[1314]=1314;
		pattern3[1315]=1315;
		pattern3[1316]=1316;
		pattern3[1317]=1317;
		pattern3[1318]=1318;
		pattern3[1319]=1319;
		pattern3[1320]=1320;
		pattern3[1321]=1321;
		pattern3[1322]=1322;
		pattern3[1323]=1323;
		pattern3[1324]=1324;
		pattern3[1325]=1325;
		pattern3[1326]=1326;
		pattern3[1327]=1327;
		pattern3[1328]=1328;
		pattern3[1329]=1329;
		pattern3[1330]=1330;
		pattern3[1331]=1331;
		pattern3[1332]=1332;
		pattern3[1333]=1333;
		pattern3[1334]=1334;
		pattern3[1335]=1335;
		pattern3[1336]=1336;
		pattern3[1337]=1337;
		pattern3[1338]=1338;
		pattern3[1339]=1339;
		pattern3[1340]=1340;
		pattern3[1341]=1341;
		pattern3[1342]=1342;
		pattern3[1343]=1343;
		pattern3[1344]=1344;
		pattern3[1345]=1345;
		pattern3[1346]=1346;
		pattern3[1347]=1347;
		pattern3[1348]=1348;
		pattern3[1349]=1349;
		pattern3[1350]=1350;
		pattern3[1351]=1351;
		pattern3[1352]=1352;
		pattern3[1353]=1353;
		pattern3[1354]=1354;
		pattern3[1355]=1355;
		pattern3[1356]=1356;
		pattern3[1357]=1357;
		pattern3[1358]=1358;
		pattern3[1359]=1359;
		pattern3[1360]=1360;
		pattern3[1361]=1361;
		pattern3[1362]=1362;
		pattern3[1363]=1363;
		pattern3[1364]=1364;
		pattern3[1365]=1365;
		pattern3[1366]=1366;
		pattern3[1367]=1367;
		pattern3[1368]=1368;
		pattern3[1369]=1369;
		pattern3[1370]=1370;
		pattern3[1371]=1371;
		pattern3[1372]=1372;
		pattern3[1373]=1373;
		pattern3[1374]=1374;
		pattern3[1375]=1375;
		pattern3[1376]=1376;
		pattern3[1377]=1377;
		pattern3[1378]=1378;
		pattern3[1379]=1379;
		pattern3[1380]=1380;
		pattern3[1381]=1381;
		pattern3[1382]=1382;
		pattern3[1383]=1383;
		pattern3[1384]=1384;
		pattern3[1385]=1385;
		pattern3[1386]=1386;
		pattern3[1387]=1387;
		pattern3[1388]=1388;
		pattern3[1389]=1389;
		pattern3[1390]=1390;
		pattern3[1391]=1391;
		pattern3[1392]=1392;
		pattern3[1393]=1393;
		pattern3[1394]=1394;
		pattern3[1395]=1395;
		pattern3[1396]=1396;
		pattern3[1397]=1397;
		pattern3[1398]=1398;
		pattern3[1399]=1399;
		pattern3[1400]=1400;
		pattern3[1401]=1401;
		pattern3[1402]=1402;
		pattern3[1403]=1403;
		pattern3[1404]=1404;
		pattern3[1405]=1405;
		pattern3[1406]=1406;
		pattern3[1407]=1407;
		pattern3[1408]=1408;
		pattern3[1409]=1409;
		pattern3[1410]=1410;
		pattern3[1411]=1411;
		pattern3[1412]=1412;
		pattern3[1413]=1413;
		pattern3[1414]=1414;
		pattern3[1415]=1415;
		pattern3[1416]=1416;
		pattern3[1417]=1417;
		pattern3[1418]=1418;
		pattern3[1419]=1419;
		pattern3[1420]=1420;
		pattern3[1421]=1421;
		pattern3[1422]=1422;
		pattern3[1423]=1423;
		pattern3[1424]=1424;
		pattern3[1425]=1425;
		pattern3[1426]=1426;
		pattern3[1427]=1427;
		pattern3[1428]=1428;
		pattern3[1429]=1429;
		pattern3[1430]=1430;
		pattern3[1431]=1431;
		pattern3[1432]=1432;
		pattern3[1433]=1433;
		pattern3[1434]=1434;
		pattern3[1435]=1435;
		pattern3[1436]=1436;
		pattern3[1437]=1437;
		pattern3[1438]=1438;
		pattern3[1439]=1439;
		pattern3[1440]=1440;
		pattern3[1441]=1441;
		pattern3[1442]=1442;
		pattern3[1443]=1443;
		pattern3[1444]=1444;
		pattern3[1445]=1445;
		pattern3[1446]=1446;
		pattern3[1447]=1447;
		pattern3[1448]=1448;
		pattern3[1449]=1449;
		pattern3[1450]=1450;
		pattern3[1451]=1451;
		pattern3[1452]=1452;
		pattern3[1453]=1453;
		pattern3[1454]=1454;
		pattern3[1455]=1455;
		pattern3[1456]=1456;
		pattern3[1457]=1457;
		pattern3[1458]=1458;
		pattern3[1459]=1459;
		pattern3[1460]=1460;
		pattern3[1461]=1461;
		pattern3[1462]=1462;
		pattern3[1463]=1463;
		pattern3[1464]=1464;
		pattern3[1465]=1465;
		pattern3[1466]=1466;
		pattern3[1467]=1467;
		pattern3[1468]=1468;
		pattern3[1469]=1469;
		pattern3[1470]=1470;
		pattern3[1471]=1471;
		pattern3[1472]=1472;
		pattern3[1473]=1473;
		pattern3[1474]=1474;
		pattern3[1475]=1475;
		pattern3[1476]=1476;
		pattern3[1477]=1477;
		pattern3[1478]=1478;
		pattern3[1479]=1479;
		pattern3[1480]=1480;
		pattern3[1481]=1481;
		pattern3[1482]=1482;
		pattern3[1483]=1483;
		pattern3[1484]=1484;
		pattern3[1485]=1485;
		pattern3[1486]=1486;
		pattern3[1487]=1487;
		pattern3[1488]=1488;
		pattern3[1489]=1489;
		pattern3[1490]=1490;
		pattern3[1491]=1491;
		pattern3[1492]=1492;
		pattern3[1493]=1493;
		pattern3[1494]=1494;
		pattern3[1495]=1495;
		pattern3[1496]=1496;
		pattern3[1497]=1497;
		pattern3[1498]=1498;
		pattern3[1499]=1499;
		pattern3[1500]=1500;
		pattern3[1501]=1501;
		pattern3[1502]=1502;
		pattern3[1503]=1503;
		pattern3[1504]=1504;
		pattern3[1505]=1505;
		pattern3[1506]=1506;
		pattern3[1507]=1507;
		pattern3[1508]=1508;
		pattern3[1509]=1509;
		pattern3[1510]=1510;
		pattern3[1511]=1511;
		pattern3[1512]=1512;
		pattern3[1513]=1513;
		pattern3[1514]=1514;
		pattern3[1515]=1515;
		pattern3[1516]=1516;
		pattern3[1517]=1517;
		pattern3[1518]=1518;
		pattern3[1519]=1519;
		pattern3[1520]=1520;
		pattern3[1521]=1521;
		pattern3[1522]=1522;
		pattern3[1523]=1523;
		pattern3[1524]=1524;
		pattern3[1525]=1525;
		pattern3[1526]=1526;
		pattern3[1527]=1527;
		pattern3[1528]=1528;
		pattern3[1529]=1529;
		pattern3[1530]=1530;
		pattern3[1531]=1531;
		pattern3[1532]=1532;
		pattern3[1533]=1533;
		pattern3[1534]=1534;
		pattern3[1535]=1535;
		pattern3[1536]=1536;
		pattern3[1537]=1537;
		pattern3[1538]=1538;
		pattern3[1539]=1539;
		pattern3[1540]=1540;
		pattern3[1541]=1541;
		pattern3[1542]=1542;
		pattern3[1543]=1543;
		pattern3[1544]=1544;
		pattern3[1545]=1545;
		pattern3[1546]=1546;
		pattern3[1547]=1547;
		pattern3[1548]=1548;
		pattern3[1549]=1549;
		pattern3[1550]=1550;
		pattern3[1551]=1551;
		pattern3[1552]=1552;
		pattern3[1553]=1553;
		pattern3[1554]=1554;
		pattern3[1555]=1555;
		pattern3[1556]=1556;
		pattern3[1557]=1557;
		pattern3[1558]=1558;
		pattern3[1559]=1559;
		pattern3[1560]=1560;
		pattern3[1561]=1561;
		pattern3[1562]=1562;
		pattern3[1563]=1563;
		pattern3[1564]=1564;
		pattern3[1565]=1565;
		pattern3[1566]=1566;
		pattern3[1567]=1567;
		pattern3[1568]=1568;
		pattern3[1569]=1569;
		pattern3[1570]=1570;
		pattern3[1571]=1571;
		pattern3[1572]=1572;
		pattern3[1573]=1573;
		pattern3[1574]=1574;
		pattern3[1575]=1575;
		pattern3[1576]=1576;
		pattern3[1577]=1577;
		pattern3[1578]=1578;
		pattern3[1579]=1579;
		pattern3[1580]=1580;
		pattern3[1581]=1581;
		pattern3[1582]=1582;
		pattern3[1583]=1583;
		pattern3[1584]=1584;
		pattern3[1585]=1585;
		pattern3[1586]=1586;
		pattern3[1587]=1587;
		pattern3[1588]=1588;
		pattern3[1589]=1589;
		pattern3[1590]=1590;
		pattern3[1591]=1591;
		pattern3[1592]=1592;
		pattern3[1593]=1593;
		pattern3[1594]=1594;
		pattern3[1595]=1595;
		pattern3[1596]=1596;
		pattern3[1597]=1597;
		pattern3[1598]=1598;
		pattern3[1599]=1599;
		pattern3[1600]=1600;
		pattern3[1601]=1601;
		pattern3[1602]=1602;
		pattern3[1603]=1603;
		pattern3[1604]=1604;
		pattern3[1605]=1605;
		pattern3[1606]=1606;
		pattern3[1607]=1607;
		pattern3[1608]=1608;
		pattern3[1609]=1609;
		pattern3[1610]=1610;
		pattern3[1611]=1611;
		pattern3[1612]=1612;
		pattern3[1613]=1613;
		pattern3[1614]=1614;
		pattern3[1615]=1615;
		pattern3[1616]=1616;
		pattern3[1617]=1617;
		pattern3[1618]=1618;
		pattern3[1619]=1619;
		pattern3[1620]=1620;
		pattern3[1621]=1621;
		pattern3[1622]=1622;
		pattern3[1623]=1623;
		pattern3[1624]=1624;
		pattern3[1625]=1625;
		pattern3[1626]=1626;
		pattern3[1627]=1627;
		pattern3[1628]=1628;
		pattern3[1629]=1629;
		pattern3[1630]=1630;
		pattern3[1631]=1631;
		pattern3[1632]=1632;
		pattern3[1633]=1633;
		pattern3[1634]=1634;
		pattern3[1635]=1635;
		pattern3[1636]=1636;
		pattern3[1637]=1637;
		pattern3[1638]=1638;
		pattern3[1639]=1639;
		pattern3[1640]=1640;
		pattern3[1641]=1641;
		pattern3[1642]=1642;
		pattern3[1643]=1643;
		pattern3[1644]=1644;
		pattern3[1645]=1645;
		pattern3[1646]=1646;
		pattern3[1647]=1647;
		pattern3[1648]=1648;
		pattern3[1649]=1649;
		pattern3[1650]=1650;
		pattern3[1651]=1651;
		pattern3[1652]=1652;
		pattern3[1653]=1653;
		pattern3[1654]=1654;
		pattern3[1655]=1655;
		pattern3[1656]=1656;
		pattern3[1657]=1657;
		pattern3[1658]=1658;
		pattern3[1659]=1659;
		pattern3[1660]=1660;
		pattern3[1661]=1661;
		pattern3[1662]=1662;
		pattern3[1663]=1663;
		pattern3[1664]=1664;
		pattern3[1665]=1665;
		pattern3[1666]=1666;
		pattern3[1667]=1667;
		pattern3[1668]=1668;
		pattern3[1669]=1669;
		pattern3[1670]=1670;
		pattern3[1671]=1671;
		pattern3[1672]=1672;
		pattern3[1673]=1673;
		pattern3[1674]=1674;
		pattern3[1675]=1675;
		pattern3[1676]=1676;
		pattern3[1677]=1677;
		pattern3[1678]=1678;
		pattern3[1679]=1679;
		pattern3[1680]=1680;
		pattern3[1681]=1681;
		pattern3[1682]=1682;
		pattern3[1683]=1683;
		pattern3[1684]=1684;
		pattern3[1685]=1685;
		pattern3[1686]=1686;
		pattern3[1687]=1687;
		pattern3[1688]=1688;
		pattern3[1689]=1689;
		pattern3[1690]=1690;
		pattern3[1691]=1691;
		pattern3[1692]=1692;
		pattern3[1693]=1693;
		pattern3[1694]=1694;
		pattern3[1695]=1695;
		pattern3[1696]=1696;
		pattern3[1697]=1697;
		pattern3[1698]=1698;
		pattern3[1699]=1699;
		pattern3[1700]=1700;
		pattern3[1701]=1701;
		pattern3[1702]=1702;
		pattern3[1703]=1703;
		pattern3[1704]=1704;
		pattern3[1705]=1705;
		pattern3[1706]=1706;
		pattern3[1707]=1707;
		pattern3[1708]=1708;
		pattern3[1709]=1709;
		pattern3[1710]=1710;
		pattern3[1711]=1711;
		pattern3[1712]=1712;
		pattern3[1713]=1713;
		pattern3[1714]=1714;
		pattern3[1715]=1715;
		pattern3[1716]=1716;
		pattern3[1717]=1717;
		pattern3[1718]=1718;
		pattern3[1719]=1719;
		pattern3[1720]=1720;
		pattern3[1721]=1721;
		pattern3[1722]=1722;
		pattern3[1723]=1723;
		pattern3[1724]=1724;
		pattern3[1725]=1725;
		pattern3[1726]=1726;
		pattern3[1727]=1727;
		pattern3[1728]=1728;
		pattern3[1729]=1729;
		pattern3[1730]=1730;
		pattern3[1731]=1731;
		pattern3[1732]=1732;
		pattern3[1733]=1733;
		pattern3[1734]=1734;
		pattern3[1735]=1735;
		pattern3[1736]=1736;
		pattern3[1737]=1737;
		pattern3[1738]=1738;
		pattern3[1739]=1739;
		pattern3[1740]=1740;
		pattern3[1741]=1741;
		pattern3[1742]=1742;
		pattern3[1743]=1743;
		pattern3[1744]=1744;
		pattern3[1745]=1745;
		pattern3[1746]=1746;
		pattern3[1747]=1747;
		pattern3[1748]=1748;
		pattern3[1749]=1749;
		pattern3[1750]=1750;
		pattern3[1751]=1751;
		pattern3[1752]=1752;
		pattern3[1753]=1753;
		pattern3[1754]=1754;
		pattern3[1755]=1755;
		pattern3[1756]=1756;
		pattern3[1757]=1757;
		pattern3[1758]=1758;
		pattern3[1759]=1759;
		pattern3[1760]=1760;
		pattern3[1761]=1761;
		pattern3[1762]=1762;
		pattern3[1763]=1763;
		pattern3[1764]=1764;
		pattern3[1765]=1765;
		pattern3[1766]=1766;
		pattern3[1767]=1767;
		pattern3[1768]=1768;
		pattern3[1769]=1769;
		pattern3[1770]=1770;
		pattern3[1771]=1771;
		pattern3[1772]=1772;
		pattern3[1773]=1773;
		pattern3[1774]=1774;
		pattern3[1775]=1775;
		pattern3[1776]=1776;
		pattern3[1777]=1777;
		pattern3[1778]=1778;
		pattern3[1779]=1779;
		pattern3[1780]=1780;
		pattern3[1781]=1781;
		pattern3[1782]=1782;
		pattern3[1783]=1783;
		pattern3[1784]=1784;
		pattern3[1785]=1785;
		pattern3[1786]=1786;
		pattern3[1787]=1787;
		pattern3[1788]=1788;
		pattern3[1789]=1789;
		pattern3[1790]=1790;
		pattern3[1791]=1791;
		pattern3[1792]=1792;
		pattern3[1793]=1793;
		pattern3[1794]=1794;
		pattern3[1795]=1795;
		pattern3[1796]=1796;
		pattern3[1797]=1797;
		pattern3[1798]=1798;
		pattern3[1799]=1799;
		pattern3[1800]=1800;
		pattern3[1801]=1801;
		pattern3[1802]=1802;
		pattern3[1803]=1803;
		pattern3[1804]=1804;
		pattern3[1805]=1805;
		pattern3[1806]=1806;
		pattern3[1807]=1807;
		pattern3[1808]=1808;
		pattern3[1809]=1809;
		pattern3[1810]=1810;
		pattern3[1811]=1811;
		pattern3[1812]=1812;
		pattern3[1813]=1813;
		pattern3[1814]=1814;
		pattern3[1815]=1815;
		pattern3[1816]=1816;
		pattern3[1817]=1817;
		pattern3[1818]=1818;
		pattern3[1819]=1819;
		pattern3[1820]=1820;
		pattern3[1821]=1821;
		pattern3[1822]=1822;
		pattern3[1823]=1823;
		pattern3[1824]=1824;
		pattern3[1825]=1825;
		pattern3[1826]=1826;
		pattern3[1827]=1827;
		pattern3[1828]=1828;
		pattern3[1829]=1829;
		pattern3[1830]=1830;
		pattern3[1831]=1831;
		pattern3[1832]=1832;
		pattern3[1833]=1833;
		pattern3[1834]=1834;
		pattern3[1835]=1835;
		pattern3[1836]=1836;
		pattern3[1837]=1837;
		pattern3[1838]=1838;
		pattern3[1839]=1839;
		pattern3[1840]=1840;
		pattern3[1841]=1841;
		pattern3[1842]=1842;
		pattern3[1843]=1843;
		pattern3[1844]=1844;
		pattern3[1845]=1845;
		pattern3[1846]=1846;
		pattern3[1847]=1847;
		pattern3[1848]=1848;
		pattern3[1849]=1849;
		pattern3[1850]=1850;
		pattern3[1851]=1851;
		pattern3[1852]=1852;
		pattern3[1853]=1853;
		pattern3[1854]=1854;
		pattern3[1855]=1855;
		pattern3[1856]=1856;
		pattern3[1857]=1857;
		pattern3[1858]=1858;
		pattern3[1859]=1859;
		pattern3[1860]=1860;
		pattern3[1861]=1861;
		pattern3[1862]=1862;
		pattern3[1863]=1863;
		pattern3[1864]=1864;
		pattern3[1865]=1865;
		pattern3[1866]=1866;
		pattern3[1867]=1867;
		pattern3[1868]=1868;
		pattern3[1869]=1869;
		pattern3[1870]=1870;
		pattern3[1871]=1871;
		pattern3[1872]=1872;
		pattern3[1873]=1873;
		pattern3[1874]=1874;
		pattern3[1875]=1875;
		pattern3[1876]=1876;
		pattern3[1877]=1877;
		pattern3[1878]=1878;
		pattern3[1879]=1879;
		pattern3[1880]=1880;
		pattern3[1881]=1881;
		pattern3[1882]=1882;
		pattern3[1883]=1883;
		pattern3[1884]=1884;
		pattern3[1885]=1885;
		pattern3[1886]=1886;
		pattern3[1887]=1887;
		pattern3[1888]=1888;
		pattern3[1889]=1889;
		pattern3[1890]=1890;
		pattern3[1891]=1891;
		pattern3[1892]=1892;
		pattern3[1893]=1893;
		pattern3[1894]=1894;
		pattern3[1895]=1895;
		pattern3[1896]=1896;
		pattern3[1897]=1897;
		pattern3[1898]=1898;
		pattern3[1899]=1899;
		pattern3[1900]=1900;
		pattern3[1901]=1901;
		pattern3[1902]=1902;
		pattern3[1903]=1903;
		pattern3[1904]=1904;
		pattern3[1905]=1905;
		pattern3[1906]=1906;
		pattern3[1907]=1907;
		pattern3[1908]=1908;
		pattern3[1909]=1909;
		pattern3[1910]=1910;
		pattern3[1911]=1911;
		pattern3[1912]=1912;
		pattern3[1913]=1913;
		pattern3[1914]=1914;
		pattern3[1915]=1915;
		pattern3[1916]=1916;
		pattern3[1917]=1917;
		pattern3[1918]=1918;
		pattern3[1919]=1919;
		pattern3[1920]=1920;
		pattern3[1921]=1921;
		pattern3[1922]=1922;
		pattern3[1923]=1923;
		pattern3[1924]=1924;
		pattern3[1925]=1925;
		pattern3[1926]=1926;
		pattern3[1927]=1927;
		pattern3[1928]=1928;
		pattern3[1929]=1929;
		pattern3[1930]=1930;
		pattern3[1931]=1931;
		pattern3[1932]=1932;
		pattern3[1933]=1933;
		pattern3[1934]=1934;
		pattern3[1935]=1935;
		pattern3[1936]=1936;
		pattern3[1937]=1937;
		pattern3[1938]=1938;
		pattern3[1939]=1939;
		pattern3[1940]=1940;
		pattern3[1941]=1941;
		pattern3[1942]=1942;
		pattern3[1943]=1943;
		pattern3[1944]=1944;
		pattern3[1945]=1945;
		pattern3[1946]=1946;
		pattern3[1947]=1947;
		pattern3[1948]=1948;
		pattern3[1949]=1949;
		pattern3[1950]=1950;
		pattern3[1951]=1951;
		pattern3[1952]=1952;
		pattern3[1953]=1953;
		pattern3[1954]=1954;
		pattern3[1955]=1955;
		pattern3[1956]=1956;
		pattern3[1957]=1957;
		pattern3[1958]=1958;
		pattern3[1959]=1959;
		pattern3[1960]=1960;
		pattern3[1961]=1961;
		pattern3[1962]=1962;
		pattern3[1963]=1963;
		pattern3[1964]=1964;
		pattern3[1965]=1965;
		pattern3[1966]=1966;
		pattern3[1967]=1967;
		pattern3[1968]=1968;
		pattern3[1969]=1969;
		pattern3[1970]=1970;
		pattern3[1971]=1971;
		pattern3[1972]=1972;
		pattern3[1973]=1973;
		pattern3[1974]=1974;
		pattern3[1975]=1975;
		pattern3[1976]=1976;
		pattern3[1977]=1977;
		pattern3[1978]=1978;
		pattern3[1979]=1979;
		pattern3[1980]=1980;
		pattern3[1981]=1981;
		pattern3[1982]=1982;
		pattern3[1983]=1983;
		pattern3[1984]=1984;
		pattern3[1985]=1985;
		pattern3[1986]=1986;
		pattern3[1987]=1987;
		pattern3[1988]=1988;
		pattern3[1989]=1989;
		pattern3[1990]=1990;
		pattern3[1991]=1991;
		pattern3[1992]=1992;
		pattern3[1993]=1993;
		pattern3[1994]=1994;
		pattern3[1995]=1995;
		pattern3[1996]=1996;
		pattern3[1997]=1997;
		pattern3[1998]=1998;
		pattern3[1999]=1999;
		pattern3[2000]=2000;
		pattern3[2001]=2001;
		pattern3[2002]=2002;
		pattern3[2003]=2003;
		pattern3[2004]=2004;
		pattern3[2005]=2005;
		pattern3[2006]=2006;
		pattern3[2007]=2007;
		pattern3[2008]=2008;
		pattern3[2009]=2009;
		pattern3[2010]=2010;
		pattern3[2011]=2011;
		pattern3[2012]=2012;
		pattern3[2013]=2013;
		pattern3[2014]=2014;
		pattern3[2015]=2015;
		pattern3[2016]=2016;
		pattern3[2017]=2017;
		pattern3[2018]=2018;
		pattern3[2019]=2019;
		pattern3[2020]=2020;
		pattern3[2021]=2021;
		pattern3[2022]=2022;
		pattern3[2023]=2023;
		pattern3[2024]=2024;
		pattern3[2025]=2025;
		pattern3[2026]=2026;
		pattern3[2027]=2027;
		pattern3[2028]=2028;
		pattern3[2029]=2029;
		pattern3[2030]=2030;
		pattern3[2031]=2031;
		pattern3[2032]=2032;
		pattern3[2033]=2033;
		pattern3[2034]=2034;
		pattern3[2035]=2035;
		pattern3[2036]=2036;
		pattern3[2037]=2037;
		pattern3[2038]=2038;
		pattern3[2039]=2039;
		pattern3[2040]=2040;
		pattern3[2041]=2041;
		pattern3[2042]=2042;
		pattern3[2043]=2043;
		pattern3[2044]=2044;
		pattern3[2045]=2045;
		pattern3[2046]=2046;
		pattern3[2047]=2047;
		pattern3[2048]=2048;
		pattern3[2049]=2049;
		pattern3[2050]=2050;
		pattern3[2051]=2051;
		pattern3[2052]=2052;
		pattern3[2053]=2053;
		pattern3[2054]=2054;
		pattern3[2055]=2055;
		pattern3[2056]=2056;
		pattern3[2057]=2057;
		pattern3[2058]=2058;
		pattern3[2059]=2059;
		pattern3[2060]=2060;
		pattern3[2061]=2061;
		pattern3[2062]=2062;
		pattern3[2063]=2063;
		pattern3[2064]=2064;
		pattern3[2065]=2065;
		pattern3[2066]=2066;
		pattern3[2067]=2067;
		pattern3[2068]=2068;
		pattern3[2069]=2069;
		pattern3[2070]=2070;
		pattern3[2071]=2071;
		pattern3[2072]=2072;
		pattern3[2073]=2073;
		pattern3[2074]=2074;
		pattern3[2075]=2075;
		pattern3[2076]=2076;
		pattern3[2077]=2077;
		pattern3[2078]=2078;
		pattern3[2079]=2079;
		pattern3[2080]=2080;
		pattern3[2081]=2081;
		pattern3[2082]=2082;
		pattern3[2083]=2083;
		pattern3[2084]=2084;
		pattern3[2085]=2085;
		pattern3[2086]=2086;
		pattern3[2087]=2087;
		pattern3[2088]=2088;
		pattern3[2089]=2089;
		pattern3[2090]=2090;
		pattern3[2091]=2091;
		pattern3[2092]=2092;
		pattern3[2093]=2093;
		pattern3[2094]=2094;
		pattern3[2095]=2095;
		pattern3[2096]=2096;
		pattern3[2097]=2097;
		pattern3[2098]=2098;
		pattern3[2099]=2099;
		pattern3[2100]=2100;
		pattern3[2101]=2101;
		pattern3[2102]=2102;
		pattern3[2103]=2103;
		pattern3[2104]=2104;
		pattern3[2105]=2105;
		pattern3[2106]=2106;
		pattern3[2107]=2107;
		pattern3[2108]=2108;
		pattern3[2109]=2109;
		pattern3[2110]=2110;
		pattern3[2111]=2111;
		pattern3[2112]=2112;
		pattern3[2113]=2113;
		pattern3[2114]=2114;
		pattern3[2115]=2115;
		pattern3[2116]=2116;
		pattern3[2117]=2117;
		pattern3[2118]=2118;
		pattern3[2119]=2119;
		pattern3[2120]=2120;
		pattern3[2121]=2121;
		pattern3[2122]=2122;
		pattern3[2123]=2123;
		pattern3[2124]=2124;
		pattern3[2125]=2125;
		pattern3[2126]=2126;
		pattern3[2127]=2127;
		pattern3[2128]=2128;
		pattern3[2129]=2129;
		pattern3[2130]=2130;
		pattern3[2131]=2131;
		pattern3[2132]=2132;
		pattern3[2133]=2133;
		pattern3[2134]=2134;
		pattern3[2135]=2135;
		pattern3[2136]=2136;
		pattern3[2137]=2137;
		pattern3[2138]=2138;
		pattern3[2139]=2139;
		pattern3[2140]=2140;
		pattern3[2141]=2141;
		pattern3[2142]=2142;
		pattern3[2143]=2143;
		pattern3[2144]=2144;
		pattern3[2145]=2145;
		pattern3[2146]=2146;
		pattern3[2147]=2147;
		pattern3[2148]=2148;
		pattern3[2149]=2149;
		pattern3[2150]=2150;
		pattern3[2151]=2151;
		pattern3[2152]=2152;
		pattern3[2153]=2153;
		pattern3[2154]=2154;
		pattern3[2155]=2155;
		pattern3[2156]=2156;
		pattern3[2157]=2157;
		pattern3[2158]=2158;
		pattern3[2159]=2159;
		pattern3[2160]=2160;
		pattern3[2161]=2161;
		pattern3[2162]=2162;
		pattern3[2163]=2163;
		pattern3[2164]=2164;
		pattern3[2165]=2165;
		pattern3[2166]=2166;
		pattern3[2167]=2167;
		pattern3[2168]=2168;
		pattern3[2169]=2169;
		pattern3[2170]=2170;
		pattern3[2171]=2171;
		pattern3[2172]=2172;
		pattern3[2173]=2173;
		pattern3[2174]=2174;
		pattern3[2175]=2175;
		pattern3[2176]=2176;
		pattern3[2177]=2177;
		pattern3[2178]=2178;
		pattern3[2179]=2179;
		pattern3[2180]=2180;
		pattern3[2181]=2181;
		pattern3[2182]=2182;
		pattern3[2183]=2183;
		pattern3[2184]=2184;
		pattern3[2185]=2185;
		pattern3[2186]=2186;
		pattern3[2187]=2187;
		pattern3[2188]=2188;
		pattern3[2189]=2189;
		pattern3[2190]=2190;
		pattern3[2191]=2191;
		pattern3[2192]=2192;
		pattern3[2193]=2193;
		pattern3[2194]=2194;
		pattern3[2195]=2195;
		pattern3[2196]=2196;
		pattern3[2197]=2197;
		pattern3[2198]=2198;
		pattern3[2199]=2199;
		pattern3[2200]=2200;
		pattern3[2201]=2201;
		pattern3[2202]=2202;
		pattern3[2203]=2203;
		pattern3[2204]=2204;
		pattern3[2205]=2205;
		pattern3[2206]=2206;
		pattern3[2207]=2207;
		pattern3[2208]=2208;
		pattern3[2209]=2209;
		pattern3[2210]=2210;
		pattern3[2211]=2211;
		pattern3[2212]=2212;
		pattern3[2213]=2213;
		pattern3[2214]=2214;
		pattern3[2215]=2215;
		pattern3[2216]=2216;
		pattern3[2217]=2217;
		pattern3[2218]=2218;
		pattern3[2219]=2219;
		pattern3[2220]=2220;
		pattern3[2221]=2221;
		pattern3[2222]=2222;
		pattern3[2223]=2223;
		pattern3[2224]=2224;
		pattern3[2225]=2225;
		pattern3[2226]=2226;
		pattern3[2227]=2227;
		pattern3[2228]=2228;
		pattern3[2229]=2229;
		pattern3[2230]=2230;
		pattern3[2231]=2231;
		pattern3[2232]=2232;
		pattern3[2233]=2233;
		pattern3[2234]=2234;
		pattern3[2235]=2235;
		pattern3[2236]=2236;
		pattern3[2237]=2237;
		pattern3[2238]=2238;
		pattern3[2239]=2239;
		pattern3[2240]=2240;
		pattern3[2241]=2241;
		pattern3[2242]=2242;
		pattern3[2243]=2243;
		pattern3[2244]=2244;
		pattern3[2245]=2245;
		pattern3[2246]=2246;
		pattern3[2247]=2247;
		pattern3[2248]=2248;
		pattern3[2249]=2249;
		pattern3[2250]=2250;
		pattern3[2251]=2251;
		pattern3[2252]=2252;
		pattern3[2253]=2253;
		pattern3[2254]=2254;
		pattern3[2255]=2255;
		pattern3[2256]=2256;
		pattern3[2257]=2257;
		pattern3[2258]=2258;
		pattern3[2259]=2259;
		pattern3[2260]=2260;
		pattern3[2261]=2261;
		pattern3[2262]=2262;
		pattern3[2263]=2263;
		pattern3[2264]=2264;
		pattern3[2265]=2265;
		pattern3[2266]=2266;
		pattern3[2267]=2267;
		pattern3[2268]=2268;
		pattern3[2269]=2269;
		pattern3[2270]=2270;
		pattern3[2271]=2271;
		pattern3[2272]=2272;
		pattern3[2273]=2273;
		pattern3[2274]=2274;
		pattern3[2275]=2275;
		pattern3[2276]=2276;
		pattern3[2277]=2277;
		pattern3[2278]=2278;
		pattern3[2279]=2279;
		pattern3[2280]=2280;
		pattern3[2281]=2281;
		pattern3[2282]=2282;
		pattern3[2283]=2283;
		pattern3[2284]=2284;
		pattern3[2285]=2285;
		pattern3[2286]=2286;
		pattern3[2287]=2287;
		pattern3[2288]=2288;
		pattern3[2289]=2289;
		pattern3[2290]=2290;
		pattern3[2291]=2291;
		pattern3[2292]=2292;
		pattern3[2293]=2293;
		pattern3[2294]=2294;
		pattern3[2295]=2295;
		pattern3[2296]=2296;
		pattern3[2297]=2297;
		pattern3[2298]=2298;
		pattern3[2299]=2299;
		pattern3[2300]=2300;
		pattern3[2301]=2301;
		pattern3[2302]=2302;
		pattern3[2303]=2303;
		pattern3[2304]=2304;
		pattern3[2305]=2305;
		pattern3[2306]=2306;
		pattern3[2307]=2307;
		pattern3[2308]=2308;
		pattern3[2309]=2309;
		pattern3[2310]=2310;
		pattern3[2311]=2311;
		pattern3[2312]=2312;
		pattern3[2313]=2313;
		pattern3[2314]=2314;
		pattern3[2315]=2315;
		pattern3[2316]=2316;
		pattern3[2317]=2317;
		pattern3[2318]=2318;
		pattern3[2319]=2319;
		pattern3[2320]=2320;
		pattern3[2321]=2321;
		pattern3[2322]=2322;
		pattern3[2323]=2323;
		pattern3[2324]=2324;
		pattern3[2325]=2325;
		pattern3[2326]=2326;
		pattern3[2327]=2327;
		pattern3[2328]=2328;
		pattern3[2329]=2329;
		pattern3[2330]=2330;
		pattern3[2331]=2331;
		pattern3[2332]=2332;
		pattern3[2333]=2333;
		pattern3[2334]=2334;
		pattern3[2335]=2335;
		pattern3[2336]=2336;
		pattern3[2337]=2337;
		pattern3[2338]=2338;
		pattern3[2339]=2339;
		pattern3[2340]=2340;
		pattern3[2341]=2341;
		pattern3[2342]=2342;
		pattern3[2343]=2343;
		pattern3[2344]=2344;
		pattern3[2345]=2345;
		pattern3[2346]=2346;
		pattern3[2347]=2347;
		pattern3[2348]=2348;
		pattern3[2349]=2349;
		pattern3[2350]=2350;
		pattern3[2351]=2351;
		pattern3[2352]=2352;
		pattern3[2353]=2353;
		pattern3[2354]=2354;
		pattern3[2355]=2355;
		pattern3[2356]=2356;
		pattern3[2357]=2357;
		pattern3[2358]=2358;
		pattern3[2359]=2359;
		pattern3[2360]=2360;
		pattern3[2361]=2361;
		pattern3[2362]=2362;
		pattern3[2363]=2363;
		pattern3[2364]=2364;
		pattern3[2365]=2365;
		pattern3[2366]=2366;
		pattern3[2367]=2367;
		pattern3[2368]=2368;
		pattern3[2369]=2369;
		pattern3[2370]=2370;
		pattern3[2371]=2371;
		pattern3[2372]=2372;
		pattern3[2373]=2373;
		pattern3[2374]=2374;
		pattern3[2375]=2375;
		pattern3[2376]=2376;
		pattern3[2377]=2377;
		pattern3[2378]=2378;
		pattern3[2379]=2379;
		pattern3[2380]=2380;
		pattern3[2381]=2381;
		pattern3[2382]=2382;
		pattern3[2383]=2383;
		pattern3[2384]=2384;
		pattern3[2385]=2385;
		pattern3[2386]=2386;
		pattern3[2387]=2387;
		pattern3[2388]=2388;
		pattern3[2389]=2389;
		pattern3[2390]=2390;
		pattern3[2391]=2391;
		pattern3[2392]=2392;
		pattern3[2393]=2393;
		pattern3[2394]=2394;
		pattern3[2395]=2395;
		pattern3[2396]=2396;
		pattern3[2397]=2397;
		pattern3[2398]=2398;
		pattern3[2399]=2399;
		pattern3[2400]=2400;
		pattern3[2401]=2401;
		pattern3[2402]=2402;
		pattern3[2403]=2403;
		pattern3[2404]=2404;
		pattern3[2405]=2405;
		pattern3[2406]=2406;
		pattern3[2407]=2407;
		pattern3[2408]=2408;
		pattern3[2409]=2409;
		pattern3[2410]=2410;
		pattern3[2411]=2411;
		pattern3[2412]=2412;
		pattern3[2413]=2413;
		pattern3[2414]=2414;
		pattern3[2415]=2415;
		pattern3[2416]=2416;
		pattern3[2417]=2417;
		pattern3[2418]=2418;
		pattern3[2419]=2419;
		pattern3[2420]=2420;
		pattern3[2421]=2421;
		pattern3[2422]=2422;
		pattern3[2423]=2423;
		pattern3[2424]=2424;
		pattern3[2425]=2425;
		pattern3[2426]=2426;
		pattern3[2427]=2427;
		pattern3[2428]=2428;
		pattern3[2429]=2429;
		pattern3[2430]=2430;
		pattern3[2431]=2431;
		pattern3[2432]=2432;
		pattern3[2433]=2433;
		pattern3[2434]=2434;
		pattern3[2435]=2435;
		pattern3[2436]=2436;
		pattern3[2437]=2437;
		pattern3[2438]=2438;
		pattern3[2439]=2439;
		pattern3[2440]=2440;
		pattern3[2441]=2441;
		pattern3[2442]=2442;
		pattern3[2443]=2443;
		pattern3[2444]=2444;
		pattern3[2445]=2445;
		pattern3[2446]=2446;
		pattern3[2447]=2447;
		pattern3[2448]=2448;
		pattern3[2449]=2449;
		pattern3[2450]=2450;
		pattern3[2451]=2451;
		pattern3[2452]=2452;
		pattern3[2453]=2453;
		pattern3[2454]=2454;
		pattern3[2455]=2455;
		pattern3[2456]=2456;
		pattern3[2457]=2457;
		pattern3[2458]=2458;
		pattern3[2459]=2459;
		pattern3[2460]=2460;
		pattern3[2461]=2461;
		pattern3[2462]=2462;
		pattern3[2463]=2463;
		pattern3[2464]=2464;
		pattern3[2465]=2465;
		pattern3[2466]=2466;
		pattern3[2467]=2467;
		pattern3[2468]=2468;
		pattern3[2469]=2469;
		pattern3[2470]=2470;
		pattern3[2471]=2471;
		pattern3[2472]=2472;
		pattern3[2473]=2473;
		pattern3[2474]=2474;
		pattern3[2475]=2475;
		pattern3[2476]=2476;
		pattern3[2477]=2477;
		pattern3[2478]=2478;
		pattern3[2479]=2479;
		pattern3[2480]=2480;
		pattern3[2481]=2481;
		pattern3[2482]=2482;
		pattern3[2483]=2483;
		pattern3[2484]=2484;
		pattern3[2485]=2485;
		pattern3[2486]=2486;
		pattern3[2487]=2487;
		pattern3[2488]=2488;
		pattern3[2489]=2489;
		pattern3[2490]=2490;
		pattern3[2491]=2491;
		pattern3[2492]=2492;
		pattern3[2493]=2493;
		pattern3[2494]=2494;
		pattern3[2495]=2495;
		pattern3[2496]=2496;
		pattern3[2497]=2497;
		pattern3[2498]=2498;
		pattern3[2499]=2499;
		pattern3[2500]=2500;
		pattern3[2501]=2501;
		pattern3[2502]=2502;
		pattern3[2503]=2503;
		pattern3[2504]=2504;
		pattern3[2505]=2505;
		pattern3[2506]=2506;
		pattern3[2507]=2507;
		pattern3[2508]=2508;
		pattern3[2509]=2509;
		pattern3[2510]=2510;
		pattern3[2511]=2511;
		pattern3[2512]=2512;
		pattern3[2513]=2513;
		pattern3[2514]=2514;
		pattern3[2515]=2515;
		pattern3[2516]=2516;
		pattern3[2517]=2517;
		pattern3[2518]=2518;
		pattern3[2519]=2519;
		pattern3[2520]=2520;
		pattern3[2521]=2521;
		pattern3[2522]=2522;
		pattern3[2523]=2523;
		pattern3[2524]=2524;
		pattern3[2525]=2525;
		pattern3[2526]=2526;
		pattern3[2527]=2527;
		pattern3[2528]=2528;
		pattern3[2529]=2529;
		pattern3[2530]=2530;
		pattern3[2531]=2531;
		pattern3[2532]=2532;
		pattern3[2533]=2533;
		pattern3[2534]=2534;
		pattern3[2535]=2535;
		pattern3[2536]=2536;
		pattern3[2537]=2537;
		pattern3[2538]=2538;
		pattern3[2539]=2539;
		pattern3[2540]=2540;
		pattern3[2541]=2541;
		pattern3[2542]=2542;
		pattern3[2543]=2543;
		pattern3[2544]=2544;
		pattern3[2545]=2545;
		pattern3[2546]=2546;
		pattern3[2547]=2547;
		pattern3[2548]=2548;
		pattern3[2549]=2549;
		pattern3[2550]=2550;
		pattern3[2551]=2551;
		pattern3[2552]=2552;
		pattern3[2553]=2553;
		pattern3[2554]=2554;
		pattern3[2555]=2555;
		pattern3[2556]=2556;
		pattern3[2557]=2557;
		pattern3[2558]=2558;
		pattern3[2559]=2559;
		pattern3[2560]=2560;
		pattern3[2561]=2561;
		pattern3[2562]=2562;
		pattern3[2563]=2563;
		pattern3[2564]=2564;
		pattern3[2565]=2565;
		pattern3[2566]=2566;
		pattern3[2567]=2567;
		pattern3[2568]=2568;
		pattern3[2569]=2569;
		pattern3[2570]=2570;
		pattern3[2571]=2571;
		pattern3[2572]=2572;
		pattern3[2573]=2573;
		pattern3[2574]=2574;
		pattern3[2575]=2575;
		pattern3[2576]=2576;
		pattern3[2577]=2577;
		pattern3[2578]=2578;
		pattern3[2579]=2579;
		pattern3[2580]=2580;
		pattern3[2581]=2581;
		pattern3[2582]=2582;
		pattern3[2583]=2583;
		pattern3[2584]=2584;
		pattern3[2585]=2585;
		pattern3[2586]=2586;
		pattern3[2587]=2587;
		pattern3[2588]=2588;
		pattern3[2589]=2589;
		pattern3[2590]=2590;
		pattern3[2591]=2591;
		pattern3[2592]=2592;
		pattern3[2593]=2593;
		pattern3[2594]=2594;
		pattern3[2595]=2595;
		pattern3[2596]=2596;
		pattern3[2597]=2597;
		pattern3[2598]=2598;
		pattern3[2599]=2599;
		pattern3[2600]=2600;
		pattern3[2601]=2601;
		pattern3[2602]=2602;
		pattern3[2603]=2603;
		pattern3[2604]=2604;
		pattern3[2605]=2605;
		pattern3[2606]=2606;
		pattern3[2607]=2607;
		pattern3[2608]=2608;
		pattern3[2609]=2609;
		pattern3[2610]=2610;
		pattern3[2611]=2611;
		pattern3[2612]=2612;
		pattern3[2613]=2613;
		pattern3[2614]=2614;
		pattern3[2615]=2615;
		pattern3[2616]=2616;
		pattern3[2617]=2617;
		pattern3[2618]=2618;
		pattern3[2619]=2619;
		pattern3[2620]=2620;
		pattern3[2621]=2621;
		pattern3[2622]=2622;
		pattern3[2623]=2623;
		pattern3[2624]=2624;
		pattern3[2625]=2625;
		pattern3[2626]=2626;
		pattern3[2627]=2627;
		pattern3[2628]=2628;
		pattern3[2629]=2629;
		pattern3[2630]=2630;
		pattern3[2631]=2631;
		pattern3[2632]=2632;
		pattern3[2633]=2633;
		pattern3[2634]=2634;
		pattern3[2635]=2635;
		pattern3[2636]=2636;
		pattern3[2637]=2637;
		pattern3[2638]=2638;
		pattern3[2639]=2639;
		pattern3[2640]=2640;
		pattern3[2641]=2641;
		pattern3[2642]=2642;
		pattern3[2643]=2643;
		pattern3[2644]=2644;
		pattern3[2645]=2645;
		pattern3[2646]=2646;
		pattern3[2647]=2647;
		pattern3[2648]=2648;
		pattern3[2649]=2649;
		pattern3[2650]=2650;
		pattern3[2651]=2651;
		pattern3[2652]=2652;
		pattern3[2653]=2653;
		pattern3[2654]=2654;
		pattern3[2655]=2655;
		pattern3[2656]=2656;
		pattern3[2657]=2657;
		pattern3[2658]=2658;
		pattern3[2659]=2659;
		pattern3[2660]=2660;
		pattern3[2661]=2661;
		pattern3[2662]=2662;
		pattern3[2663]=2663;
		pattern3[2664]=2664;
		pattern3[2665]=2665;
		pattern3[2666]=2666;
		pattern3[2667]=2667;
		pattern3[2668]=2668;
		pattern3[2669]=2669;
		pattern3[2670]=2670;
		pattern3[2671]=2671;
		pattern3[2672]=2672;
		pattern3[2673]=2673;
		pattern3[2674]=2674;
		pattern3[2675]=2675;
		pattern3[2676]=2676;
		pattern3[2677]=2677;
		pattern3[2678]=2678;
		pattern3[2679]=2679;
		pattern3[2680]=2680;
		pattern3[2681]=2681;
		pattern3[2682]=2682;
		pattern3[2683]=2683;
		pattern3[2684]=2684;
		pattern3[2685]=2685;
		pattern3[2686]=2686;
		pattern3[2687]=2687;
		pattern3[2688]=2688;
		pattern3[2689]=2689;
		pattern3[2690]=2690;
		pattern3[2691]=2691;
		pattern3[2692]=2692;
		pattern3[2693]=2693;
		pattern3[2694]=2694;
		pattern3[2695]=2695;
		pattern3[2696]=2696;
		pattern3[2697]=2697;
		pattern3[2698]=2698;
		pattern3[2699]=2699;
		pattern3[2700]=2700;
		pattern3[2701]=2701;
		pattern3[2702]=2702;
		pattern3[2703]=2703;
		pattern3[2704]=2704;
		pattern3[2705]=2705;
		pattern3[2706]=2706;
		pattern3[2707]=2707;
		pattern3[2708]=2708;
		pattern3[2709]=2709;
		pattern3[2710]=2710;
		pattern3[2711]=2711;
		pattern3[2712]=2712;
		pattern3[2713]=2713;
		pattern3[2714]=2714;
		pattern3[2715]=2715;
		pattern3[2716]=2716;
		pattern3[2717]=2717;
		pattern3[2718]=2718;
		pattern3[2719]=2719;
		pattern3[2720]=2720;
		pattern3[2721]=2721;
		pattern3[2722]=2722;
		pattern3[2723]=2723;
		pattern3[2724]=2724;
		pattern3[2725]=2725;
		pattern3[2726]=2726;
		pattern3[2727]=2727;
		pattern3[2728]=2728;
		pattern3[2729]=2729;
		pattern3[2730]=2730;
		pattern3[2731]=2731;
		pattern3[2732]=2732;
		pattern3[2733]=2733;
		pattern3[2734]=2734;
		pattern3[2735]=2735;
		pattern3[2736]=2736;
		pattern3[2737]=2737;
		pattern3[2738]=2738;
		pattern3[2739]=2739;
		pattern3[2740]=2740;
		pattern3[2741]=2741;
		pattern3[2742]=2742;
		pattern3[2743]=2743;
		pattern3[2744]=2744;
		pattern3[2745]=2745;
		pattern3[2746]=2746;
		pattern3[2747]=2747;
		pattern3[2748]=2748;
		pattern3[2749]=2749;
		pattern3[2750]=2750;
		pattern3[2751]=2751;
		pattern3[2752]=2752;
		pattern3[2753]=2753;
		pattern3[2754]=2754;
		pattern3[2755]=2755;
		pattern3[2756]=2756;
		pattern3[2757]=2757;
		pattern3[2758]=2758;
		pattern3[2759]=2759;
		pattern3[2760]=2760;
		pattern3[2761]=2761;
		pattern3[2762]=2762;
		pattern3[2763]=2763;
		pattern3[2764]=2764;
		pattern3[2765]=2765;
		pattern3[2766]=2766;
		pattern3[2767]=2767;
		pattern3[2768]=2768;
		pattern3[2769]=2769;
		pattern3[2770]=2770;
		pattern3[2771]=2771;
		pattern3[2772]=2772;
		pattern3[2773]=2773;
		pattern3[2774]=2774;
		pattern3[2775]=2775;
		pattern3[2776]=2776;
		pattern3[2777]=2777;
		pattern3[2778]=2778;
		pattern3[2779]=2779;
		pattern3[2780]=2780;
		pattern3[2781]=2781;
		pattern3[2782]=2782;
		pattern3[2783]=2783;
		pattern3[2784]=2784;
		pattern3[2785]=2785;
		pattern3[2786]=2786;
		pattern3[2787]=2787;
		pattern3[2788]=2788;
		pattern3[2789]=2789;
		pattern3[2790]=2790;
		pattern3[2791]=2791;
		pattern3[2792]=2792;
		pattern3[2793]=2793;
		pattern3[2794]=2794;
		pattern3[2795]=2795;
		pattern3[2796]=2796;
		pattern3[2797]=2797;
		pattern3[2798]=2798;
		pattern3[2799]=2799;
		pattern3[2800]=2800;
		pattern3[2801]=2801;
		pattern3[2802]=2802;
		pattern3[2803]=2803;
		pattern3[2804]=2804;
		pattern3[2805]=2805;
		pattern3[2806]=2806;
		pattern3[2807]=2807;
		pattern3[2808]=2808;
		pattern3[2809]=2809;
		pattern3[2810]=2810;
		pattern3[2811]=2811;
		pattern3[2812]=2812;
		pattern3[2813]=2813;
		pattern3[2814]=2814;
		pattern3[2815]=2815;
		pattern3[2816]=2816;
		pattern3[2817]=2817;
		pattern3[2818]=2818;
		pattern3[2819]=2819;
		pattern3[2820]=2820;
		pattern3[2821]=2821;
		pattern3[2822]=2822;
		pattern3[2823]=2823;
		pattern3[2824]=2824;
		pattern3[2825]=2825;
		pattern3[2826]=2826;
		pattern3[2827]=2827;
		pattern3[2828]=2828;
		pattern3[2829]=2829;
		pattern3[2830]=2830;
		pattern3[2831]=2831;
		pattern3[2832]=2832;
		pattern3[2833]=2833;
		pattern3[2834]=2834;
		pattern3[2835]=2835;
		pattern3[2836]=2836;
		pattern3[2837]=2837;
		pattern3[2838]=2838;
		pattern3[2839]=2839;
		pattern3[2840]=2840;
		pattern3[2841]=2841;
		pattern3[2842]=2842;
		pattern3[2843]=2843;
		pattern3[2844]=2844;
		pattern3[2845]=2845;
		pattern3[2846]=2846;
		pattern3[2847]=2847;
		pattern3[2848]=2848;
		pattern3[2849]=2849;
		pattern3[2850]=2850;
		pattern3[2851]=2851;
		pattern3[2852]=2852;
		pattern3[2853]=2853;
		pattern3[2854]=2854;
		pattern3[2855]=2855;
		pattern3[2856]=2856;
		pattern3[2857]=2857;
		pattern3[2858]=2858;
		pattern3[2859]=2859;
		pattern3[2860]=2860;
		pattern3[2861]=2861;
		pattern3[2862]=2862;
		pattern3[2863]=2863;
		pattern3[2864]=2864;
		pattern3[2865]=2865;
		pattern3[2866]=2866;
		pattern3[2867]=2867;
		pattern3[2868]=2868;
		pattern3[2869]=2869;
		pattern3[2870]=2870;
		pattern3[2871]=2871;
		pattern3[2872]=2872;
		pattern3[2873]=2873;
		pattern3[2874]=2874;
		pattern3[2875]=2875;
		pattern3[2876]=2876;
		pattern3[2877]=2877;
		pattern3[2878]=2878;
		pattern3[2879]=2879;
		pattern3[2880]=2880;
		pattern3[2881]=2881;
		pattern3[2882]=2882;
		pattern3[2883]=2883;
		pattern3[2884]=2884;
		pattern3[2885]=2885;
		pattern3[2886]=2886;
		pattern3[2887]=2887;
		pattern3[2888]=2888;
		pattern3[2889]=2889;
		pattern3[2890]=2890;
		pattern3[2891]=2891;
		pattern3[2892]=2892;
		pattern3[2893]=2893;
		pattern3[2894]=2894;
		pattern3[2895]=2895;
		pattern3[2896]=2896;
		pattern3[2897]=2897;
		pattern3[2898]=2898;
		pattern3[2899]=2899;
		pattern3[2900]=2900;
		pattern3[2901]=2901;
		pattern3[2902]=2902;
		pattern3[2903]=2903;
		pattern3[2904]=2904;
		pattern3[2905]=2905;
		pattern3[2906]=2906;
		pattern3[2907]=2907;
		pattern3[2908]=2908;
		pattern3[2909]=2909;
		pattern3[2910]=2910;
		pattern3[2911]=2911;
		pattern3[2912]=2912;
		pattern3[2913]=2913;
		pattern3[2914]=2914;
		pattern3[2915]=2915;
		pattern3[2916]=2916;
		pattern3[2917]=2917;
		pattern3[2918]=2918;
		pattern3[2919]=2919;
		pattern3[2920]=2920;
		pattern3[2921]=2921;
		pattern3[2922]=2922;
		pattern3[2923]=2923;
		pattern3[2924]=2924;
		pattern3[2925]=2925;
		pattern3[2926]=2926;
		pattern3[2927]=2927;
		pattern3[2928]=2928;
		pattern3[2929]=2929;
		pattern3[2930]=2930;
		pattern3[2931]=2931;
		pattern3[2932]=2932;
		pattern3[2933]=2933;
		pattern3[2934]=2934;
		pattern3[2935]=2935;
		pattern3[2936]=2936;
		pattern3[2937]=2937;
		pattern3[2938]=2938;
		pattern3[2939]=2939;
		pattern3[2940]=2940;
		pattern3[2941]=2941;
		pattern3[2942]=2942;
		pattern3[2943]=2943;
		pattern3[2944]=2944;
		pattern3[2945]=2945;
		pattern3[2946]=2946;
		pattern3[2947]=2947;
		pattern3[2948]=2948;
		pattern3[2949]=2949;
		pattern3[2950]=2950;
		pattern3[2951]=2951;
		pattern3[2952]=2952;
		pattern3[2953]=2953;
		pattern3[2954]=2954;
		pattern3[2955]=2955;
		pattern3[2956]=2956;
		pattern3[2957]=2957;
		pattern3[2958]=2958;
		pattern3[2959]=2959;
		pattern3[2960]=2960;
		pattern3[2961]=2961;
		pattern3[2962]=2962;
		pattern3[2963]=2963;
		pattern3[2964]=2964;
		pattern3[2965]=2965;
		pattern3[2966]=2966;
		pattern3[2967]=2967;
		pattern3[2968]=2968;
		pattern3[2969]=2969;
		pattern3[2970]=2970;
		pattern3[2971]=2971;
		pattern3[2972]=2972;
		pattern3[2973]=2973;
		pattern3[2974]=2974;
		pattern3[2975]=2975;
		pattern3[2976]=2976;
		pattern3[2977]=2977;
		pattern3[2978]=2978;
		pattern3[2979]=2979;
		pattern3[2980]=2980;
		pattern3[2981]=2981;
		pattern3[2982]=2982;
		pattern3[2983]=2983;
		pattern3[2984]=2984;
		pattern3[2985]=2985;
		pattern3[2986]=2986;
		pattern3[2987]=2987;
		pattern3[2988]=2988;
		pattern3[2989]=2989;
		pattern3[2990]=2990;
		pattern3[2991]=2991;
		pattern3[2992]=2992;
		pattern3[2993]=2993;
		pattern3[2994]=2994;
		pattern3[2995]=2995;
		pattern3[2996]=2996;
		pattern3[2997]=2997;
		pattern3[2998]=2998;
		pattern3[2999]=2999;
		pattern3[3000]=3000;
		pattern3[3001]=3001;
		pattern3[3002]=3002;
		pattern3[3003]=3003;
		pattern3[3004]=3004;
		pattern3[3005]=3005;
		pattern3[3006]=3006;
		pattern3[3007]=3007;
		pattern3[3008]=3008;
		pattern3[3009]=3009;
		pattern3[3010]=3010;
		pattern3[3011]=3011;
		pattern3[3012]=3012;
		pattern3[3013]=3013;
		pattern3[3014]=3014;
		pattern3[3015]=3015;
		pattern3[3016]=3016;
		pattern3[3017]=3017;
		pattern3[3018]=3018;
		pattern3[3019]=3019;
		pattern3[3020]=3020;
		pattern3[3021]=3021;
		pattern3[3022]=3022;
		pattern3[3023]=3023;
		pattern3[3024]=3024;
		pattern3[3025]=3025;
		pattern3[3026]=3026;
		pattern3[3027]=3027;
		pattern3[3028]=3028;
		pattern3[3029]=3029;
		pattern3[3030]=3030;
		pattern3[3031]=3031;
		pattern3[3032]=3032;
		pattern3[3033]=3033;
		pattern3[3034]=3034;
		pattern3[3035]=3035;
		pattern3[3036]=3036;
		pattern3[3037]=3037;
		pattern3[3038]=3038;
		pattern3[3039]=3039;
		pattern3[3040]=3040;
		pattern3[3041]=3041;
		pattern3[3042]=3042;
		pattern3[3043]=3043;
		pattern3[3044]=3044;
		pattern3[3045]=3045;
		pattern3[3046]=3046;
		pattern3[3047]=3047;
		pattern3[3048]=3048;
		pattern3[3049]=3049;
		pattern3[3050]=3050;
		pattern3[3051]=3051;
		pattern3[3052]=3052;
		pattern3[3053]=3053;
		pattern3[3054]=3054;
		pattern3[3055]=3055;
		pattern3[3056]=3056;
		pattern3[3057]=3057;
		pattern3[3058]=3058;
		pattern3[3059]=3059;
		pattern3[3060]=3060;
		pattern3[3061]=3061;
		pattern3[3062]=3062;
		pattern3[3063]=3063;
		pattern3[3064]=3064;
		pattern3[3065]=3065;
		pattern3[3066]=3066;
		pattern3[3067]=3067;
		pattern3[3068]=3068;
		pattern3[3069]=3069;
		pattern3[3070]=3070;
		pattern3[3071]=3071;
		pattern3[3072]=3072;
		pattern3[3073]=3073;
		pattern3[3074]=3074;
		pattern3[3075]=3075;
		pattern3[3076]=3076;
		pattern3[3077]=3077;
		pattern3[3078]=3078;
		pattern3[3079]=3079;
		pattern3[3080]=3080;
		pattern3[3081]=3081;
		pattern3[3082]=3082;
		pattern3[3083]=3083;
		pattern3[3084]=3084;
		pattern3[3085]=3085;
		pattern3[3086]=3086;
		pattern3[3087]=3087;
		pattern3[3088]=3088;
		pattern3[3089]=3089;
		pattern3[3090]=3090;
		pattern3[3091]=3091;
		pattern3[3092]=3092;
		pattern3[3093]=3093;
		pattern3[3094]=3094;
		pattern3[3095]=3095;
		pattern3[3096]=3096;
		pattern3[3097]=3097;
		pattern3[3098]=3098;
		pattern3[3099]=3099;
		pattern3[3100]=3100;
		pattern3[3101]=3101;
		pattern3[3102]=3102;
		pattern3[3103]=3103;
		pattern3[3104]=3104;
		pattern3[3105]=3105;
		pattern3[3106]=3106;
		pattern3[3107]=3107;
		pattern3[3108]=3108;
		pattern3[3109]=3109;
		pattern3[3110]=3110;
		pattern3[3111]=3111;
		pattern3[3112]=3112;
		pattern3[3113]=3113;
		pattern3[3114]=3114;
		pattern3[3115]=3115;
		pattern3[3116]=3116;
		pattern3[3117]=3117;
		pattern3[3118]=3118;
		pattern3[3119]=3119;
		pattern3[3120]=3120;
		pattern3[3121]=3121;
		pattern3[3122]=3122;
		pattern3[3123]=3123;
		pattern3[3124]=3124;
		pattern3[3125]=3125;
		pattern3[3126]=3126;
		pattern3[3127]=3127;
		pattern3[3128]=3128;
		pattern3[3129]=3129;
		pattern3[3130]=3130;
		pattern3[3131]=3131;
		pattern3[3132]=3132;
		pattern3[3133]=3133;
		pattern3[3134]=3134;
		pattern3[3135]=3135;
		pattern3[3136]=3136;
		pattern3[3137]=3137;
		pattern3[3138]=3138;
		pattern3[3139]=3139;
		pattern3[3140]=3140;
		pattern3[3141]=3141;
		pattern3[3142]=3142;
		pattern3[3143]=3143;
		pattern3[3144]=3144;
		pattern3[3145]=3145;
		pattern3[3146]=3146;
		pattern3[3147]=3147;
		pattern3[3148]=3148;
		pattern3[3149]=3149;
		pattern3[3150]=3150;
		pattern3[3151]=3151;
		pattern3[3152]=3152;
		pattern3[3153]=3153;
		pattern3[3154]=3154;
		pattern3[3155]=3155;
		pattern3[3156]=3156;
		pattern3[3157]=3157;
		pattern3[3158]=3158;
		pattern3[3159]=3159;
		pattern3[3160]=3160;
		pattern3[3161]=3161;
		pattern3[3162]=3162;
		pattern3[3163]=3163;
		pattern3[3164]=3164;
		pattern3[3165]=3165;
		pattern3[3166]=3166;
		pattern3[3167]=3167;
		pattern3[3168]=3168;
		pattern3[3169]=3169;
		pattern3[3170]=3170;
		pattern3[3171]=3171;
		pattern3[3172]=3172;
		pattern3[3173]=3173;
		pattern3[3174]=3174;
		pattern3[3175]=3175;
		pattern3[3176]=3176;
		pattern3[3177]=3177;
		pattern3[3178]=3178;
		pattern3[3179]=3179;
		pattern3[3180]=3180;
		pattern3[3181]=3181;
		pattern3[3182]=3182;
		pattern3[3183]=3183;
		pattern3[3184]=3184;
		pattern3[3185]=3185;
		pattern3[3186]=3186;
		pattern3[3187]=3187;
		pattern3[3188]=3188;
		pattern3[3189]=3189;
		pattern3[3190]=3190;
		pattern3[3191]=3191;
		pattern3[3192]=3192;
		pattern3[3193]=3193;
		pattern3[3194]=3194;
		pattern3[3195]=3195;
		pattern3[3196]=3196;
		pattern3[3197]=3197;
		pattern3[3198]=3198;
		pattern3[3199]=3199;
		pattern3[3200]=3200;
		pattern3[3201]=3201;
		pattern3[3202]=3202;
		pattern3[3203]=3203;
		pattern3[3204]=3204;
		pattern3[3205]=3205;
		pattern3[3206]=3206;
		pattern3[3207]=3207;
		pattern3[3208]=3208;
		pattern3[3209]=3209;
		pattern3[3210]=3210;
		pattern3[3211]=3211;
		pattern3[3212]=3212;
		pattern3[3213]=3213;
		pattern3[3214]=3214;
		pattern3[3215]=3215;
		pattern3[3216]=3216;
		pattern3[3217]=3217;
		pattern3[3218]=3218;
		pattern3[3219]=3219;
		pattern3[3220]=3220;
		pattern3[3221]=3221;
		pattern3[3222]=3222;
		pattern3[3223]=3223;
		pattern3[3224]=3224;
		pattern3[3225]=3225;
		pattern3[3226]=3226;
		pattern3[3227]=3227;
		pattern3[3228]=3228;
		pattern3[3229]=3229;
		pattern3[3230]=3230;
		pattern3[3231]=3231;
		pattern3[3232]=3232;
		pattern3[3233]=3233;
		pattern3[3234]=3234;
		pattern3[3235]=3235;
		pattern3[3236]=3236;
		pattern3[3237]=3237;
		pattern3[3238]=3238;
		pattern3[3239]=3239;
		pattern3[3240]=3240;
		pattern3[3241]=3241;
		pattern3[3242]=3242;
		pattern3[3243]=3243;
		pattern3[3244]=3244;
		pattern3[3245]=3245;
		pattern3[3246]=3246;
		pattern3[3247]=3247;
		pattern3[3248]=3248;
		pattern3[3249]=3249;
		pattern3[3250]=3250;
		pattern3[3251]=3251;
		pattern3[3252]=3252;
		pattern3[3253]=3253;
		pattern3[3254]=3254;
		pattern3[3255]=3255;
		pattern3[3256]=3256;
		pattern3[3257]=3257;
		pattern3[3258]=3258;
		pattern3[3259]=3259;
		pattern3[3260]=3260;
		pattern3[3261]=3261;
		pattern3[3262]=3262;
		pattern3[3263]=3263;
		pattern3[3264]=3264;
		pattern3[3265]=3265;
		pattern3[3266]=3266;
		pattern3[3267]=3267;
		pattern3[3268]=3268;
		pattern3[3269]=3269;
		pattern3[3270]=3270;
		pattern3[3271]=3271;
		pattern3[3272]=3272;
		pattern3[3273]=3273;
		pattern3[3274]=3274;
		pattern3[3275]=3275;
		pattern3[3276]=3276;
		pattern3[3277]=3277;
		pattern3[3278]=3278;
		pattern3[3279]=3279;
		pattern3[3280]=3280;
		pattern3[3281]=3281;
		pattern3[3282]=3282;
		pattern3[3283]=3283;
		pattern3[3284]=3284;
		pattern3[3285]=3285;
		pattern3[3286]=3286;
		pattern3[3287]=3287;
		pattern3[3288]=3288;
		pattern3[3289]=3289;
		pattern3[3290]=3290;
		pattern3[3291]=3291;
		pattern3[3292]=3292;
		pattern3[3293]=3293;
		pattern3[3294]=3294;
		pattern3[3295]=3295;
		pattern3[3296]=3296;
		pattern3[3297]=3297;
		pattern3[3298]=3298;
		pattern3[3299]=3299;
		pattern3[3300]=3300;
		pattern3[3301]=3301;
		pattern3[3302]=3302;
		pattern3[3303]=3303;
		pattern3[3304]=3304;
		pattern3[3305]=3305;
		pattern3[3306]=3306;
		pattern3[3307]=3307;
		pattern3[3308]=3308;
		pattern3[3309]=3309;
		pattern3[3310]=3310;
		pattern3[3311]=3311;
		pattern3[3312]=3312;
		pattern3[3313]=3313;
		pattern3[3314]=3314;
		pattern3[3315]=3315;
		pattern3[3316]=3316;
		pattern3[3317]=3317;
		pattern3[3318]=3318;
		pattern3[3319]=3319;
		pattern3[3320]=3320;
		pattern3[3321]=3321;
		pattern3[3322]=3322;
		pattern3[3323]=3323;
		pattern3[3324]=3324;
		pattern3[3325]=3325;
		pattern3[3326]=3326;
		pattern3[3327]=3327;
		pattern3[3328]=3328;
		pattern3[3329]=3329;
		pattern3[3330]=3330;
		pattern3[3331]=3331;
		pattern3[3332]=3332;
		pattern3[3333]=3333;
		pattern3[3334]=3334;
		pattern3[3335]=3335;
		pattern3[3336]=3336;
		pattern3[3337]=3337;
		pattern3[3338]=3338;
		pattern3[3339]=3339;
		pattern3[3340]=3340;
		pattern3[3341]=3341;
		pattern3[3342]=3342;
		pattern3[3343]=3343;
		pattern3[3344]=3344;
		pattern3[3345]=3345;
		pattern3[3346]=3346;
		pattern3[3347]=3347;
		pattern3[3348]=3348;
		pattern3[3349]=3349;
		pattern3[3350]=3350;
		pattern3[3351]=3351;
		pattern3[3352]=3352;
		pattern3[3353]=3353;
		pattern3[3354]=3354;
		pattern3[3355]=3355;
		pattern3[3356]=3356;
		pattern3[3357]=3357;
		pattern3[3358]=3358;
		pattern3[3359]=3359;
		pattern3[3360]=3360;
		pattern3[3361]=3361;
		pattern3[3362]=3362;
		pattern3[3363]=3363;
		pattern3[3364]=3364;
		pattern3[3365]=3365;
		pattern3[3366]=3366;
		pattern3[3367]=3367;
		pattern3[3368]=3368;
		pattern3[3369]=3369;
		pattern3[3370]=3370;
		pattern3[3371]=3371;
		pattern3[3372]=3372;
		pattern3[3373]=3373;
		pattern3[3374]=3374;
		pattern3[3375]=3375;
		pattern3[3376]=3376;
		pattern3[3377]=3377;
		pattern3[3378]=3378;
		pattern3[3379]=3379;
		pattern3[3380]=3380;
		pattern3[3381]=3381;
		pattern3[3382]=3382;
		pattern3[3383]=3383;
		pattern3[3384]=3384;
		pattern3[3385]=3385;
		pattern3[3386]=3386;
		pattern3[3387]=3387;
		pattern3[3388]=3388;
		pattern3[3389]=3389;
		pattern3[3390]=3390;
		pattern3[3391]=3391;
		pattern3[3392]=3392;
		pattern3[3393]=3393;
		pattern3[3394]=3394;
		pattern3[3395]=3395;
		pattern3[3396]=3396;
		pattern3[3397]=3397;
		pattern3[3398]=3398;
		pattern3[3399]=3399;
		pattern3[3400]=3400;
		pattern3[3401]=3401;
		pattern3[3402]=3402;
		pattern3[3403]=3403;
		pattern3[3404]=3404;
		pattern3[3405]=3405;
		pattern3[3406]=3406;
		pattern3[3407]=3407;
		pattern3[3408]=3408;
		pattern3[3409]=3409;
		pattern3[3410]=3410;
		pattern3[3411]=3411;
		pattern3[3412]=3412;
		pattern3[3413]=3413;
		pattern3[3414]=3414;
		pattern3[3415]=3415;
		pattern3[3416]=3416;
		pattern3[3417]=3417;
		pattern3[3418]=3418;
		pattern3[3419]=3419;
		pattern3[3420]=3420;
		pattern3[3421]=3421;
		pattern3[3422]=3422;
		pattern3[3423]=3423;
		pattern3[3424]=3424;
		pattern3[3425]=3425;
		pattern3[3426]=3426;
		pattern3[3427]=3427;
		pattern3[3428]=3428;
		pattern3[3429]=3429;
		pattern3[3430]=3430;
		pattern3[3431]=3431;
		pattern3[3432]=3432;
		pattern3[3433]=3433;
		pattern3[3434]=3434;
		pattern3[3435]=3435;
		pattern3[3436]=3436;
		pattern3[3437]=3437;
		pattern3[3438]=3438;
		pattern3[3439]=3439;
		pattern3[3440]=3440;
		pattern3[3441]=3441;
		pattern3[3442]=3442;
		pattern3[3443]=3443;
		pattern3[3444]=3444;
		pattern3[3445]=3445;
		pattern3[3446]=3446;
		pattern3[3447]=3447;
		pattern3[3448]=3448;
		pattern3[3449]=3449;
		pattern3[3450]=3450;
		pattern3[3451]=3451;
		pattern3[3452]=3452;
		pattern3[3453]=3453;
		pattern3[3454]=3454;
		pattern3[3455]=3455;
		pattern3[3456]=3456;
		pattern3[3457]=3457;
		pattern3[3458]=3458;
		pattern3[3459]=3459;
		pattern3[3460]=3460;
		pattern3[3461]=3461;
		pattern3[3462]=3462;
		pattern3[3463]=3463;
		pattern3[3464]=3464;
		pattern3[3465]=3465;
		pattern3[3466]=3466;
		pattern3[3467]=3467;
		pattern3[3468]=3468;
		pattern3[3469]=3469;
		pattern3[3470]=3470;
		pattern3[3471]=3471;
		pattern3[3472]=3472;
		pattern3[3473]=3473;
		pattern3[3474]=3474;
		pattern3[3475]=3475;
		pattern3[3476]=3476;
		pattern3[3477]=3477;
		pattern3[3478]=3478;
		pattern3[3479]=3479;
		pattern3[3480]=3480;
		pattern3[3481]=3481;
		pattern3[3482]=3482;
		pattern3[3483]=3483;
		pattern3[3484]=3484;
		pattern3[3485]=3485;
		pattern3[3486]=3486;
		pattern3[3487]=3487;
		pattern3[3488]=3488;
		pattern3[3489]=3489;
		pattern3[3490]=3490;
		pattern3[3491]=3491;
		pattern3[3492]=3492;
		pattern3[3493]=3493;
		pattern3[3494]=3494;
		pattern3[3495]=3495;
		pattern3[3496]=3496;
		pattern3[3497]=3497;
		pattern3[3498]=3498;
		pattern3[3499]=3499;
		pattern3[3500]=3500;
		pattern3[3501]=3501;
		pattern3[3502]=3502;
		pattern3[3503]=3503;
		pattern3[3504]=3504;
		pattern3[3505]=3505;
		pattern3[3506]=3506;
		pattern3[3507]=3507;
		pattern3[3508]=3508;
		pattern3[3509]=3509;
		pattern3[3510]=3510;
		pattern3[3511]=3511;
		pattern3[3512]=3512;
		pattern3[3513]=3513;
		pattern3[3514]=3514;
		pattern3[3515]=3515;
		pattern3[3516]=3516;
		pattern3[3517]=3517;
		pattern3[3518]=3518;
		pattern3[3519]=3519;
		pattern3[3520]=3520;
		pattern3[3521]=3521;
		pattern3[3522]=3522;
		pattern3[3523]=3523;
		pattern3[3524]=3524;
		pattern3[3525]=3525;
		pattern3[3526]=3526;
		pattern3[3527]=3527;
		pattern3[3528]=3528;
		pattern3[3529]=3529;
		pattern3[3530]=3530;
		pattern3[3531]=3531;
		pattern3[3532]=3532;
		pattern3[3533]=3533;
		pattern3[3534]=3534;
		pattern3[3535]=3535;
		pattern3[3536]=3536;
		pattern3[3537]=3537;
		pattern3[3538]=3538;
		pattern3[3539]=3539;
		pattern3[3540]=3540;
		pattern3[3541]=3541;
		pattern3[3542]=3542;
		pattern3[3543]=3543;
		pattern3[3544]=3544;
		pattern3[3545]=3545;
		pattern3[3546]=3546;
		pattern3[3547]=3547;
		pattern3[3548]=3548;
		pattern3[3549]=3549;
		pattern3[3550]=3550;
		pattern3[3551]=3551;
		pattern3[3552]=3552;
		pattern3[3553]=3553;
		pattern3[3554]=3554;
		pattern3[3555]=3555;
		pattern3[3556]=3556;
		pattern3[3557]=3557;
		pattern3[3558]=3558;
		pattern3[3559]=3559;
		pattern3[3560]=3560;
		pattern3[3561]=3561;
		pattern3[3562]=3562;
		pattern3[3563]=3563;
		pattern3[3564]=3564;
		pattern3[3565]=3565;
		pattern3[3566]=3566;
		pattern3[3567]=3567;
		pattern3[3568]=3568;
		pattern3[3569]=3569;
		pattern3[3570]=3570;
		pattern3[3571]=3571;
		pattern3[3572]=3572;
		pattern3[3573]=3573;
		pattern3[3574]=3574;
		pattern3[3575]=3575;
		pattern3[3576]=3576;
		pattern3[3577]=3577;
		pattern3[3578]=3578;
		pattern3[3579]=3579;
		pattern3[3580]=3580;
		pattern3[3581]=3581;
		pattern3[3582]=3582;
		pattern3[3583]=3583;
		pattern3[3584]=3584;
		pattern3[3585]=3585;
		pattern3[3586]=3586;
		pattern3[3587]=3587;
		pattern3[3588]=3588;
		pattern3[3589]=3589;
		pattern3[3590]=3590;
		pattern3[3591]=3591;
		pattern3[3592]=3592;
		pattern3[3593]=3593;
		pattern3[3594]=3594;
		pattern3[3595]=3595;
		pattern3[3596]=3596;
		pattern3[3597]=3597;
		pattern3[3598]=3598;
		pattern3[3599]=3599;
		pattern3[3600]=3600;
		pattern3[3601]=3601;
		pattern3[3602]=3602;
		pattern3[3603]=3603;
		pattern3[3604]=3604;
		pattern3[3605]=3605;
		pattern3[3606]=3606;
		pattern3[3607]=3607;
		pattern3[3608]=3608;
		pattern3[3609]=3609;
		pattern3[3610]=3610;
		pattern3[3611]=3611;
		pattern3[3612]=3612;
		pattern3[3613]=3613;
		pattern3[3614]=3614;
		pattern3[3615]=3615;
		pattern3[3616]=3616;
		pattern3[3617]=3617;
		pattern3[3618]=3618;
		pattern3[3619]=3619;
		pattern3[3620]=3620;
		pattern3[3621]=3621;
		pattern3[3622]=3622;
		pattern3[3623]=3623;
		pattern3[3624]=3624;
		pattern3[3625]=3625;
		pattern3[3626]=3626;
		pattern3[3627]=3627;
		pattern3[3628]=3628;
		pattern3[3629]=3629;
		pattern3[3630]=3630;
		pattern3[3631]=3631;
		pattern3[3632]=3632;
		pattern3[3633]=3633;
		pattern3[3634]=3634;
		pattern3[3635]=3635;
		pattern3[3636]=3636;
		pattern3[3637]=3637;
		pattern3[3638]=3638;
		pattern3[3639]=3639;
		pattern3[3640]=3640;
		pattern3[3641]=3641;
		pattern3[3642]=3642;
		pattern3[3643]=3643;
		pattern3[3644]=3644;
		pattern3[3645]=3645;
		pattern3[3646]=3646;
		pattern3[3647]=3647;
		pattern3[3648]=3648;
		pattern3[3649]=3649;
		pattern3[3650]=3650;
		pattern3[3651]=3651;
		pattern3[3652]=3652;
		pattern3[3653]=3653;
		pattern3[3654]=3654;
		pattern3[3655]=3655;
		pattern3[3656]=3656;
		pattern3[3657]=3657;
		pattern3[3658]=3658;
		pattern3[3659]=3659;
		pattern3[3660]=3660;
		pattern3[3661]=3661;
		pattern3[3662]=3662;
		pattern3[3663]=3663;
		pattern3[3664]=3664;
		pattern3[3665]=3665;
		pattern3[3666]=3666;
		pattern3[3667]=3667;
		pattern3[3668]=3668;
		pattern3[3669]=3669;
		pattern3[3670]=3670;
		pattern3[3671]=3671;
		pattern3[3672]=3672;
		pattern3[3673]=3673;
		pattern3[3674]=3674;
		pattern3[3675]=3675;
		pattern3[3676]=3676;
		pattern3[3677]=3677;
		pattern3[3678]=3678;
		pattern3[3679]=3679;
		pattern3[3680]=3680;
		pattern3[3681]=3681;
		pattern3[3682]=3682;
		pattern3[3683]=3683;
		pattern3[3684]=3684;
		pattern3[3685]=3685;
		pattern3[3686]=3686;
		pattern3[3687]=3687;
		pattern3[3688]=3688;
		pattern3[3689]=3689;
		pattern3[3690]=3690;
		pattern3[3691]=3691;
		pattern3[3692]=3692;
		pattern3[3693]=3693;
		pattern3[3694]=3694;
		pattern3[3695]=3695;
		pattern3[3696]=3696;
		pattern3[3697]=3697;
		pattern3[3698]=3698;
		pattern3[3699]=3699;
		pattern3[3700]=3700;
		pattern3[3701]=3701;
		pattern3[3702]=3702;
		pattern3[3703]=3703;
		pattern3[3704]=3704;
		pattern3[3705]=3705;
		pattern3[3706]=3706;
		pattern3[3707]=3707;
		pattern3[3708]=3708;
		pattern3[3709]=3709;
		pattern3[3710]=3710;
		pattern3[3711]=3711;
		pattern3[3712]=3712;
		pattern3[3713]=3713;
		pattern3[3714]=3714;
		pattern3[3715]=3715;
		pattern3[3716]=3716;
		pattern3[3717]=3717;
		pattern3[3718]=3718;
		pattern3[3719]=3719;
		pattern3[3720]=3720;
		pattern3[3721]=3721;
		pattern3[3722]=3722;
		pattern3[3723]=3723;
		pattern3[3724]=3724;
		pattern3[3725]=3725;
		pattern3[3726]=3726;
		pattern3[3727]=3727;
		pattern3[3728]=3728;
		pattern3[3729]=3729;
		pattern3[3730]=3730;
		pattern3[3731]=3731;
		pattern3[3732]=3732;
		pattern3[3733]=3733;
		pattern3[3734]=3734;
		pattern3[3735]=3735;
		pattern3[3736]=3736;
		pattern3[3737]=3737;
		pattern3[3738]=3738;
		pattern3[3739]=3739;
		pattern3[3740]=3740;
		pattern3[3741]=3741;
		pattern3[3742]=3742;
		pattern3[3743]=3743;
		pattern3[3744]=3744;
		pattern3[3745]=3745;
		pattern3[3746]=3746;
		pattern3[3747]=3747;
		pattern3[3748]=3748;
		pattern3[3749]=3749;
		pattern3[3750]=3750;
		pattern3[3751]=3751;
		pattern3[3752]=3752;
		pattern3[3753]=3753;
		pattern3[3754]=3754;
		pattern3[3755]=3755;
		pattern3[3756]=3756;
		pattern3[3757]=3757;
		pattern3[3758]=3758;
		pattern3[3759]=3759;
		pattern3[3760]=3760;
		pattern3[3761]=3761;
		pattern3[3762]=3762;
		pattern3[3763]=3763;
		pattern3[3764]=3764;
		pattern3[3765]=3765;
		pattern3[3766]=3766;
		pattern3[3767]=3767;
		pattern3[3768]=3768;
		pattern3[3769]=3769;
		pattern3[3770]=3770;
		pattern3[3771]=3771;
		pattern3[3772]=3772;
		pattern3[3773]=3773;
		pattern3[3774]=3774;
		pattern3[3775]=3775;
		pattern3[3776]=3776;
		pattern3[3777]=3777;
		pattern3[3778]=3778;
		pattern3[3779]=3779;
		pattern3[3780]=3780;
		pattern3[3781]=3781;
		pattern3[3782]=3782;
		pattern3[3783]=3783;
		pattern3[3784]=3784;
		pattern3[3785]=3785;
		pattern3[3786]=3786;
		pattern3[3787]=3787;
		pattern3[3788]=3788;
		pattern3[3789]=3789;
		pattern3[3790]=3790;
		pattern3[3791]=3791;
		pattern3[3792]=3792;
		pattern3[3793]=3793;
		pattern3[3794]=3794;
		pattern3[3795]=3795;
		pattern3[3796]=3796;
		pattern3[3797]=3797;
		pattern3[3798]=3798;
		pattern3[3799]=3799;
		pattern3[3800]=3800;
		pattern3[3801]=3801;
		pattern3[3802]=3802;
		pattern3[3803]=3803;
		pattern3[3804]=3804;
		pattern3[3805]=3805;
		pattern3[3806]=3806;
		pattern3[3807]=3807;
		pattern3[3808]=3808;
		pattern3[3809]=3809;
		pattern3[3810]=3810;
		pattern3[3811]=3811;
		pattern3[3812]=3812;
		pattern3[3813]=3813;
		pattern3[3814]=3814;
		pattern3[3815]=3815;
		pattern3[3816]=3816;
		pattern3[3817]=3817;
		pattern3[3818]=3818;
		pattern3[3819]=3819;
		pattern3[3820]=3820;
		pattern3[3821]=3821;
		pattern3[3822]=3822;
		pattern3[3823]=3823;
		pattern3[3824]=3824;
		pattern3[3825]=3825;
		pattern3[3826]=3826;
		pattern3[3827]=3827;
		pattern3[3828]=3828;
		pattern3[3829]=3829;
		pattern3[3830]=3830;
		pattern3[3831]=3831;
		pattern3[3832]=3832;
		pattern3[3833]=3833;
		pattern3[3834]=3834;
		pattern3[3835]=3835;
		pattern3[3836]=3836;
		pattern3[3837]=3837;
		pattern3[3838]=3838;
		pattern3[3839]=3839;
		pattern3[3840]=3840;
		pattern3[3841]=3841;
		pattern3[3842]=3842;
		pattern3[3843]=3843;
		pattern3[3844]=3844;
		pattern3[3845]=3845;
		pattern3[3846]=3846;
		pattern3[3847]=3847;
		pattern3[3848]=3848;
		pattern3[3849]=3849;
		pattern3[3850]=3850;
		pattern3[3851]=3851;
		pattern3[3852]=3852;
		pattern3[3853]=3853;
		pattern3[3854]=3854;
		pattern3[3855]=3855;
		pattern3[3856]=3856;
		pattern3[3857]=3857;
		pattern3[3858]=3858;
		pattern3[3859]=3859;
		pattern3[3860]=3860;
		pattern3[3861]=3861;
		pattern3[3862]=3862;
		pattern3[3863]=3863;
		pattern3[3864]=3864;
		pattern3[3865]=3865;
		pattern3[3866]=3866;
		pattern3[3867]=3867;
		pattern3[3868]=3868;
		pattern3[3869]=3869;
		pattern3[3870]=3870;
		pattern3[3871]=3871;
		pattern3[3872]=3872;
		pattern3[3873]=3873;
		pattern3[3874]=3874;
		pattern3[3875]=3875;
		pattern3[3876]=3876;
		pattern3[3877]=3877;
		pattern3[3878]=3878;
		pattern3[3879]=3879;
		pattern3[3880]=3880;
		pattern3[3881]=3881;
		pattern3[3882]=3882;
		pattern3[3883]=3883;
		pattern3[3884]=3884;
		pattern3[3885]=3885;
		pattern3[3886]=3886;
		pattern3[3887]=3887;
		pattern3[3888]=3888;
		pattern3[3889]=3889;
		pattern3[3890]=3890;
		pattern3[3891]=3891;
		pattern3[3892]=3892;
		pattern3[3893]=3893;
		pattern3[3894]=3894;
		pattern3[3895]=3895;
		pattern3[3896]=3896;
		pattern3[3897]=3897;
		pattern3[3898]=3898;
		pattern3[3899]=3899;
		pattern3[3900]=3900;
		pattern3[3901]=3901;
		pattern3[3902]=3902;
		pattern3[3903]=3903;
		pattern3[3904]=3904;
		pattern3[3905]=3905;
		pattern3[3906]=3906;
		pattern3[3907]=3907;
		pattern3[3908]=3908;
		pattern3[3909]=3909;
		pattern3[3910]=3910;
		pattern3[3911]=3911;
		pattern3[3912]=3912;
		pattern3[3913]=3913;
		pattern3[3914]=3914;
		pattern3[3915]=3915;
		pattern3[3916]=3916;
		pattern3[3917]=3917;
		pattern3[3918]=3918;
		pattern3[3919]=3919;
		pattern3[3920]=3920;
		pattern3[3921]=3921;
		pattern3[3922]=3922;
		pattern3[3923]=3923;
		pattern3[3924]=3924;
		pattern3[3925]=3925;
		pattern3[3926]=3926;
		pattern3[3927]=3927;
		pattern3[3928]=3928;
		pattern3[3929]=3929;
		pattern3[3930]=3930;
		pattern3[3931]=3931;
		pattern3[3932]=3932;
		pattern3[3933]=3933;
		pattern3[3934]=3934;
		pattern3[3935]=3935;
		pattern3[3936]=3936;
		pattern3[3937]=3937;
		pattern3[3938]=3938;
		pattern3[3939]=3939;
		pattern3[3940]=3940;
		pattern3[3941]=3941;
		pattern3[3942]=3942;
		pattern3[3943]=3943;
		pattern3[3944]=3944;
		pattern3[3945]=3945;
		pattern3[3946]=3946;
		pattern3[3947]=3947;
		pattern3[3948]=3948;
		pattern3[3949]=3949;
		pattern3[3950]=3950;
		pattern3[3951]=3951;
		pattern3[3952]=3952;
		pattern3[3953]=3953;
		pattern3[3954]=3954;
		pattern3[3955]=3955;
		pattern3[3956]=3956;
		pattern3[3957]=3957;
		pattern3[3958]=3958;
		pattern3[3959]=3959;
		pattern3[3960]=3960;
		pattern3[3961]=3961;
		pattern3[3962]=3962;
		pattern3[3963]=3963;
		pattern3[3964]=3964;
		pattern3[3965]=3965;
		pattern3[3966]=3966;
		pattern3[3967]=3967;
		pattern3[3968]=3968;
		pattern3[3969]=3969;
		pattern3[3970]=3970;
		pattern3[3971]=3971;
		pattern3[3972]=3972;
		pattern3[3973]=3973;
		pattern3[3974]=3974;
		pattern3[3975]=3975;
		pattern3[3976]=3976;
		pattern3[3977]=3977;
		pattern3[3978]=3978;
		pattern3[3979]=3979;
		pattern3[3980]=3980;
		pattern3[3981]=3981;
		pattern3[3982]=3982;
		pattern3[3983]=3983;
		pattern3[3984]=3984;
		pattern3[3985]=3985;
		pattern3[3986]=3986;
		pattern3[3987]=3987;
		pattern3[3988]=3988;
		pattern3[3989]=3989;
		pattern3[3990]=3990;
		pattern3[3991]=3991;
		pattern3[3992]=3992;
		pattern3[3993]=3993;
		pattern3[3994]=3994;
		pattern3[3995]=3995;
		pattern3[3996]=3996;
		pattern3[3997]=3997;
		pattern3[3998]=3998;
		pattern3[3999]=3999;
		pattern3[4000]=4000;
		pattern3[4001]=4001;
		pattern3[4002]=4002;
		pattern3[4003]=4003;
		pattern3[4004]=4004;
		pattern3[4005]=4005;
		pattern3[4006]=4006;
		pattern3[4007]=4007;
		pattern3[4008]=4008;
		pattern3[4009]=4009;
		pattern3[4010]=4010;
		pattern3[4011]=4011;
		pattern3[4012]=4012;
		pattern3[4013]=4013;
		pattern3[4014]=4014;
		pattern3[4015]=4015;
		pattern3[4016]=4016;
		pattern3[4017]=4017;
		pattern3[4018]=4018;
		pattern3[4019]=4019;
		pattern3[4020]=4020;
		pattern3[4021]=4021;
		pattern3[4022]=4022;
		pattern3[4023]=4023;
		pattern3[4024]=4024;
		pattern3[4025]=4025;
		pattern3[4026]=4026;
		pattern3[4027]=4027;
		pattern3[4028]=4028;
		pattern3[4029]=4029;
		pattern3[4030]=4030;
		pattern3[4031]=4031;
		pattern3[4032]=4032;
		pattern3[4033]=4033;
		pattern3[4034]=4034;
		pattern3[4035]=4035;
		pattern3[4036]=4036;
		pattern3[4037]=4037;
		pattern3[4038]=4038;
		pattern3[4039]=4039;
		pattern3[4040]=4040;
		pattern3[4041]=4041;
		pattern3[4042]=4042;
		pattern3[4043]=4043;
		pattern3[4044]=4044;
		pattern3[4045]=4045;
		pattern3[4046]=4046;
		pattern3[4047]=4047;
		pattern3[4048]=4048;
		pattern3[4049]=4049;
		pattern3[4050]=4050;
		pattern3[4051]=4051;
		pattern3[4052]=4052;
		pattern3[4053]=4053;
		pattern3[4054]=4054;
		pattern3[4055]=4055;
		pattern3[4056]=4056;
		pattern3[4057]=4057;
		pattern3[4058]=4058;
		pattern3[4059]=4059;
		pattern3[4060]=4060;
		pattern3[4061]=4061;
		pattern3[4062]=4062;
		pattern3[4063]=4063;
		pattern3[4064]=4064;
		pattern3[4065]=4065;
		pattern3[4066]=4066;
		pattern3[4067]=4067;
		pattern3[4068]=4068;
		pattern3[4069]=4069;
		pattern3[4070]=4070;
		pattern3[4071]=4071;
		pattern3[4072]=4072;
		pattern3[4073]=4073;
		pattern3[4074]=4074;
		pattern3[4075]=4075;
		pattern3[4076]=4076;
		pattern3[4077]=4077;
		pattern3[4078]=4078;
		pattern3[4079]=4079;
		pattern3[4080]=4080;
		pattern3[4081]=4081;
		pattern3[4082]=4082;
		pattern3[4083]=4083;
		pattern3[4084]=4084;
		pattern3[4085]=4085;
		pattern3[4086]=4086;
		pattern3[4087]=4087;
		pattern3[4088]=4088;
		pattern3[4089]=4089;
		pattern3[4090]=4090;
		pattern3[4091]=4091;
		pattern3[4092]=4092;
		pattern3[4093]=4093;
		pattern3[4094]=4094;
		pattern3[4095]=4095;

*/

		//=========== load DMA ==========================
		u16 dataShifted;
		for(Index = 0; Index < npoints; Index++){
			dataShifted = pattern1[Index]<<4;
			TxPacket[Index*2] = (u8)(dataShifted & 0xFF);
			TxPacket[Index*2+1] = (u8)(dataShifted >> 8);
		}
		for(Index = 4096; Index < npoints*2; Index++){
			dataShifted = pattern2[Index-4096]<<4;
			TxPacket[Index*2] = (u8)(dataShifted & 0xFF);
			TxPacket[Index*2+1] = (u8)(dataShifted >> 8);
		}
		for(Index = 8192; Index < npoints*3; Index++){
			dataShifted = pattern3[Index-8192]<<4;
			TxPacket[Index*2] = (u8)(dataShifted & 0xFF);
			TxPacket[Index*2+1] = (u8)(dataShifted >> 8);
		}
		for(Index = 12288; Index < npoints*4; Index++){
			dataShifted = pattern2[Index-12288]<<4;
			TxPacket[Index*2] = (u8)(dataShifted & 0xFF);
			TxPacket[Index*2+1] = (u8)(dataShifted >> 8);
		}
		//===============================================

}


/*****************************************************************************/
/**
*
* This function transmits one packet non-blockingly through the DMA engine.
*
* @param	AxiDmaInstPtr points to the DMA engine instance
*
* @return	- XST_SUCCESS if the DMA accepts the packet successfully,
*		- XST_FAILURE otherwise.
*
* @note     None.
*
******************************************************************************/
static int sendDMApacket(XAxiDma * AxiDmaInstPtr, int debug_mode){
	XAxiDma_BdRing *TxRingPtr;
	u8 *TxPacket;
	u8 Value;
	XAxiDma_Bd *BdPtr;
	int Status;
	int Index;

	TxRingPtr = XAxiDma_GetTxRing(AxiDmaInstPtr);

	/* Create pattern in the packet to transmit */
	TxPacket = (u8 *) Packet;
	//Value = TEST_START_VALUE;
	Value = 0x01;

	fillTxPacketBuffer(MAX_PKT_LEN,TxPacket);

	/* Flush the SrcBuffer before the DMA transfer, in case the Data Cache
	 * is enabled
	 */
	Xil_DCacheFlushRange((UINTPTR)TxPacket, MAX_PKT_LEN);
#ifdef __aarch64__
	Xil_DCacheFlushRange((UINTPTR)RX_BUFFER_BASE, MAX_PKT_LEN);
#endif


	/* Allocate a BD */
	Status = XAxiDma_BdRingAlloc(TxRingPtr, 1, &BdPtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Set up the BD using the information of the packet to transmit */
	Status = XAxiDma_BdSetBufAddr(BdPtr, (UINTPTR) Packet);
	if (Status != XST_SUCCESS) {
		xil_printf(" *** Error: Tx set buffer addr %x on BD %x failed %d\r\n",
		    (UINTPTR)Packet, (UINTPTR)BdPtr, Status);
		return XST_FAILURE;
	}

	Status = XAxiDma_BdSetLength(BdPtr, MAX_PKT_LEN, TxRingPtr->MaxTransferLen);
	if (Status != XST_SUCCESS) {
		xil_printf(" *** Error: Tx set length %d on BD %x failed %d\r\n",
		    MAX_PKT_LEN, (UINTPTR)BdPtr, Status);
		return XST_FAILURE;
	}

#if (XPAR_AXIDMA_0_SG_INCLUDE_STSCNTRL_STRM == 1)
	Status = XAxiDma_BdSetAppWord(BdPtr, XAXIDMA_LAST_APPWORD, MAX_PKT_LEN);

	/* If Set app length failed, it is not fatal */
	if (Status != XST_SUCCESS) {
		xil_printf("Set app word failed with %d\r\n", Status);
	}
#endif

	/* For single packet, both SOF and EOF are to be set
	 */
	XAxiDma_BdSetCtrl(BdPtr, XAXIDMA_BD_CTRL_TXEOF_MASK |
						XAXIDMA_BD_CTRL_TXSOF_MASK);

	XAxiDma_BdSetId(BdPtr, (UINTPTR)Packet);

	/* Give the BD to DMA to kick off the transmission. */
	Status = XAxiDma_BdRingToHw(TxRingPtr, 1, BdPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("to hw failed %d\r\n", Status);
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}


/*
*
* This function checks data buffer after the DMA transfer is finished.
*
* @param	None
*
* @return	- XST_SUCCESS if validation is successful
*		- XST_FAILURE if validation is failure.
*
* @note		None.
*
******************************************************************************/
static int SaveData(int debug_mode)
{
	u8 *RxPacket;
	int Index = 0;
	int idx = 0;
	u8 Value;
	Xuint32 m0, m1, v0, v1;

	RxPacket = (u8 *) RX_BUFFER_BASE;
	Value = TEST_START_VALUE;

	/* Invalidate the DestBuffer before receiving the data, in case the
	 * Data Cache is enabled
	 */
#ifndef __aarch64__
	Xil_DCacheInvalidateRange((UINTPTR)RxPacket, MAX_PKT_LEN);
	Xil_DCacheInvalidateRange((Xuint32)outputDataBuffer, MAX_PKT_LEN);
	Xil_DCacheFlushRange((Xuint32)outputDataBuffer, MAX_PKT_LEN);
#endif

   idx = 0;
	for(Index = 0; Index < MAX_PKT_LEN; Index+=4) {
		m0 = ((unsigned int)RxPacket[Index+1]<<8) | (0x00FF & (unsigned int)RxPacket[Index]);
		m1 = ((unsigned int)RxPacket[Index+3]<<8) | (0x00FF & (unsigned int)RxPacket[Index+2]);
		v0 = m0 >> 2;
		v1 = m1 >> 2;
		//xil_printf("Sample: %d: %x%x\r\n",idx,v0,v1);
		outputDataBuffer[idx] = (v0 << 16) | (0x0000FFFF & v1);
		//xil_printf("Index: %d: %x\r\n",idx,outputDataBuffer[idx]);
		idx++;
	}
	numberDataSamples = idx*2;
	//xil_printf("Number of Samples: %d:\r\n",idx*2);
	return XST_SUCCESS;
}


static int receiveDMApacket(XAxiDma * AxiDmaInstPtr, int debug_mode)
{
	XAxiDma_BdRing *RxRingPtr;

	XAxiDma_Bd *BdPtr;
	int ProcessedBdCount;
	int FreeBdCount;
	int Status;


	RxRingPtr = XAxiDma_GetRxRing(AxiDmaInstPtr);

	/* Flush the SrcBuffer before the DMA transfer, in case the Data Cache
	 * is enabled
	 */
	Xil_DCacheFlushRange((UINTPTR)TX_BUFFER_BASE, MAX_PKT_LEN);

#ifdef __aarch64__
	Xil_DCacheFlushRange((UINTPTR)RX_BUFFER_BASE, MAX_PKT_LEN);
#endif
	/* Wait until the data has been received by the Rx channel */
	while ((ProcessedBdCount = XAxiDma_BdRingFromHw(RxRingPtr,
						       XAXIDMA_ALL_BDS, &BdPtr)) == 0) {
	}

	setGyroChannelControl(0x00000000);
    SaveData(0);


	/* Free all processed RX BDs for future transmission */
	Status = XAxiDma_BdRingFree(RxRingPtr, ProcessedBdCount, BdPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed to free %d rx BDs %d\r\n",
		    ProcessedBdCount, Status);
		return XST_FAILURE;
	}

	/* Return processed BDs to RX channel so we are ready to receive new
	 * packets:
	 *    - Allocate all free RX BDs
	 *    - Pass the BDs to RX channel
	 */
	FreeBdCount = XAxiDma_BdRingGetFreeCnt(RxRingPtr);
	Status = XAxiDma_BdRingAlloc(RxRingPtr, FreeBdCount, &BdPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("bd alloc failed\r\n");
		return XST_FAILURE;
	}

	Status = XAxiDma_BdRingToHw(RxRingPtr, FreeBdCount, BdPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("Submit %d rx BDs failed %d\r\n", FreeBdCount, Status);
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}


/*****************************************************************************/
/**
*
* This function waits until the DMA transaction is finished, checks data,
* and cleans up.
*
* @param	None
*
* @return	- XST_SUCCESS if DMA transfer is successful and data is correct,
*		- XST_FAILURE if fails.
*
* @note		None.
*
******************************************************************************/
static int CheckDmaResult(XAxiDma * AxiDmaInstPtr, int debug_mode, int skip_tx)
{
	XAxiDma_BdRing *TxRingPtr;
	XAxiDma_BdRing *RxRingPtr;
	XAxiDma_Bd *BdPtr;
	int ProcessedBdCount;
	int FreeBdCount;
	int Status;

	TxRingPtr = XAxiDma_GetTxRing(AxiDmaInstPtr);
	RxRingPtr = XAxiDma_GetRxRing(AxiDmaInstPtr);

	if(skip_tx == 0){
	/* Wait until the one BD TX transaction is done */
	while ((ProcessedBdCount = XAxiDma_BdRingFromHw(TxRingPtr,
						       XAXIDMA_ALL_BDS,
						       &BdPtr)) == 0) {  }

	  /* Free all processed TX BDs for future transmission */
	  Status = XAxiDma_BdRingFree(TxRingPtr, ProcessedBdCount, BdPtr);
	  if (Status != XST_SUCCESS) {
		xil_printf("Failed to free %d tx BDs %d\r\n",
		    ProcessedBdCount, Status);
		return XST_FAILURE;
	  }
	}
	/* Wait until the data has been received by the Rx channel */
	while ((ProcessedBdCount = XAxiDma_BdRingFromHw(RxRingPtr,
						       XAXIDMA_ALL_BDS, &BdPtr)) == 0) {
	}

	/* Check received data */
	if (SaveData(1) != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Free all processed RX BDs for future transmission */
	Status = XAxiDma_BdRingFree(RxRingPtr, ProcessedBdCount, BdPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed to free %d rx BDs %d\r\n",
		    ProcessedBdCount, Status);
		return XST_FAILURE;
	}

	/* Return processed BDs to RX channel so we are ready to receive new
	 * packets:
	 *    - Allocate all free RX BDs
	 *    - Pass the BDs to RX channel
	 */
	FreeBdCount = XAxiDma_BdRingGetFreeCnt(RxRingPtr);
	Status = XAxiDma_BdRingAlloc(RxRingPtr, FreeBdCount, &BdPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("bd alloc failed\r\n");
		return XST_FAILURE;
	}

	Status = XAxiDma_BdRingToHw(RxRingPtr, FreeBdCount, BdPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("Submit %d rx BDs failed %d\r\n", FreeBdCount, Status);
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}


// --------------------------------------------------------------------------
int receiveDMApackets(int num_packets){
	int i;



	for(i = 0; i < num_packets; i++){

	  Status = receiveDMApacket(&AxiDma, 0);
	  if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	  }

	}

	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}
// --------------------------------------------------------------------------
int sendDMApackets(int num_packets){
	int i;

	for(i = 0; i < num_packets; i++){
	  Status = sendDMApacket(&AxiDma, 0);
	  if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	  }
	}
	if (Status != XST_SUCCESS) {
	  return XST_FAILURE;
	}
	return XST_SUCCESS;
}

// June 5, 2019
// this function reset the FIFO, sets the packet size
// and receives 1 packet of data by activating
// the input channel.
// The argument dictates the packet size in number of
// samples.
// The clock of the channel is now set to be the maximum
// frequency.

void acquireSamples(int packet_size){

	// reset the FIFO and the CHannels
	resetGyroTxFIFO();
	resetGyroRxFIFO();

	setGyroChannelConfiguration(0x80000000);
	setGyroChannelConfiguration(0x00000000);

	// bit 17:16 is to divide clock by 2/4/8.
	if(packet_size == 64)
	  setGyroChannelConfiguration(0x00000000);
	if(packet_size == 128)
	  setGyroChannelConfiguration(0x00001000);
	if(packet_size == 256)
	  setGyroChannelConfiguration(0x00002000);
	if(packet_size == 512)
	  setGyroChannelConfiguration(0x00003000);
	if(packet_size == 1024)
	  setGyroChannelConfiguration(0x00004000);
	if(packet_size == 2048)
	  setGyroChannelConfiguration(0x00005000);
	if(packet_size == 4096)
	  setGyroChannelConfiguration(0x00006000);
	if(packet_size == 8192)
	  setGyroChannelConfiguration(0x00007000);

	setGyroChannelControl(0x00000000);

	// activate the output and the input shift registers
	setGyroChannelControl(0x00000010);
	receiveDMApackets(1);
	setGyroChannelControl(0x00000000);

}
// -------------------------------------------------------------------
int sendPacketButton(void){
	sendDMApackets(1);
	//setGyroTxFIFOLooping();
	setGyroChannelControl(0x00000001);
	//nops(100000);
	//setGyroChannelControl(0x00000000);
	return 1;
 }

// -------------------------------------------------------------------
void fastCalibrationADC0(void)
{
	unsigned int reg6;

	readSPI(&reg6,6);				// store for restoring later

	writeSPI_non_blocking(6,0x0a); // set fastcal and ADC_EN bits
	writeSPI_non_blocking(6,0x0e); // set CAL_START bit
	nops(100000);
	writeSPI_non_blocking(6,0x0a); // clear CAL_START bit

	writeSPI_non_blocking(6,reg6); // restore original value

}

// -------------------------------------------------------------------
void fastCalibrationADC1(void)
{
	unsigned int reg10;

	readSPI(&reg10,10);				// store for restoring later

	writeSPI_non_blocking(10,0x0a); // set fastcal and ADC_EN bits
	writeSPI_non_blocking(10,0x0e); // set CAL_START bit
	nops(100000);
	writeSPI_non_blocking(10,0x0a); // clear CAL_START bit

	writeSPI_non_blocking(10,reg10); // restore original value

}

 // -------------------------------------------------------------------
int receivePacketButton(void){

	resetGyroRxFIFO();

	setGyroChannelControl(0x00000010);	//start acquisition

	//======================================================
	// remove this later ---only added for calibration testing
	nops(80000);
	writeSPI_non_blocking(10,0x0e); // set calibration bit
	//======================================================

	nops(10000000); 					//delay value for DIV 1 of MCLK

	//======================================================
	// remove this later ---only added for calibration testing
	writeSPI_non_blocking(10,0x02); // clear calibration bit
	//======================================================

	setGyroChannelControl(0x00000000);	//reset acquisition
	receiveDMApacket(&AxiDma,0);		//receive data in ARM memory

	return 1;
}

// -------------------------------------------------------------------
int receivePacketButtonLoop(void){

	int i;

	//Status = RxSetup(&AxiDma); // ####

	resetGyroRxFIFO();

	for (i=0; i<NUM_RXFIFO_DUMMY_READS_REQUIRED;i++)
	{
		setGyroChannelControl(0x00000010);

		nops(10000000); // this is the value for DIV 1

		setGyroChannelControl(0x00000000);
		receiveDMApacket(&AxiDma,0);
	}

	setGyroChannelControl(0x00000010);

	//======================================================
	// remove this later ---only added for calibration testing
	nops(80000);
	writeSPI_non_blocking(6,0x0e); // set calibration bit
	//======================================================

	nops(1000000); // this is the value for DIV 1

	//======================================================
	// remove this later ---only added for calibration testing
	writeSPI_non_blocking(6,0x02); // clear calibration bit
	//======================================================

	setGyroChannelControl(0x00000000);
	receiveDMApacket(&AxiDma,0);

	return 1;
}


// -------------------------------------------------------------------
int initDMADevice(void){

	openDMADevice();

	Status = TxSetup(&AxiDma);
	if (Status != XST_SUCCESS) {
	   return XST_FAILURE;
	}
	else {
		 xil_printf("TxSetup completed. \r\n");
	}

	Status = RxSetup(&AxiDma);
	if (Status != XST_SUCCESS) {
	   return XST_FAILURE;
	}
	else {
		 xil_printf("RxSetup completed. \r\n");
	}

	return XST_SUCCESS;
}
// -------------------------------------------------------------------
int test_DMA_loopback( int num_packets, int debug_mode){
	int i;

    initDMADevice();

	for(i = 0; i < num_packets; i++){
	  /* Send a packet */

	  Status = sendDMApacket(&AxiDma, i);

	  if (Status != XST_SUCCESS) {
		  xil_printf(" Failed sending packet number: %d\r\n",i+1);
		return XST_FAILURE;
	  }


	  if(i == 0){
    setGyroChannelControl(0x00000011);
	  }

	  /* Check DMA transfer result */


			Status = CheckDmaResult(&AxiDma, debug_mode, 1);
	  if (Status != XST_SUCCESS) {
		xil_printf(" Failed reading packet number: %d\r\n",1);
		return XST_FAILURE;
	  }


	}


	xil_printf(" >>> Successfully ran AXI DMA SG Polling Example\r\n");
	xil_printf("--- Exiting DMA Loopback main() --- \r\n");

	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

// -------------------------------------------------------------------
void nops(unsigned int num) {
    int i;
    for(i = 0; i < num; i++) {
        asm("nop");
    }
}
// -------------------------------------------------------------------




//------------------------------------------------------------
int SetupUartPs(XScuGic *IntcInstPtr, XUartPs *UartInstPtr,
			u16 DeviceId, u16 UartIntrId)
{
	int Status;
	XUartPs_Config *Config;
	u32 IntrMask;


	/*
	 * Initialize the UART driver so that it's ready to use
	 * Look up the configuration in the config table, then initialize it.
	 */
	Config = XUartPs_LookupConfig(DeviceId);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XUartPs_CfgInitialize(UartInstPtr, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Check hardware build */
	Status = XUartPs_SelfTest(UartInstPtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Connect the UART to the interrupt subsystem such that interrupts
	 * can occur. This function is application specific.
	 */
	Status = SetupUartInterruptSystem(IntcInstPtr, UartInstPtr, UartIntrId);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Setup the handlers for the UART that will be called from the
	 * interrupt context when data has been sent and received, specify
	 * a pointer to the UART driver instance as the callback reference
	 * so the handlers are able to access the instance data
	 */
	XUartPs_SetHandler(UartInstPtr, (XUartPs_Handler)UartPsISR, UartInstPtr);

	/*
	 * Enable the interrupt of the UART so interrupts will occur, setup
	 * a local loopback so data that is sent will be received.
	 */
	IntrMask =
		XUARTPS_IXR_TOUT | XUARTPS_IXR_PARITY | XUARTPS_IXR_FRAMING |
		XUARTPS_IXR_OVER | XUARTPS_IXR_TXEMPTY | XUARTPS_IXR_RXFULL |
		XUARTPS_IXR_RXOVR;

	if (UartInstPtr->Platform == XPLAT_ZYNQ_ULTRA_MP) {
		IntrMask |= XUARTPS_IXR_RBRK;
	}

	XUartPs_SetInterruptMask(UartInstPtr, IntrMask);

	XUartPs_SetOperMode(UartInstPtr, XUARTPS_OPER_MODE_NORMAL);

	/*
	 * Set the receiver timeout. If it is not set, and the last few bytes
	 * of data do not trigger the over-water or full interrupt, the bytes
	 * will not be received. By default it is disabled.
	 *
	 * The setting of 8 will timeout after 8 x 4 = 32 character times.
	 * Increase the time out value if baud rate is high, decrease it if
	 * baud rate is low.
	 */
	XUartPs_SetRecvTimeout(UartInstPtr, 8);

	return XST_SUCCESS;
}
//------------------------------------------------------------


//------------------------------------------------------------
void UartPsISR(void *CallBackRef, u32 Event, unsigned int EventData)
{
//	xil_printf("IRQ handler!\n");

	/* All of the data has been sent */
	if (Event == XUARTPS_EVENT_SENT_DATA) {
//		xil_printf("1\n");
	}

	/* All of the data has been received */
	if (Event == XUARTPS_EVENT_RECV_DATA) {
//		xil_printf("2\n");
		state |= SERVICE_UART;
	}

	/*
	 * Data was received, but not the expected number of bytes, a
	 * timeout just indicates the data stopped for 8 character times
	 */
	if (Event == XUARTPS_EVENT_RECV_TOUT) {
//		xil_printf("3\n");
	}

	/*
	 * Data was received with an error, keep the data but determine
	 * what kind of errors occurred
	 */
	if (Event == XUARTPS_EVENT_RECV_ERROR) {
//		xil_printf("4\n");
	}

	/*
	 * Data was received with an parity or frame or break error, keep the data
	 * but determine what kind of errors occurred. Specific to Zynq Ultrascale+
	 * MP.
	 */
	if (Event == XUARTPS_EVENT_PARE_FRAME_BRKE) {
//		xil_printf("5\n");
	}

	/*
	 * Data was received with an overrun error, keep the data but determine
	 * what kind of errors occurred. Specific to Zynq Ultrascale+ MP.
	 */
	if (Event == XUARTPS_EVENT_RECV_ORERR) {
//		xil_printf("6\n");
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
static int SetupUartInterruptSystem(XScuGic *IntcInstancePtr,
				XUartPs *UartInstancePtr,
				u16 UartIntrId)
{
	int Status;

	XScuGic_Config *IntcConfig; /* Config for interrupt controller */

	/* Initialize the interrupt controller driver */
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
					IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Connect the interrupt controller interrupt handler to the
	 * hardware interrupt handling logic in the processor.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
				(Xil_ExceptionHandler) XScuGic_InterruptHandler,
				IntcInstancePtr);

	/*
	 * Connect a device driver handler that will be called when an
	 * interrupt for the device occurs, the device driver handler
	 * performs the specific interrupt processing for the device
	 */
	Status = XScuGic_Connect(IntcInstancePtr, UartIntrId,
				  (Xil_ExceptionHandler) XUartPs_InterruptHandler,
				  (void *) UartInstancePtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Enable the interrupt for the device */
	XScuGic_Enable(IntcInstancePtr, UartIntrId);


	/* Enable interrupts */
	 Xil_ExceptionEnable();


	return XST_SUCCESS;
}
//------------------------------------------------------------


//------------------------------------------------------------
void read_uart_bytes(void)
{
	u8 numBytesReceived = 0;
	u16 numPoints;
	unsigned int commandByte,regAddr,regData;

	// loop through Uart Rx buffer and store received data
	while (XUartPs_IsReceiveData(UART_BASEADDR))
	{
		UartRxData[numBytesReceived++] = XUartPs_ReadReg(UART_BASEADDR,
					    					XUARTPS_FIFO_OFFSET);
	}

	//take first received byte as the command
	commandByte = (unsigned int)UartRxData[0];

	// check received byte for valid command
	switch (commandByte){

		case (CMD_READ_DATA):
			send_Tx_data_over_UART(get_num_data_points(UartRxData));
			break;

		case (CMD_READ_PACKETS):
			send_data_over_UART(get_num_data_points(UartRxData),(u8*)outputDataBuffer);
			//send_data_over_UART(get_num_data_points(UartRxData),(u8*)RX_BUFFER_BASE);
			break;

		case (CMD_LOAD_SAWTOOTH_UP_DATA):
			load_sawtooth_up_data();
			break;

		case (CMD_LOAD_SAWTOOTH_DOWN_DATA):
			load_sawtooth_down_data();
			break;

		case (CMD_READ_REGISTER):
			//verify address byte was received after command byte
			if (numBytesReceived<2)
			{
				return;
			}
			regAddr = (unsigned int)UartRxData[1];
			readSPI(&regData,regAddr);
			char *c = (char*)&regData;
			xil_printf("%c%c",*(c+1),*c); //send high byte first
			break;

		case (CMD_WRITE_REGISTER):
			//verify address byte, data bytes(2) received after command byte
			if (numBytesReceived<4)
			{
				return;
			}
			regAddr = (unsigned int)UartRxData[1];
			regData = (UartRxData[2]<<8) | UartRxData[3];
			writeSPI_non_blocking(regAddr,regData);
			break;

		case (CMD_PROG_OTP_CHIP_ADDR):
			//verify 3 bytes for chipID received after command byte
			if (numBytesReceived<4)
			{
				return;
			}
		send_byte_over_UART(ProgramOTP_chipID( (UartRxData[1]<<16) |
				(UartRxData[2]<<8) | UartRxData[3]));
			break;

		case (CMD_PROG_OTP_VBG_TRIM):
			//verify 1 byte for trim value received after command byte
			if (numBytesReceived<2)
			{
				return;
			}
		send_byte_over_UART(ProgramOTP_VbgTrim(UartRxData[1]));
			break;

		case (CMD_CAL_ADC0):
			run_ADC0_calibration();
			break;

		case (CMD_CAL_ADC1):
			run_ADC1_calibration();
			break;

		case (CMD_FAST_CAL_ADC0):
			fastCalibrationADC0();
			break;

		case (CMD_FAST_CAL_ADC1):
			fastCalibrationADC1();
			break;

		case (CMD_READ_ADC0_CAL):
			read_ADC0_cal_data();

			//8 16-bit cal values so send 16 bytes
			send_data_over_UART(16,(u8*)ADC_calData);
			break;

		case (CMD_READ_ADC1_CAL):
			read_ADC1_cal_data();

			//8 16-bit cal values so send 16 bytes
			send_data_over_UART(16,(u8*)ADC_calData);
			break;

		case (CMD_FILL_DAC_TXFIFO):
			sendPacketButton();
			break;

		case (CMD_LOOP_ADC_ACQUISITIONS):
			receivePacketButtonLoop();
			send_byte_over_UART(RESPONSE_ADC_ACQUIRE_DONE);
			break;

		case (CMD_START_ADC_ACQUISITIONS):
			receivePacketButton();
			send_byte_over_UART(RESPONSE_ADC_ACQUIRE_DONE);
			break;

		case (CMD_FPGA_ALL_OUTPUTS_LOW):
			disableSPI();
			disableGyroChannel();
			FPGA_outputs_state = 2;		// 1=on, 2=off
			break;

		case (CMD_FPGA_ALL_OUTPUTS_ENABLED):
			enableSPI();
			enableGyroChannel();
			FPGA_outputs_state = 1;		// 1=on, 2=off
			break;

		case (CMD_FPGA_GET_OUTPUTS_STATE):
			send_byte_over_UART(FPGA_outputs_state);
			break;

		case (CMD_RUN_TADC_CONVERSIONS):
			//verify 4 bytes received(command and 3 data bytes after)
			if (numBytesReceived<4)
			{
				return;
			}

			// first byte received is command, second byte is signal to measure,
			// third and fourth bytes are 16-bit number of measurements MSbyte(3rd) LSbyte(4th)
			numPoints = (u16)((UartRxData[2]<<8)+(UartRxData[3]));
			if (numPoints > MAX_TADC_RESULTS_SIZE)
			{
				numPoints = MAX_TADC_RESULTS_SIZE;
			}

			fill_testADC_results_array((u16)(UartRxData[1]<<8),numPoints);
			send_data_over_UART(numPoints*2,(u8*)testADCresults);
			break;

		case (CMD_ENABLE_HSI_SIGNALS):
			enableHSIGyroChannel();
			break;

		case (CMD_DISABLE_HSI_SIGNALS):
			disableHSIGyroChannel();
			break;

		case (CMD_GET_MCLK_DIV):
			send_byte_over_UART( (u8)(MCK_div_setting>>12) );
			break;

		case (CMD_SET_MCLK_DIV):
			//verify clock division setting byte was received after command byte
			if (numBytesReceived<2)
			{
				return;
			}

			// second byte received has the division setting
			changeMCLKdivision(UartRxData[1]);

			// use new variable in call to configuration function
			setGyroChannelConfiguration(MCK_div_setting | packet_size_setting |
					HSI_input_channel_setting | HSI_output_channel_setting);
			break;

		case (CMD_GET_SPICLK_DIV):
			send_byte_over_UART( (u8)(MCK_div_setting>>12) );
			break;

		case (CMD_SET_SPICLK_DIV):
			//verify clock division setting byte was received after command byte
			if (numBytesReceived<2)
			{
				return;
			}

			// second byte received has the division setting
			changeSPIclockDivision(UartRxData[1]);

			// use new variable in call to configuration function
			setSPIClockDivision(SPI_clock_division_setting);
			break;

		case (CMD_GET_PACKET_SIZE):
			send_byte_over_UART( (u8)(packet_size_setting>>12) );
			break;

		case (CMD_SET_PACKET_SIZE):
			//verify packet size setting byte was received after command byte
			if (numBytesReceived<2)
			{
				return;
			}

			// second byte received has the packet size setting
			packet_size_setting = (u32)UartRxData[1] << 12;

			// use new variable in call to configuration function
			setGyroChannelConfiguration(MCK_div_setting | packet_size_setting |
					HSI_input_channel_setting | HSI_output_channel_setting);
			break;

		case (CMD_GET_DAC_SELECTION):
			send_byte_over_UART( (u8)HSI_output_channel_setting );
			break;

		case (CMD_SET_DAC_SELECTION):
			//verify DAC selection setting byte was received after command byte
			if (numBytesReceived<2)
			{
				return;
			}

			// second byte received has the DAC selection
			HSI_output_channel_setting = UartRxData[1];

			// use new variable in call to configuration function
			setGyroChannelConfiguration(MCK_div_setting | packet_size_setting |
					HSI_input_channel_setting | HSI_output_channel_setting);
			break;

		case (CMD_GET_ADC_SELECTION):
			send_byte_over_UART( (u8)HSI_input_channel_setting );
			break;

		case (CMD_SET_ADC_SELECTION):
			//verify ADC selection setting byte was received after command byte
			if (numBytesReceived<2)
			{
				return;
			}

			// second byte received has the DAC selection
			changeHSI_ADC_selection(UartRxData[1]);

			// use new variable in call to configuration function
			setGyroChannelConfiguration(MCK_div_setting | packet_size_setting |
					HSI_input_channel_setting | HSI_output_channel_setting);
			break;

		case (CMD_GET_CONFIG_SETTINGS):
			sendConfigBytesOverUart();
			break;


	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void sendConfigBytesOverUart(void)
{
	send_byte_over_UART( (u8)HSI_output_channel_setting );		//DAC channel mux selection
	send_byte_over_UART( (u8)(HSI_input_channel_setting>>4) );	//ADC channel mux selection
	send_byte_over_UART( (u8)(MCK_div_setting>>16) );
	send_byte_over_UART( (u8)SPI_clock_division_setting );
	send_byte_over_UART( (u8)(packet_size_setting>>12) );

}
//------------------------------------------------------------


//------------------------------------------------------------
void changeHSI_ADC_selection(u8 selection)
{
	switch (selection){
		case (0):
		HSI_input_channel_setting = CONFIG_INPUT_CHANNEL_HSIA0;
			break;
		case (1):
		HSI_input_channel_setting = CONFIG_INPUT_CHANNEL_HSIA1;
			break;
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void changeSPIclockDivision(u8 divSetting)
{
	switch (divSetting){
		case (DIV_1):
		SPI_clock_division_setting = CONFIG_SPI_CLK_DIV_1;
			break;
		case (DIV_2):
		SPI_clock_division_setting = CONFIG_SPI_CLK_DIV_2;
			break;
		case (DIV_4):
		SPI_clock_division_setting = CONFIG_SPI_CLK_DIV_4;
			break;
		case (DIV_8):
		SPI_clock_division_setting = CONFIG_SPI_CLK_DIV_8;
			break;
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void changeMCLKdivision(u8 divSetting)
{
	switch (divSetting){
		case (DIV_1):
			MCK_div_setting = CONFIG_MCK_DIV_1;
			break;
		case (DIV_2):
			MCK_div_setting = CONFIG_MCK_DIV_2;
			break;
		case (DIV_4):
			MCK_div_setting = CONFIG_MCK_DIV_4;
			break;
		case (DIV_8):
			MCK_div_setting = CONFIG_MCK_DIV_8;
			break;
		case (DIV_16):
			MCK_div_setting = CONFIG_MCK_DIV_16;
			break;
		case (DIV_32):
			MCK_div_setting = CONFIG_MCK_DIV_32;
			break;
		case (DIV_64):
			MCK_div_setting = CONFIG_MCK_DIV_64;
			break;
		case (DIV_128):
			MCK_div_setting = CONFIG_MCK_DIV_128;
			break;
	}
}
//------------------------------------------------------------



//------------------------------------------------------------
void run_ADC0_calibration(void)
{
	unsigned int reg0,reg4,reg5,reg6,reg7,reg0_RO;
	unsigned int newReg4val = 0;
	unsigned int newReg6val = 0;
	u8	reg4changed = 0;
	u8  reg5changed = 0;
	u8  reg7changed = 0;
	u16 numDoneChecks = 0; 	// use this counter to see how many reads of the
							// calibration flag needed until done

	//read all necessary registers here
	readSPI(&reg4,4);
	readSPI(&reg5,5);
	readSPI(&reg6,6);
	readSPI(&reg7,7);

	//ensure ADC0_TEST_SEL is set to normal operation
	if (reg7 & 0xC000)
	{
		reg7changed = 1;
		writeSPI_non_blocking(7,0x00);
	}

	//ensure a TIIA_VGSW bit is set, in reg4[7:4]
	if (!(reg4 & 0x00F0))
	{
		reg4changed = 1;
		newReg4val = reg4 | 0xF0;
	}

	//ensure TIIA is enabled, reg4 bit0
	if (!(reg4 & 0x0001))
	{
		reg4changed = 1;
		newReg4val = newReg4val | 0x1;
	}

	//change reg 4 if needed
	if (reg4changed) writeSPI_non_blocking(4,newReg4val);

	//ensure VGA is enabled, reg5 bit0
	if (!(reg5 & 0x1))
	{
		reg5changed = 1;
		writeSPI_non_blocking(5,reg5|0x1);
	}

	//ensure ADC0 is enabled, reg6 bit1
	if (!(reg6 & 0x2))
	{
		newReg6val = reg6|0x2;
		writeSPI_non_blocking(6,newReg6val);
	}

	//if ADC0 cal bit is on turn it off, reg6 bit2
	if (reg6 & 0x4)
	{
		newReg6val &= 0xFFFB;
		writeSPI_non_blocking(6,newReg6val);
	}

	//set reg0 readback mode to read-only to see when cal is done
	readSPI(&reg0,0);
	writeSPI_non_blocking(0,reg0|0x200);

	//to run cal turn on reg6 bit2
	writeSPI_non_blocking(6,newReg6val|0x4);

	//store reg0 read-only data for initial while loop test
	readSPI(&reg0_RO,0);

	//wait until cal is done, reg0 readback mode bit0=0 during cal
	while (~reg0_RO & 0x1)
	{
		numDoneChecks++;
		readSPI(&reg0_RO,0);
	}

	//restore register 6 with calibration bit off
	writeSPI_non_blocking(6,reg6&0xFFFB);

	//restore registers 4,5,7
	if (reg4changed) writeSPI_non_blocking(4,reg4);
	if (reg5changed) writeSPI_non_blocking(5,reg5);
	if (reg7changed) writeSPI_non_blocking(7,reg7);

	//register 0 back into normal readback mode
	writeSPI_non_blocking(0,reg0&0xFDFF);
}
//------------------------------------------------------------


//------------------------------------------------------------
void run_ADC1_calibration(void)
{
	unsigned int reg0,reg8,reg9,reg10,reg11,reg0_RO;
	unsigned int newreg8val = 0;
	unsigned int newreg10val = 0;
	u16 numDoneChecks = 0; 	// use this counter to see how many reads of the
							// calibration flag needed until done
	u8	reg8changed = 0;
	u8  reg9changed = 0;
	u8  reg11changed = 0;

	//read all necessary registers here
	readSPI(&reg8,8);
	readSPI(&reg9,9);
	readSPI(&reg10,10);
	readSPI(&reg11,11);

	//ensure ADC1_TEST_SEL is set to normal operation
	if (reg11 & 0xC000)
	{
		reg11changed = 1;
		writeSPI_non_blocking(11,0x00);
	}

	//ensure a TIIA_VGSW bit is set, in reg8[7:4]
	if (!(reg8 & 0x00F0))
	{
		reg8changed = 1;
		newreg8val = reg8 | 0xF0;
	}

	//ensure TIIA is enabled, reg8 bit0
	if (!(reg8 & 0x0001))
	{
		reg8changed = 1;
		newreg8val = newreg8val | 0x1;
	}

	//change reg8 if needed
	if (reg8changed) writeSPI_non_blocking(8,newreg8val);

	//ensure VGA is enabled, reg9 bit0
	if (!(reg9 & 0x1))
	{
		reg9changed = 1;
		writeSPI_non_blocking(9,reg9|0x1);
	}

	//ensure ADC1 is enabled, reg10 bit1
	if (!(reg10 & 0x2))
	{
		newreg10val = reg10|0x2;
		writeSPI_non_blocking(10,newreg10val);
	}

	//if ADC1 cal bit is on turn it off, reg10 bit2
	if (reg10 & 0x4)
	{
		newreg10val &= 0xFFFB;
		writeSPI_non_blocking(10,newreg10val);
	}

	//to run cal turn on reg10 bit2
	writeSPI_non_blocking(10,newreg10val|0x4);

	//set reg0 readback mode to read-only to see when cal is done
	readSPI(&reg0,0);
	writeSPI_non_blocking(0,reg0|0x200);

	//store reg0 read-only data for initial while loop test
	readSPI(&reg0_RO,0);

	//wait until cal is done, reg0 readback mode bit1=0 during cal
	while (~reg0_RO & 0x2)
	{
		numDoneChecks++;
		readSPI(&reg0_RO,0);
	}

	//register 0 back into normal readback mode
	writeSPI_non_blocking(0,reg0&0xFBFF);

	//restore register 10 with calibration bit off
	writeSPI_non_blocking(10,reg10&0xFFFB);

	//restore registers 8,9,11
	if (reg8changed) writeSPI_non_blocking(8,reg8);
	if (reg9changed) writeSPI_non_blocking(9,reg9);
	if (reg11changed) writeSPI_non_blocking(11,reg11);
}
//------------------------------------------------------------


//------------------------------------------------------------
void read_ADC0_cal_data(void)
{
	unsigned int reg6,i;
	unsigned int firstCalRegisterAddress = 32;

	//store original register 6 setting
	readSPI(&reg6,6);

	//set register 6 readback mode to read-only
	writeSPI_non_blocking(6,reg6|0xFF00);

	for (i=0;i<8;i++)
	{
		readSPI((unsigned int*)&ADC_calData[i],firstCalRegisterAddress+i);
	}

	//set register 6 readback mode back to normal
	writeSPI_non_blocking(6,reg6&0x00FF);

}
//------------------------------------------------------------


//------------------------------------------------------------
void read_ADC1_cal_data(void)
{
	unsigned int reg10,i;
	unsigned int firstCalRegisterAddress = 40;

	//store original register 10 setting
	readSPI(&reg10,10);

	//set register 6 readback mode to read-only
	writeSPI_non_blocking(10,reg10|0xFF00);

	for (i=0;i < 8; i++)
	{
		readSPI((unsigned int*)&ADC_calData[i],firstCalRegisterAddress+i);
	}

	//set register 10 readback mode back to normal
	writeSPI_non_blocking(10,reg10&0x00FF);

}
//------------------------------------------------------------


//------------------------------------------------------------
void fill_testADC_results_array(u16 signalToMeasure, u16 numReadings)
{
	unsigned int reg0,reg1,i,TADCresult;
	u16 testADCinitialConditions,testADCstartConditions;
	u8 firstSetup = 1;

	//store original register 0,1 setting
	readSPI(&reg0,0);
	readSPI(&reg1,1);

	//set register 1 readback mode to read-only, this is
	//controlled by register 0 bit 10
	writeSPI_non_blocking(0,reg0|0x0400);

	if (numReadings > MAX_TADC_RESULTS_SIZE)
	{
		numReadings = MAX_TADC_RESULTS_SIZE;
	}

	//build initial register setting for desired test case
	testADCinitialConditions = TADC_ENABLE | signalToMeasure |
			TADC_RESET | TADC_START;

	// if temperature sensor is being measured need to enable it too
	if (signalToMeasure == TADC_MUX_TEMPERATURE_SENSOR)
	{
		testADCinitialConditions |= TADC_TEMP_SENSOR_ENABLE;
	}

	// if VEXT is being measured set VEXTSEL bit high too
	if (signalToMeasure == TADC_MUX_VEXT)
	{
		testADCinitialConditions |= TADC_VEXTSEL;
	}

	//to start conversion set the start bit low
	testADCstartConditions = testADCinitialConditions & ~TADC_START;

	// need to set initial conditions and led ADC settle before looping
	// through successive measurements
	writeSPI_non_blocking(1,testADCinitialConditions);

	SetTimerDuration(65535, 8);		// delay for 5msec after initial mux setting
	timerRunning = 1;				// set flag that is cleared in timer ISR
	XTtcPs_Start(&DelayTimer);		// start the timer
	while(timerRunning);			// wait for ISR to clear flag

	SetTimerDuration(10000, 1);		// change timer setting to 100usec
									// for use in loop below

	for (i=0; i < numReadings; i++)
	{
		// initial tadc setting for desired measurement
		writeSPI_non_blocking(1,testADCinitialConditions);

		// start test ADC conversion
		writeSPI_non_blocking(1,testADCstartConditions);

		// wait for conversion to complete
		timerRunning = 1;
		XTtcPs_Start(&DelayTimer);
		while(timerRunning);

		// store result in array
		readSPI((unsigned int*)&TADCresult,1);

		// 12-bit result is in LSBs of 16-bit register
		testADCresults[i] = TADCresult & 0xFFF;
	}

	//restore register 0 with RBKSEL1 turned off
	writeSPI_non_blocking(0,reg0&0xFBFF);
	writeSPI_non_blocking(1,reg1);

}
//------------------------------------------------------------


//------------------------------------------------------------
unsigned int get_num_data_points(u8 *RxData)
{
	unsigned int num_points = 0;

	// most significant byte in number sent first
	num_points += RxData[1];
	num_points = num_points << 8;

	// least significant byte in number sent next
	num_points += RxData[2];

	return num_points;

}
//------------------------------------------------------------



//------------------------------------------------------------
void load_sawtooth_up_data(void)
{
	int i,j;

	UartTxData[0] = 0; // initial array value

	// load the data array with sawtooth data
	for(i=1; i<TX_BUFFER_SIZE; i++)
	{
		j = UartTxData[i-1] + SAWTOOTH_STEP_VALUE;
		if (j>SAWTOOTH_MAX_VALUE)
		{
			UartTxData[i] = 0;
		}
		else{
			UartTxData[i] = j;
		}
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void load_sawtooth_down_data(void)
{
	int i,j;

	UartTxData[0] = SAWTOOTH_MAX_VALUE; // initial array value

	// load the data array with sawtooth data
	for(i=1; i<TX_BUFFER_SIZE; i++){
		j = UartTxData[i-1] - SAWTOOTH_STEP_VALUE;
		if (j < 0){
			UartTxData[i] = SAWTOOTH_MAX_VALUE;
		} else {
			UartTxData[i] = j;
		}
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void send_Tx_data_over_UART(unsigned int num_points_to_send)
{
	int i;
	// send the data array to the transmit buffer as space is available
	for (i = 0; i < num_points_to_send; i++) {
		/* Wait until there is space in TX FIFO */
		 while (XUartPs_IsTransmitFull(XPAR_XUARTPS_0_BASEADDR));

		/* Write the byte into the TX FIFO */
		XUartPs_WriteReg(XPAR_XUARTPS_0_BASEADDR, XUARTPS_FIFO_OFFSET,
				UartTxData[i]);
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void send_data_over_UART(unsigned int num_bytes_to_send, u8 *dataArray)
{
	int i;
	// send the data array to the transmit buffer as space is available
	for (i = 0; i < num_bytes_to_send; i++) {
		/* Wait until there is space in TX FIFO */
		 while (XUartPs_IsTransmitFull(XPAR_XUARTPS_0_BASEADDR));

		/* Write the byte into the TX FIFO */
		XUartPs_WriteReg(XPAR_XUARTPS_0_BASEADDR, XUARTPS_FIFO_OFFSET,
				dataArray[i]);
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void send_byte_over_UART(Xuint8 byteToSend)
{
	/* Wait until there is space in TX FIFO */
	 while (XUartPs_IsTransmitFull(XPAR_XUARTPS_0_BASEADDR));

	/* Write the byte into the TX FIFO */
	XUartPs_WriteReg(XPAR_XUARTPS_0_BASEADDR, XUARTPS_FIFO_OFFSET,
						byteToSend);
}
//------------------------------------------------------------



//------------------------------------------------------------
int InitializeDelayTimer(void)
{
	int Status;
	XTtcPs_Config *Config;

	/*
	 * Look up the configuration based on the device identifier
	 */
	Config = XTtcPs_LookupConfig(DELAY_TIMER_DEVICE_ID);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	/*
	 * Initialize the device
	 */
	Status = XTtcPs_CfgInitialize(&DelayTimer, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Set up appropriate options for Ticker: interval mode without
	 * waveform output.
	 */
	u16 TimerOptions = (XTTCPS_OPTION_INTERVAL_MODE |
						  XTTCPS_OPTION_WAVE_DISABLE);

	/*
	 * Set the options
	 */
	XTtcPs_SetOptions(&DelayTimer, TimerOptions);
	XTtcPs_SetInterval(&DelayTimer, 1000);
	XTtcPs_SetPrescaler(&DelayTimer, 2);

	/*
	 * Connect to the interrupt controller
	 */
	Status = XScuGic_Connect(&interrupt_controller, DELAY_TIMER_INTERRUPT_ID,
		(Xil_InterruptHandler)DelayTimerInterruptHandler, (void *)&DelayTimer);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Enable interrupts for the ttc in global interrupt controller
	 */
	XScuGic_Enable(&interrupt_controller, DELAY_TIMER_INTERRUPT_ID);

	/*
	 * Enable the interval timeout interrupt in this ttc instance
	 */
	XTtcPs_EnableInterrupts(&DelayTimer, XTTCPS_IXR_INTERVAL_MASK);

	return Status;
}
//------------------------------------------------------------



//------------------------------------------------------------
void SetTimerDuration(XInterval num10nsecCounts, u8 prescalar)
{
	/*
	 * Set the interval and prescaler
	 */
	XTtcPs_SetInterval(&DelayTimer, num10nsecCounts);

	if (prescalar == 1)
	{
		prescalar = XTTCPS_CLK_CNTRL_PS_DISABLE;
	}
	XTtcPs_SetPrescaler(&DelayTimer, prescalar);
}
//------------------------------------------------------------



//------------------------------------------------------------
void DelayTimerInterruptHandler(void *CallBackRef)
{
	u32 StatusEvent;

	/*
	 * Read the interrupt status, then write it back to clear the interrupt.
	 */
	StatusEvent = XTtcPs_GetInterruptStatus((XTtcPs *)CallBackRef);
	XTtcPs_ClearInterruptStatus((XTtcPs *)CallBackRef, StatusEvent);

	if (0 != (XTTCPS_IXR_INTERVAL_MASK & StatusEvent)) {

		timerRunning = FALSE;
	}
	else {
		/*
		 * The Interval event should be the only one enabled. If it is
		 * not it is an error
		 */
		TimerErrorCount++;
	}
	XTtcPs_Stop(&DelayTimer);
}
//------------------------------------------------------------



//------------------------------------------------------------
Xuint8 ProgramOTP_chipID(u32 id)
{
	u32 otp32register;

	//shift ID over to bits 31:8 of the 32 bit OTP register
	otp32register = id << 8;
	return ProgramOTP(otp32register);
}
//------------------------------------------------------------



//------------------------------------------------------------
Xuint8 ProgramOTP_VbgTrim(u8 trimVal)
{
	//mask bits 5-31 if set in trimVal
	trimVal &= 0x1F;

	return ProgramOTP((u32)trimVal);
}
//------------------------------------------------------------



//------------------------------------------------------------
Xuint8 ProgramOTP(u32 otp32ProgramValue)
{
	int i;
	Xuint8 readbackErrorCode = 0;
	u32 x = 1;
	u32 otp32TestValue;

	otp32TestValue = readOTP32bits() | otp32ProgramValue;

	// setup the timer for 25usec delay to use later
	SetTimerDuration(2500, 1);

	// loop through all 32 bits in otp register to clear out any 1s
	for(i=0;i<32;i++)
	{
		writeSPI_non_blocking_orig(2,0x0010);		//CLKM=1
		writeSPI_non_blocking_orig(2,0x0000);		//CLKM=0
		writeSPI_non_blocking_orig(2,0x0020);		//CLKS=1
		writeSPI_non_blocking_orig(2,0x0000);		//CLKS=0

	}

	// shift a 1 into bit position 0
	writeSPI_non_blocking_orig(2,0x8000);		//DIN=1,CLKM=0,CLKS=0
	writeSPI_non_blocking_orig(2,0x8010);		//DIN=1,CLKM=1,CLKS=0
	writeSPI_non_blocking_orig(2,0x8000);		//DIN=1,CLKM=0,CLKS=0
	writeSPI_non_blocking_orig(2,0x8020);		//DIN=1,CLKM=0,CLKS=1
	writeSPI_non_blocking_orig(2,0x8000);		//DIN=1,CLKM=0,CLKS=0
	writeSPI_non_blocking_orig(2,0x0000);		//DIN=0,CLKM=0,CLKS=0

	// check each bit position to see if it should be programmed
	// to a '1', then shift bit to next position
	for(i=0;i<32;i++)
	{
		// check if this bit should be programmed
		if (otp32ProgramValue & (x << i) )
		{
			writeSPI_non_blocking_orig(2,0x4000);	//SHORTEN=1,IZAPEN=0,WE=0
			writeSPI_non_blocking_orig(2,0x6000);	//SHORTEN=1,IZAPEN=1,WE=0
			// wait 1<t<10us, ensure spi transfer time takes care of this
			// if no delay is used
			writeSPI_non_blocking_orig(2,0x7000);	//SHORTEN=1,IZAPEN=1,WE=1
			writeSPI_non_blocking_orig(2,0x3000);	//SHORTEN=0,IZAPEN=1,WE=1

			//delay 25usec for zap time
			/*timerRunning = 1;
			XTtcPs_Start(&DelayTimer);
			while(timerRunning);*/
			// delay above was not needed because delay
			// between spi register write completions is ~25usec

			writeSPI_non_blocking_orig(2,0x7000);	//SHORTEN=1,IZAPEN=1,WE=1
			writeSPI_non_blocking_orig(2,0x6000);	//SHORTEN=1,IZAPEN=1,WE=0
			writeSPI_non_blocking_orig(2,0x4000);	//SHORTEN=1,IZAPEN=0,WE=0
			writeSPI_non_blocking_orig(2,0x0000);	//SHORTEN=0,IZAPEN=0,WE=0
		}

		//shift bit to next position in register
		writeSPI_non_blocking_orig(2,0x0010);		//DIN=0,CLKM=1,CLKS=0
		writeSPI_non_blocking_orig(2,0x0000);		//DIN=0,CLKM=0,CLKS=0
		writeSPI_non_blocking_orig(2,0x0020);		//DIN=0,CLKM=0,CLKS=1
		writeSPI_non_blocking_orig(2,0x0000);		//DIN=0,CLKM=0,CLKS=0
	}

	//enable read operations
	writeSPI_non_blocking_orig(2,0x0001);		//RSWEN=1
	// wait min 4.5usec
	writeSPI_non_blocking_orig(2,0x0003);		//BANK=1,RSWEN=1
	writeSPI_non_blocking_orig(2,0x0007);		//READ=1,BANK=1,RSWEN=1

	//test for correct value in NVM register
	if (otp32TestValue != readOTP32bits()) readbackErrorCode |= 0x01;

	//set fuse block in read mode (low current)
	writeSPI_non_blocking_orig(2,0x0047);		//BIASL=1,READ=1,BANK=1,RSWEN=1
	//test for correct value in NVM register
	if (otp32TestValue != readOTP32bits()) readbackErrorCode |= 0x02;

	//set fuse block in read mode (high current)
	writeSPI_non_blocking_orig(2,0x000F);		//BIASH=1,READ=1,BANK=1,RSWEN=1
	//test for correct value in NVM register
	if (otp32TestValue != readOTP32bits()) readbackErrorCode |= 0x04;

	//clear all bits in the OTP programming register
	writeSPI_non_blocking_orig(2,0x0000);

	return readbackErrorCode;
}
//------------------------------------------------------------


//------------------------------------------------------------
/*
 * Reads the 32-bit value from the OTP memory block
 */
u32 readOTP32bits(void)
{
	unsigned int reg3originalValue,regReadResult;
	u32 otp32bitResult;

	// read value of register 3 to restore later
	readSPI(&reg3originalValue,3);

	// set 2 RBKSEL bits in order to read OTP register values
	writeSPI_non_blocking_orig(3,(0x0300|reg3originalValue));

	// read lower 16 bits of 32 bit result
	readSPI(&regReadResult,2);
	otp32bitResult = regReadResult;

	// read upper 16 bits of 32 bit result
	readSPI(&regReadResult,3);
	otp32bitResult += (regReadResult << 16);

	// restore register 3 original value
	writeSPI_non_blocking_orig(3,reg3originalValue);

	return otp32bitResult;
}

// --------------------------------------------------------------------
void test_DMA_receive_packets(int num_packets){

	resetGyroRxFIFO();
	setGyroChannelControl(0x00000010);
	nops(4000000);
	receiveDMApacket(&AxiDma, 0);

	setGyroChannelControl(0x00000010);
	nops(4000000);
	receiveDMApacket(&AxiDma, 0);
	setGyroChannelControl(0x00000000);

	setGyroChannelControl(0x00000010);
	nops(4000000);
	receiveDMApacket(&AxiDma, 0);
	setGyroChannelControl(0x00000000);

}

// -------------------------------------------------------------------
int main() {
    init_platform();



//    unsigned int readVal, writeVal;

    xil_printf("\n\r=====================\n\r");
    xil_printf("== START version 28 ==\n\r");
    // set interrupt_0/1 of AXI PL interrupt generator to 0

    *(baseaddr_p+0) = 0x00000000;
    *(baseaddr_p+1) = 0x00000000;
    *(baseaddr_p+2) = 0x00000000;
    *(baseaddr_p+3) = 0x00000000;

    xil_printf("Checkpoint 1\n\r");

    // set interrupt_0/1 of AXI PL interrupt generator to 1
    *(baseaddr_p+0) = 0x00000001;
    *(baseaddr_p+1) = 0x00000002;

    xil_printf("Checkpoint 2\n\r");
    // read interrupt_0/1 of AXI PL interrupt generator
    xil_printf("slv_reg0: 0x%08x\n\r", *(baseaddr_p+0));
    xil_printf("slv_reg1: 0x%08x\n\r", *(baseaddr_p+1));
    xil_printf("slv_reg2: 0x%08x\n\r", *(baseaddr_p+2));
    xil_printf("slv_reg3: 0x%08x\n\r", *(baseaddr_p+3));


    // clear SPI registers
    initSPI();
//    enableSPI();


    setSPIClockDivision(SPI_clock_division_setting); // needs to be 1 , 2 or 3
    readSPIStatus();

    // set interrupt_0/1 of AXI PL interrupt generator to 0
    *(baseaddr_p+0) = 0x00000000;
    *(baseaddr_p+1) = 0x00000000;
    *(baseaddr_p+2) = 0x00000000;

   // xil_printf("Checkpoint 3\n\r");
    // read interrupt_0/1 of AXI PL interrupt generator

/*
    xil_printf("Checkpoint 4\n\r");
    // setup and enable interrupts for IRQ_F2P[1:0]
    int status = setup_interrupt_system();
    if (status != XST_SUCCESS) {
         return XST_FAILURE;
    }

    xil_printf("Checkpoint 5\n\r");
    nops(1000);
    // set interrupt_0 of AXI PL interrupt generator to 1 (isr0 will be called)
    *(baseaddr_p+0) = 0x00000001;

    xil_printf("Checkpoint 6\n\r");
    nops(1000);
    // set interrupt_1 of AXI PL interrupt generator to 1 (isr1 will be called)
    *(baseaddr_p+1) = 0x00000001;
    xil_printf("Reading slv_reg1: 0x%08x\n\r", *(baseaddr_p+1));

    // disable interrupts for IRQ_F2P[1:1]
    XScuGic_Disable(&intc, INTC_INTERRUPT_ID_1);

    xil_printf("Checkpoint 7\n\r");
    nops(1000);
    // set interrupt_0 of AXI PL interrupt generator to 1 (isr0 will be called)
    *(baseaddr_p+0) = 0x00000001;

    xil_printf("Checkpoint 8\n\r");
    nops(10000);
    // set interrupt_1 of AXI PL interrupt generator to 1non
    // (isr1 wont be called since interrupts for IRQ_F2P[1:1] are disabled)
    *(baseaddr_p+1) = 0x00000000;

    xil_printf("Checkpoint 9\n\r");
	nops(1000);
	// set interrupt_0 of AXI PL interrupt generator to 1 (isr0 will be called)
	*(baseaddr_p+2) = 0x00000001;
	nops(10000000);
	*(baseaddr_p+2) = 0x00000000;
    xil_printf("Before Busy-Wait Loop slv_reg3: 0x%08x\n\r", *(baseaddr_p+3));

    flag = 1;
    while(flag == 1){
    	nops(100);
    }
    xil_printf("After Busy-Wait Loop slv_reg3: 0x%08x\n\r", *(baseaddr_p+3));
*/
/*
    xil_printf("== SPI test ==\n\r");
    setControlSPI(0x00000007);		// clock division

    writeVal = 0x00808A51;
    xil_printf(" SPI writing : 0x%08x\n\r", writeVal);
    err = writeSPI_non_blocking(0x00000000, writeVal);		// write operation
    if(err == 0){
    	xil_printf(" Write Success \n\r");
    } else {
    	xil_printf(" Write Fail \n\r");
    }

    err = readSPI(&readVal, 0x00000000);
    xil_printf(" SPI reading : 0x%08x\n\r", readVal);
    xil_printf("After SPI reading 0 done: 0x%08x\n\r", *(baseaddr_spi+0));
    xil_printf("After SPI reading 0 done: 0x%08x\n\r", *(baseaddr_spi+0));

    */

    xil_printf("== GYRO Channel test ==\n\r");

    //readGyroTxFIFODebugData();
    //readGyroRxFIFODebugData();
    resetGyroTxFIFO();
    resetGyroRxFIFO();
    initGyroChannel();
//    enableGyroChannel();

    //configure ADC0, ADC1 here via spi

    // --- loopback mode, POL = 0, in and out channels = 00
    //setGyroChannelConfiguration(0x01000000);

    //=======================================================
    // setGyroChannelConfiguration() description:
    //
    // bit 18:16 is to divide clock by 1/2/4/8/16/32/64/128
    // with 128 (7 Hex) we get 50 MHz divided by 128 = 390 KHz.
    // bits 14:12 are to select the packet size.
    //  000 is 64 samples  (32 words)
    //  001 is 128 samples  (64 words)
    //  010 is 256 samples (128 words)
    //  011 is 512 samples (256 words)
    //  100 is 1024 samples  (512 words)
    //  101 is 2048 samples  (1024 words)
    //  110 is 4096 samples (2048 words)
    //  111 is 8192 samples (4096 words)
    //
    // bits 6:4 - control the in+channel:
    //   00 is HSI_A0
    //   01 is HSI_A1
    //   10 and 11 inactive.
    // bits 2:0  - control the out_channel:
    //   000 is HSI_DAP
    //   001 is HSI_DAM
    //   010 is HSI_DBP
    //   011 is HGSI_DBM
    //	 100 is HSI_DC
    //=======================================================
    setGyroChannelConfiguration(MCK_div_setting | packet_size_setting |
    		HSI_input_channel_setting | HSI_output_channel_setting);
    //setGyroChannelConfiguration(0x00017000);

    setGyroChannelControl(0x00000000);

    xil_printf(" - after initialization ==\n\r");

    readGyroChannelStatus();
    readGyroChannelDebugData();
    readGyroTxFIFODebugData();
    readGyroRxFIFODebugData();

    xil_printf("== Starting FIFO / DMA test ++\n\r");

    initDMADevice();

    //setGyroChannelControl(0x00000011); // moved inside loopback
    //test_DMA_receive_packets(1);
    // --- stopping both channels
	setGyroChannelControl(0x00000000);

	//readGyroChannelStatus();
	//readGyroChannelDebugData();


	//readGyroTxFIFODebugData();
	//readGyroRxFIFODebugData();

    xil_printf("== After Rx ++\n\r");

    xil_printf("== STOP ==\n\r");
    xil_printf("=====================\n\n\r");

/*


xil_printf("== START 2  ==\n\r");
    acquireSamples(MAX_PKT_LEN);
xil_printf("== STOP 2  ==\n\r");

*/


    //#################################################################
    //#################################################################
    // code below here is merged from zedboard project used to develop
    // UART interrupts for received data
    //#################################################################
    //#################################################################
    int looping = 1;

	Status = SetupUartPs(&interrupt_controller, &UartPs,
					UARTPS_DEVICE_ID, UART_INT_IRQ_ID);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed to set up UartPs\r\n");
		return XST_FAILURE;
	}

	xil_printf("  waiting for received UART data...\n");

	InitializeDelayTimer();

	while(looping){// loop here and let interrupts drive further actions


		//-------------------------------------------------------------------
		// uart received data so retrieve command
		if (state & SERVICE_UART){

			read_uart_bytes();
			state &= ~SERVICE_UART;
		}
		//-------------------------------------------------------------------


	}
	// end of code for UART interrupts
	//#################################################################
	//#################################################################



    cleanup_platform();
    return 0;
}
